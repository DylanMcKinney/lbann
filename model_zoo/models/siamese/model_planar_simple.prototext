model {
  name: "planar_model"
  planar {
    simple {
      num_heads: 2
    }
  }
  data_layout: "data_parallel"
  mini_batch_size: 256
  block_size: 256
  num_epochs: 20
  num_parallel_readers: 0
  procs_per_model: 0
  use_cudnn: true
  num_gpus: -1

  ###################################################
  # Objective function
  ###################################################

  objective_function {
    cross_entropy {}
    l2_weight_regularization {
      scale_factor: 0.0005
    }
  }

  ###################################################
  # Metrics
  ###################################################

  metric { categorical_accuracy {} }
  metric {
    top_k_categorical_accuracy {
       top_k: 5
    }
  }

  ###################################################
  # Callbacks 
  ###################################################
  #callback {
  #  imcomm {
  #    intermodel_comm_method: "normal"
  #    layers: "conv1 conv2 conv3 conv4 conv5 fc6 fc7 fc8"
  #  }  
  #}
  #callback {
  #  print {
  #    interval: 1
  #  }
  #}
  #callback {
  #  timer {
  #  }
  #}
  #callback {
  #  summary {
  #    dir: "."
  #    batch_interval: 1
  #    mat_interval: 25
  #  }
  #}
  # callback {
  #   save_images {
  #     image_dir: "
  #     extension: "jpg"
  #   }
  # }
  # callback {
  #   dump_mb_indices {
  #     basename: "debug_alexnet/"
  #     interval: 1
  #   }
  # }
  # callback {
  #   disp_io_stats {
  #     layers: "1"
  #   }
  # }
  # callback {
  #   debug {
  #     phase: "train"
  #   }
  # }
  # callback {
  #   debug_io {
  #     phase: "train"
  #     lvl: 1
  #   }
  # }
  # callback {
  #   gradient_check {
  #     step_size: 0
  #     verbose: false
  #   }
  # }

  ###################################################
  # start of layers
  ###################################################

  layer {
    parents: ""
    name: "data"
    children: "slice1"
    data_layout: "data_parallel"
    input_partitioned_minibatch {
    }
  }

  layer {
    parents: "data"
    name: "slice1"
    children: "reshape1"
    data_layout: "data_parallel"
    slice {
      slice_axis: 0
      slice_points: "0 3 6"
    }
  }

  layer {
    parents: "slice1"
    name: "reshape1"
    children: "conv1"
    data_layout: "data_parallel"
    reshape {
      num_dims: 3
      dims: "3 96 96"
    }
  }

  layer {
    parents: "reshape1"
    name: "conv1"
    children: "relu1"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels: 96
      conv_dims: "11 11"
      conv_pads: "0 0"
      conv_strides: "4 4"
      has_bias: true
      has_vectors: true
    }
  }

  layer {
    parents: "conv1"
    name: "relu1"
    children: "norm1"
    data_layout: "data_parallel"
    relu {
    }
  }

  layer {
    parents: "relu1"
    name: "norm1"
    children: "pool1"
    data_layout: "data_parallel"
    local_response_normalization {
      window_width: 5
      lrn_alpha: 0.0001
      lrn_beta: 0.75
      lrn_k: 2
    }
  }

  layer {
    parents: "norm1"
    name: "pool1"
    children: "conv2"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "3 3"
      pool_pads: "0 0"
      pool_strides: "2 2"
      pool_mode: "max"
      has_vectors: true
    }
  }

  layer {
    parents: "pool1"
    name: "conv2"
    children: "relu2"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  256
      conv_dims: "5 5"
      conv_pads: "2 2"
      conv_strides: "1 1"
      has_bias: true
      bias_initial_value: 0.1
      has_vectors: true
    }
  }

  layer {
    parents: "conv2"
    name: "relu2"
    children: "norm2"
    data_layout: "data_parallel"
    relu {
    }
  }

  layer {
    parents: "relu2"
    name: "norm2"
    children: "pool2"
    data_layout: "data_parallel"
    local_response_normalization {
      window_width: 5
      lrn_alpha: 0.0001
      lrn_beta: 0.75
      lrn_k: 2
    }
  }

  layer {
    parents: "norm2"
    name: "pool2"
    children: "conv3"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "3 3"
      pool_pads: "0 0"
      pool_strides: "2 2"
      pool_mode: "max"
      has_vectors: true
    }
  }

  layer {
    parents: "pool2"
    name: "conv3"
    children: "relu3"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  384
      conv_dims: "3 3"
      conv_pads: "1 1"
      conv_strides: "1 1"
      has_bias: true
      has_vectors: true
    }
  }

  layer {
    parents: "conv3"
    name: "relu3"
    children: "conv4"
    data_layout: "data_parallel"
    relu {
    }
  }

  layer {
    parents: "relu3"
    name: "conv4"
    children: "relu4"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  384
      conv_dims: "3 3"
      conv_pads: "1 1"
      conv_strides: "1 1"
      has_bias: true
      bias_initial_value: 0.1
      has_vectors: true
    }
  }

  layer {
    parents: "conv4"
    name: "relu4"
    children: "conv5"
    data_layout: "data_parallel"
    relu {
    }
  }

  layer {
    parents: "relu4"
    name: "conv5"
    children: "relu5"
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_output_channels:  256
      conv_dims: "3 3"
      conv_pads: "1 1"
      conv_strides: "1 1"
      has_bias: true
      bias_initial_value: 0.1
      has_vectors: true
    }
  }

  layer {
    parents: "conv5"
    name: "relu5"
    children: "pool3"
    data_layout: "data_parallel"
    relu {
    }
  }

  layer {
    parents: "relu5"
    name: "pool3"
    children: "fc6"
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      pool_dims: "3 3"
      pool_pads: "0 0"
      pool_strides: "2 2"
      pool_mode: "max"
      has_vectors: true
    }
  }

  layer {
    parents: "pool3"
    name: "fc6"
    children: "relu6"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 4096
      has_bias: true
      bias_initial_value: 0.1
    }
  }

  layer {
    parents: "fc6"
    name: "relu6"
    children: "drop6"
    data_layout: "model_parallel"
    relu {
    }
  }

  layer {
    parents: "relu6"
    name: "drop6"
    children: "concatenation1"
    data_layout: "model_parallel"
    dropout {
      keep_prob: 0.5
    }
  }

  layer {
    parents: "drop6"
    name: "concatenation1"
    children: "fc7"
    data_layout: "model_parallel"
    concatenation {
      concatenation_axis: 0
    }
  }

  layer {
    parents: "concatenation1"
    name: "fc7"
    children: "relu7"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 4096
      has_bias: true
      bias_initial_value: 0.1
    }
  }

  layer {
    parents: "fc7"
    name: "relu7"
    children: "drop7"
    data_layout: "model_parallel"
    relu {
    }
  }

  layer {
    parents: "relu7"
    name: "drop7"
    children: "fc8"
    data_layout: "model_parallel"
    dropout {
      keep_prob: 0.5
    }
  }

  layer {
    parents: "drop7"
    name: "fc8"
    children: "prob"
    data_layout: "model_parallel"
    fully_connected {
      num_neurons: 1000
      has_bias: false
    }
  }

  layer {
    parents: "fc8"
    name: "prob"
    children: "target"
    data_layout: "model_parallel"
    softmax {
    }
  }

  layer {
    parents: "prob"
    name: "target"
    children: ""
    data_layout: "data_parallel"
    target_partitioned_minibatch {
      shared_data_reader: true
    }
  }

}
