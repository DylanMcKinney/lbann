/** \page getting_started Getting Started 

\section getting_started_download Download

LBANN can be cloned from the <a
href="https://github.com/LLNL/lbann">GitHub repository</a>:
  
\code{.sh}
$ git clone https://github.com/LLNL/lbann.git
\endcode

\section getting_started_dependencies Dependencies
- \subpage cmake
- \subpage mpi
- \subpage elemental
- \subpage opencv
- CUDA (optional)
- cuDNN (optional)
- \subpage protobuf (optional)
- \subpage doxygen (optional)

LBANN also requires a C++ compiler with OpenMP support. The GCC 5.0
and Intel 16.0 C++ compilers are recommended.

\section getting_started_compile Compilation

\code{.sh}
$ cd path/to/lbann
$ mkdir -p build/my_build_dir
$ cd build/my_build_dir
$ cmake ../..
$ make
\endcode

To generate local documentation, navigate to the build directory and
type:

\code{.sh}
$ make doc
\endcode

It will typically be necessary to manually set CMake variables to
control the build configuration. For instance, to set the variable
SOME_CMAKE_VARIABLE to a value of "/some/file/path", simply put "-D
SOME_CMAKE_VARIABLE=/some/file/path" as a command-line argument for
cmake. Some useful variables are listed below:

CMake Variable         | Description
-----------------------|-------------------------
CMAKE_BUILD_TYPE       | "Release" or "Debug"
CMAKE_CXX_COMPILER     | C++ compiler
CMAKE_C_COMPILER       | C compiler
CMAKE_Fortran_COMPILER | Fortran compiler
MPI_CXX_COMPILER       | MPI C++ compiler
MPI_C_COMPILER         | MPI C compiler
MPI_Fortran_COMPILER   | MPI Fortran compiler
GFORTRAN_LIB           | Fortran library (may be needed when using gfortran)
Elemental_DIR          | Elemental install directory
OpenCV_DIR             | OpenCV install directory
CUDA_TOOLKIT_ROOT_DIR  | CUDA install directory
cuDNN_DIR              | cuDNN install directory
WITH_CUDA              | Include CUDA in build
WITH_CUDNN             | Include cuDNN in build
WITH_TBINF             | Include Tensorboard interface in build
FORCE_ELEMENTAL_BUILD  | Force local build of Elemental
FORCE_OPENCV_BUILD     | Force local build of OpenCV
FORCE_PROTOBUF_BUILD   | Force local build of Protocol Buffers (enabled by default)
VERBOSE                | Verbose output
CMAKE_INSTALL_MESSAGE  | Message mode when recompiling LBANN ("ALWAYS" or "LAZY")
MAKE_NUM_PROCESSES     | Number of parallel processes when building dependencies
LIBRARY_TYPE           | "SHARED" or "STATIC"

After successfully compiling, proceed to \ref basic_usage.

\section getting_started_scripts Build Scripts

The shell script `build_lbann_lc.sh` is provided to automatically
configure and build LBANN on LC systems at LLNL:

\code{.sh}
$ cd path/to/lbann
$ scripts/build_lbann_lc.sh --help
$ scripts/build_lbann_lc.sh
\endcode

The shell script `build_lbann_osx.sh` is provided to install
dependencies with <a href="http://brew.sh">Homebrew</a>, configure
LBANN, and build LBANN on OS X systems:

\code{.sh}
$ cd path/to/lbann
$ scripts/build_lbann_osx.sh
\endcode

*/

/** \page cmake CMake

<a href="https://cmake.org">CMake</a> is a tool to manage the software
build process. The LBANN build system, as well as the build system of
many of its dependencies, is implemented with CMake. LBANN requires
CMake version 2.8.11 or later.

\section cmake_install_linux Installation on Linux

Talk to your sysadmin.

\section cmake_install_osx Installation on OS X

Use <a href="http://brew.sh">Homebrew</a>:
\code{.sh}
$ brew install cmake
\endcode
*/

/** \page mpi MPI

MPI is a specification for message-passing. It manages distributed
memory communication within Elemental and is also called directly by
LBANN. Common implementations include <a
href="https://www.mpich.org">MPICH</a>, <a
href="https://www.open-mpi.org">Open MPI</a>, and <a
href="http://mvapich.cse.ohio-state.edu">MVAPICH2</a>.  Elemental, and
hence LBANN, requires implementations that meet the MPI-2
specification.

\section mpi_install_linux Installation on Linux

Talk to your sysadmin.

\section mpi_install_osx Installation on OS X

Use <a href="http://brew.sh">Homebrew</a>:
\code{.sh}
$ brew install mpich2
\endcode
*/

/** \page elemental Elemental

<a href="http://www.libelemental.org">Elemental</a> is a package for
distributed-memory linear algebra and optimization. It performs much
of the distributed memory management and linear algebra in LBANN.
LBANN requires a recent version of Elemental (as of 9/11/2016), so
using the development version is recommended. If Elemental is not
detected, it will be downloaded and built locally.

\section elemental_download Download

Download the source code from the <a
href="https://github.com/elemental/Elemental">GitHub repository</a>:

\code{.sh}
$ git clone https://github.com/elemental/Elemental.git
\endcode

Using precompiled binaries is not recommended since the latest release
(0.86) is not compatible with LBANN.

\section elemental_install Installation

\code{.sh}
$ cd /path/to/elemental
$ mkdir build
$ mkdir install
$ cd build
$ cmake -D CMAKE_INSTALL_PREFIX=/path/to/elemental/install ..
$ make
$ make install
\endcode

Consult <a
href="http://libelemental.org/documentation/dev/build.html">Elemental's
documentation</a> for additional details and options.  LBANN may
encounter linking problems with Elemental's dependencies, especially
BLAS and LAPACK, so it may be necessary to modify LD_LIBRARY_PATH to
include paths to the appropriate library directories:

\code{.sh}
$ export LD_LIBRARY_PATH="/first/library/dir:/second/library/dir:$LD_LIBRARY_PATH"
\endcode

*/

/** \page opencv OpenCV

OpenCV is a library with computer vision functions. LBANN uses version
2.4 and may encounter problems with version 3.0 or later. If OpenCV is
not detected, it will be downloaded and built locally.

\section opencv_install_linux Installation on Linux

Download OpenCV from the <a
href="https://github.com/opencv/opencv">GitHub repository</a>:

\code{.sh}
$ git clone https://github.com/opencv/opencv.git
$ cd opencv
$ git checkout 2.4.13
\endcode

Build OpenCV:

\code{.sh}
$ cd /path/to/opencv
$ mkdir build
$ mkdir install
$ cd build
$ cmake -D CMAKE_INSTALL_PREFIX=/path/to/opencv/install ..
$ make
$ make install
\endcode

It may be necessary to set the following CMake variables to avoid
build errors:

CMake Variable       | Value
---------------------|------------------------
OPENCV_WITH_CUDA     | OFF
OPENCV_WITH_IPP      | OFF
OPENCV_WITH_GPHOTO   | OFF

\section opencv_installing_osx Installation on OS X

Use <a href="http://brew.sh">Homebrew</a>:
\code{.sh}
 $ brew install opencv
\endcode
*/

/** \page protobuf Protocol Buffers

The Tensorboard interface uses <a
href="https://developers.google.com/protocol-buffers/">Protocol
Buffers</a>. Version 3.0.2 or newer is required. If Protocol Buffers
is not detected, it will be downloaded and built locally.

\section protobuf_download Download

Download the source code from the <a
href="https://github.com/google/protobuf">GitHub repository</a>:

\code{.sh}
$ git clone https://github.com/google/protobuf.git
$ cd protobuf
$ git checkout v3.0.2
\endcode

\section protobuf_install Installation

\code{.sh}
$ cd /path/to/protobuf
$ mkdir install
$ ./autoget.sh
$ ./configure --prefix=/path/to/protobuf/install
$ make
$ make install
\endcode

*/

/** \page doxygen Doxygen

Doxygen is a documentation generator.

\section doxygen_install_linux Installation on Linux

Talk to your sysadmin.

\section doxygen_install_osx Installation on OS X

Use <a href="http://brew.sh">Homebrew</a>:
\code{.sh}
$ brew install doxygen
$ brew install graphviz
\endcode
*/
