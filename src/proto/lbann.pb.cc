// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbann.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../../include/lbann/proto/lbann.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbann_data {

namespace {

const ::google::protobuf::Descriptor* LbannPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LbannPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReader_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReaderMnist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReaderMnist_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReaderCifar10_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReaderCifar10_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReaderImagenet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReaderImagenet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReaderNci_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReaderNci_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReaderNciRegression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReaderNciRegression_reflection_ = NULL;
const ::google::protobuf::Descriptor* Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Model_reflection_ = NULL;
const ::google::protobuf::Descriptor* Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Input_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Input_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputDistributedMiniBatchParallelIO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputDistributedMiniBatchParallelIO_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputDistributedMiniBatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputDistributedMiniBatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullyConnected_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullyConnected_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pooling_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pooling_reflection_ = NULL;
const ::google::protobuf::Descriptor* Convolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Convolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* Softmax_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Softmax_reflection_ = NULL;
const ::google::protobuf::Descriptor* Target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Target_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetParallel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetParallel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetDistributedMinibatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetDistributedMinibatch_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lbann_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lbann_2eproto() {
  protobuf_AddDesc_lbann_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lbann.proto");
  GOOGLE_CHECK(file != NULL);
  LbannPB_descriptor_ = file->message_type(0);
  static const int LbannPB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, data_reader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, objective_fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, mini_batch_size_),
  };
  LbannPB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LbannPB_descriptor_,
      LbannPB::default_instance_,
      LbannPB_offsets_,
      -1,
      -1,
      -1,
      sizeof(LbannPB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, _is_default_instance_));
  DataReader_descriptor_ = file->message_type(1);
  static const int DataReader_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, mnist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, cifar10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, imagenet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, nci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, nci_regression_),
  };
  DataReader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReader_descriptor_,
      DataReader::default_instance_,
      DataReader_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataReader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, _is_default_instance_));
  DataReaderMnist_descriptor_ = file->message_type(2);
  static const int DataReaderMnist_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, file_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, image_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, label_file_),
  };
  DataReaderMnist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReaderMnist_descriptor_,
      DataReaderMnist::default_instance_,
      DataReaderMnist_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataReaderMnist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, _is_default_instance_));
  DataReaderCifar10_descriptor_ = file->message_type(3);
  static const int DataReaderCifar10_offsets_[1] = {
  };
  DataReaderCifar10_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReaderCifar10_descriptor_,
      DataReaderCifar10::default_instance_,
      DataReaderCifar10_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataReaderCifar10),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderCifar10, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderCifar10, _is_default_instance_));
  DataReaderImagenet_descriptor_ = file->message_type(4);
  static const int DataReaderImagenet_offsets_[1] = {
  };
  DataReaderImagenet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReaderImagenet_descriptor_,
      DataReaderImagenet::default_instance_,
      DataReaderImagenet_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataReaderImagenet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderImagenet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderImagenet, _is_default_instance_));
  DataReaderNci_descriptor_ = file->message_type(5);
  static const int DataReaderNci_offsets_[1] = {
  };
  DataReaderNci_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReaderNci_descriptor_,
      DataReaderNci::default_instance_,
      DataReaderNci_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataReaderNci),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderNci, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderNci, _is_default_instance_));
  DataReaderNciRegression_descriptor_ = file->message_type(6);
  static const int DataReaderNciRegression_offsets_[1] = {
  };
  DataReaderNciRegression_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReaderNciRegression_descriptor_,
      DataReaderNciRegression::default_instance_,
      DataReaderNciRegression_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataReaderNciRegression),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderNciRegression, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderNciRegression, _is_default_instance_));
  Model_descriptor_ = file->message_type(7);
  static const int Model_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, objective_function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, evaluation_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, num_epochs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, callback_),
  };
  Model_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Model_descriptor_,
      Model::default_instance_,
      Model_offsets_,
      -1,
      -1,
      -1,
      sizeof(Model),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _is_default_instance_));
  Layer_descriptor_ = file->message_type(8);
  static const int Layer_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, input_distributed_minibatch_parallel_io_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, input_distributed_minibatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, fully_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, pooling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, convolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, softmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, target_parallel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, target_distributed_minibatch_),
  };
  Layer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Layer_descriptor_,
      Layer::default_instance_,
      Layer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Layer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _is_default_instance_));
  Input_descriptor_ = file->message_type(9);
  static const int Input_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, mini_batch_size_),
  };
  Input_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Input_descriptor_,
      Input::default_instance_,
      Input_offsets_,
      -1,
      -1,
      -1,
      sizeof(Input),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _is_default_instance_));
  InputDistributedMiniBatchParallelIO_descriptor_ = file->message_type(10);
  static const int InputDistributedMiniBatchParallelIO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatchParallelIO, num_parallel_readers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatchParallelIO, mini_batch_size_),
  };
  InputDistributedMiniBatchParallelIO_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputDistributedMiniBatchParallelIO_descriptor_,
      InputDistributedMiniBatchParallelIO::default_instance_,
      InputDistributedMiniBatchParallelIO_offsets_,
      -1,
      -1,
      -1,
      sizeof(InputDistributedMiniBatchParallelIO),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatchParallelIO, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatchParallelIO, _is_default_instance_));
  InputDistributedMiniBatch_descriptor_ = file->message_type(11);
  static const int InputDistributedMiniBatch_offsets_[1] = {
  };
  InputDistributedMiniBatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputDistributedMiniBatch_descriptor_,
      InputDistributedMiniBatch::default_instance_,
      InputDistributedMiniBatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(InputDistributedMiniBatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatch, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatch, _is_default_instance_));
  FullyConnected_descriptor_ = file->message_type(12);
  static const int FullyConnected_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, num_prev_neurons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, num_neurons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, mini_batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, activation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, weight_initialization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, optimizer_),
  };
  FullyConnected_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FullyConnected_descriptor_,
      FullyConnected::default_instance_,
      FullyConnected_offsets_,
      -1,
      -1,
      -1,
      sizeof(FullyConnected),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, _is_default_instance_));
  Pooling_descriptor_ = file->message_type(13);
  static const int Pooling_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, num_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, num_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, input_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_pads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_strides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, activation_type_),
  };
  Pooling_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pooling_descriptor_,
      Pooling::default_instance_,
      Pooling_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pooling),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, _is_default_instance_));
  Convolution_descriptor_ = file->message_type(14);
  static const int Convolution_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, num_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, num_input_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, input_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, num_output_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, filter_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, conv_pads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, conv_strides_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, mini_batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, weight_initialization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, activation_type_),
  };
  Convolution_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Convolution_descriptor_,
      Convolution::default_instance_,
      Convolution_offsets_,
      -1,
      -1,
      -1,
      sizeof(Convolution),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, _is_default_instance_));
  Softmax_descriptor_ = file->message_type(15);
  static const int Softmax_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, num_prev_neurons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, num_neurons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, weight_initialization_),
  };
  Softmax_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Softmax_descriptor_,
      Softmax::default_instance_,
      Softmax_offsets_,
      -1,
      -1,
      -1,
      sizeof(Softmax),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, _is_default_instance_));
  Target_descriptor_ = file->message_type(16);
  static const int Target_offsets_[1] = {
  };
  Target_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Target_descriptor_,
      Target::default_instance_,
      Target_offsets_,
      -1,
      -1,
      -1,
      sizeof(Target),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _is_default_instance_));
  TargetParallel_descriptor_ = file->message_type(17);
  static const int TargetParallel_offsets_[1] = {
  };
  TargetParallel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetParallel_descriptor_,
      TargetParallel::default_instance_,
      TargetParallel_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetParallel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParallel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParallel, _is_default_instance_));
  TargetDistributedMinibatch_descriptor_ = file->message_type(18);
  static const int TargetDistributedMinibatch_offsets_[1] = {
  };
  TargetDistributedMinibatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetDistributedMinibatch_descriptor_,
      TargetDistributedMinibatch::default_instance_,
      TargetDistributedMinibatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetDistributedMinibatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatch, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatch, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lbann_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LbannPB_descriptor_, &LbannPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReader_descriptor_, &DataReader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReaderMnist_descriptor_, &DataReaderMnist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReaderCifar10_descriptor_, &DataReaderCifar10::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReaderImagenet_descriptor_, &DataReaderImagenet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReaderNci_descriptor_, &DataReaderNci::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReaderNciRegression_descriptor_, &DataReaderNciRegression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Model_descriptor_, &Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Layer_descriptor_, &Layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Input_descriptor_, &Input::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputDistributedMiniBatchParallelIO_descriptor_, &InputDistributedMiniBatchParallelIO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputDistributedMiniBatch_descriptor_, &InputDistributedMiniBatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FullyConnected_descriptor_, &FullyConnected::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pooling_descriptor_, &Pooling::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Convolution_descriptor_, &Convolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Softmax_descriptor_, &Softmax::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Target_descriptor_, &Target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetParallel_descriptor_, &TargetParallel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetDistributedMinibatch_descriptor_, &TargetDistributedMinibatch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lbann_2eproto() {
  delete LbannPB::default_instance_;
  delete LbannPB_reflection_;
  delete DataReader::default_instance_;
  delete DataReader_reflection_;
  delete DataReaderMnist::default_instance_;
  delete DataReaderMnist_reflection_;
  delete DataReaderCifar10::default_instance_;
  delete DataReaderCifar10_reflection_;
  delete DataReaderImagenet::default_instance_;
  delete DataReaderImagenet_reflection_;
  delete DataReaderNci::default_instance_;
  delete DataReaderNci_reflection_;
  delete DataReaderNciRegression::default_instance_;
  delete DataReaderNciRegression_reflection_;
  delete Model::default_instance_;
  delete Model_reflection_;
  delete Layer::default_instance_;
  delete Layer_reflection_;
  delete Input::default_instance_;
  delete Input_reflection_;
  delete InputDistributedMiniBatchParallelIO::default_instance_;
  delete InputDistributedMiniBatchParallelIO_reflection_;
  delete InputDistributedMiniBatch::default_instance_;
  delete InputDistributedMiniBatch_reflection_;
  delete FullyConnected::default_instance_;
  delete FullyConnected_reflection_;
  delete Pooling::default_instance_;
  delete Pooling_reflection_;
  delete Convolution::default_instance_;
  delete Convolution_reflection_;
  delete Softmax::default_instance_;
  delete Softmax_reflection_;
  delete Target::default_instance_;
  delete Target_reflection_;
  delete TargetParallel::default_instance_;
  delete TargetParallel_reflection_;
  delete TargetDistributedMinibatch::default_instance_;
  delete TargetDistributedMinibatch_reflection_;
}

void protobuf_AddDesc_lbann_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lbann_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013lbann.proto\022\nlbann_data\"\232\001\n\007LbannPB\022+\n"
    "\013data_reader\030\001 \001(\0132\026.lbann_data.DataRead"
    "er\022 \n\005model\030\002 \001(\0132\021.lbann_data.Model\022\021\n\t"
    "optimizer\030\n \001(\t\022\024\n\014objective_fn\030\013 \001(\t\022\027\n"
    "\017mini_batch_size\030\014 \001(\r\"\377\001\n\nDataReader\022*\n"
    "\005mnist\030\001 \003(\0132\033.lbann_data.DataReaderMnis"
    "t\022.\n\007cifar10\030\002 \003(\0132\035.lbann_data.DataRead"
    "erCifar10\0220\n\010imagenet\030\003 \003(\0132\036.lbann_data"
    ".DataReaderImagenet\022&\n\003nci\030\004 \003(\0132\031.lbann"
    "_data.DataReaderNci\022;\n\016nci_regression\030\005 "
    "\003(\0132#.lbann_data.DataReaderNciRegression"
    "\"~\n\017DataReaderMnist\022\014\n\004role\030\001 \001(\t\022\022\n\nbat"
    "ch_size\030\002 \001(\r\022\017\n\007shuffle\030\003 \001(\010\022\020\n\010file_d"
    "ir\030\004 \001(\t\022\022\n\nimage_file\030\005 \001(\t\022\022\n\nlabel_fi"
    "le\030\006 \001(\t\"\023\n\021DataReaderCifar10\"\024\n\022DataRea"
    "derImagenet\"\017\n\rDataReaderNci\"\031\n\027DataRead"
    "erNciRegression\"\252\001\n\005Model\022\014\n\004name\030\001 \001(\t\022"
    "\032\n\022objective_function\030\002 \001(\t\022\034\n\024evaluatio"
    "n_frequency\030\003 \001(\005\022\022\n\nnum_epochs\030\004 \001(\005\022\021\n"
    "\toptimizer\030\005 \001(\t\022 \n\005layer\030\n \003(\0132\021.lbann_"
    "data.Layer\022\020\n\010callback\030\024 \003(\t\"\274\004\n\005Layer\022\r"
    "\n\005index\030\002 \001(\r\022`\n\'input_distributed_minib"
    "atch_parallel_io\030\010 \001(\0132/.lbann_data.Inpu"
    "tDistributedMiniBatchParallelIO\022J\n\033input"
    "_distributed_minibatch\030\t \001(\0132%.lbann_dat"
    "a.InputDistributedMiniBatch\022 \n\005input\030\n \001"
    "(\0132\021.lbann_data.Input\0223\n\017fully_connected"
    "\030\013 \001(\0132\032.lbann_data.FullyConnected\022$\n\007po"
    "oling\030\014 \001(\0132\023.lbann_data.Pooling\022,\n\013conv"
    "olution\030\r \001(\0132\027.lbann_data.Convolution\022$"
    "\n\007softmax\030\016 \001(\0132\023.lbann_data.Softmax\022\"\n\006"
    "target\030\017 \001(\0132\022.lbann_data.Target\0223\n\017targ"
    "et_parallel\030\020 \001(\0132\032.lbann_data.TargetPar"
    "allel\022L\n\034target_distributed_minibatch\030\021 "
    "\001(\0132&.lbann_data.TargetDistributedMiniba"
    "tch\" \n\005Input\022\027\n\017mini_batch_size\030\001 \001(\005\"\\\n"
    "#InputDistributedMiniBatchParallelIO\022\034\n\024"
    "num_parallel_readers\030\001 \001(\r\022\027\n\017mini_batch"
    "_size\030\002 \001(\r\"\033\n\031InputDistributedMiniBatch"
    "\"\243\001\n\016FullyConnected\022\030\n\020num_prev_neurons\030"
    "\001 \001(\r\022\023\n\013num_neurons\030\002 \001(\r\022\027\n\017mini_batch"
    "_size\030\003 \001(\r\022\027\n\017activation_type\030\004 \001(\t\022\035\n\025"
    "weight_initialization\030\005 \001(\t\022\021\n\toptimizer"
    "\030\n \001(\t\"\255\001\n\007Pooling\022\020\n\010num_dims\030\001 \001(\005\022\024\n\014"
    "num_channels\030\002 \001(\005\022\022\n\ninput_dims\030\003 \003(\005\022\021"
    "\n\tpool_dims\030\004 \003(\005\022\021\n\tpool_pads\030\005 \003(\005\022\024\n\014"
    "pool_strides\030\006 \003(\005\022\021\n\tpool_mode\030\007 \001(\t\022\027\n"
    "\017activation_type\030\010 \001(\t\"\373\001\n\013Convolution\022\020"
    "\n\010num_dims\030\001 \001(\r\022\032\n\022num_input_channels\030\002"
    " \001(\r\022\022\n\ninput_dims\030\003 \003(\r\022\033\n\023num_output_c"
    "hannels\030\004 \001(\r\022\023\n\013filter_dims\030\005 \003(\r\022\021\n\tco"
    "nv_pads\030\006 \003(\r\022\024\n\014conv_strides\030\007 \003(\r\022\027\n\017m"
    "ini_batch_size\030\010 \001(\r\022\035\n\025weight_initializ"
    "ation\030\t \001(\t\022\027\n\017activation_type\030\n \001(\t\"W\n\007"
    "Softmax\022\030\n\020num_prev_neurons\030\001 \001(\r\022\023\n\013num"
    "_neurons\030\002 \001(\r\022\035\n\025weight_initialization\030"
    "\003 \001(\t\"\010\n\006Target\"\020\n\016TargetParallel\"\034\n\032Tar"
    "getDistributedMinibatchb\006proto3", 2311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lbann.proto", &protobuf_RegisterTypes);
  LbannPB::default_instance_ = new LbannPB();
  DataReader::default_instance_ = new DataReader();
  DataReaderMnist::default_instance_ = new DataReaderMnist();
  DataReaderCifar10::default_instance_ = new DataReaderCifar10();
  DataReaderImagenet::default_instance_ = new DataReaderImagenet();
  DataReaderNci::default_instance_ = new DataReaderNci();
  DataReaderNciRegression::default_instance_ = new DataReaderNciRegression();
  Model::default_instance_ = new Model();
  Layer::default_instance_ = new Layer();
  Input::default_instance_ = new Input();
  InputDistributedMiniBatchParallelIO::default_instance_ = new InputDistributedMiniBatchParallelIO();
  InputDistributedMiniBatch::default_instance_ = new InputDistributedMiniBatch();
  FullyConnected::default_instance_ = new FullyConnected();
  Pooling::default_instance_ = new Pooling();
  Convolution::default_instance_ = new Convolution();
  Softmax::default_instance_ = new Softmax();
  Target::default_instance_ = new Target();
  TargetParallel::default_instance_ = new TargetParallel();
  TargetDistributedMinibatch::default_instance_ = new TargetDistributedMinibatch();
  LbannPB::default_instance_->InitAsDefaultInstance();
  DataReader::default_instance_->InitAsDefaultInstance();
  DataReaderMnist::default_instance_->InitAsDefaultInstance();
  DataReaderCifar10::default_instance_->InitAsDefaultInstance();
  DataReaderImagenet::default_instance_->InitAsDefaultInstance();
  DataReaderNci::default_instance_->InitAsDefaultInstance();
  DataReaderNciRegression::default_instance_->InitAsDefaultInstance();
  Model::default_instance_->InitAsDefaultInstance();
  Layer::default_instance_->InitAsDefaultInstance();
  Input::default_instance_->InitAsDefaultInstance();
  InputDistributedMiniBatchParallelIO::default_instance_->InitAsDefaultInstance();
  InputDistributedMiniBatch::default_instance_->InitAsDefaultInstance();
  FullyConnected::default_instance_->InitAsDefaultInstance();
  Pooling::default_instance_->InitAsDefaultInstance();
  Convolution::default_instance_->InitAsDefaultInstance();
  Softmax::default_instance_->InitAsDefaultInstance();
  Target::default_instance_->InitAsDefaultInstance();
  TargetParallel::default_instance_->InitAsDefaultInstance();
  TargetDistributedMinibatch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lbann_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lbann_2eproto {
  StaticDescriptorInitializer_lbann_2eproto() {
    protobuf_AddDesc_lbann_2eproto();
  }
} static_descriptor_initializer_lbann_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LbannPB::kDataReaderFieldNumber;
const int LbannPB::kModelFieldNumber;
const int LbannPB::kOptimizerFieldNumber;
const int LbannPB::kObjectiveFnFieldNumber;
const int LbannPB::kMiniBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LbannPB::LbannPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.LbannPB)
}

void LbannPB::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  data_reader_ = const_cast< ::lbann_data::DataReader*>(&::lbann_data::DataReader::default_instance());
  model_ = const_cast< ::lbann_data::Model*>(&::lbann_data::Model::default_instance());
}

LbannPB::LbannPB(const LbannPB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.LbannPB)
}

void LbannPB::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_reader_ = NULL;
  model_ = NULL;
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_fn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mini_batch_size_ = 0u;
}

LbannPB::~LbannPB() {
  // @@protoc_insertion_point(destructor:lbann_data.LbannPB)
  SharedDtor();
}

void LbannPB::SharedDtor() {
  optimizer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_fn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete data_reader_;
    delete model_;
  }
}

void LbannPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LbannPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LbannPB_descriptor_;
}

const LbannPB& LbannPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

LbannPB* LbannPB::default_instance_ = NULL;

LbannPB* LbannPB::New(::google::protobuf::Arena* arena) const {
  LbannPB* n = new LbannPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LbannPB::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.LbannPB)
  if (GetArenaNoVirtual() == NULL && data_reader_ != NULL) delete data_reader_;
  data_reader_ = NULL;
  if (GetArenaNoVirtual() == NULL && model_ != NULL) delete model_;
  model_ = NULL;
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mini_batch_size_ = 0u;
}

bool LbannPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.LbannPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lbann_data.DataReader data_reader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_reader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional .lbann_data.Model model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_optimizer;
        break;
      }

      // optional string optimizer = 10;
      case 10: {
        if (tag == 82) {
         parse_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optimizer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizer().data(), this->optimizer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.LbannPB.optimizer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_objective_fn;
        break;
      }

      // optional string objective_fn = 11;
      case 11: {
        if (tag == 90) {
         parse_objective_fn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objective_fn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objective_fn().data(), this->objective_fn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.LbannPB.objective_fn"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mini_batch_size;
        break;
      }

      // optional uint32 mini_batch_size = 12;
      case 12: {
        if (tag == 96) {
         parse_mini_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mini_batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.LbannPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.LbannPB)
  return false;
#undef DO_
}

void LbannPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.LbannPB)
  // optional .lbann_data.DataReader data_reader = 1;
  if (this->has_data_reader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_reader_, output);
  }

  // optional .lbann_data.Model model = 2;
  if (this->has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->model_, output);
  }

  // optional string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.optimizer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->optimizer(), output);
  }

  // optional string objective_fn = 11;
  if (this->objective_fn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_fn().data(), this->objective_fn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.objective_fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->objective_fn(), output);
  }

  // optional uint32 mini_batch_size = 12;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mini_batch_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.LbannPB)
}

::google::protobuf::uint8* LbannPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.LbannPB)
  // optional .lbann_data.DataReader data_reader = 1;
  if (this->has_data_reader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_reader_, false, target);
  }

  // optional .lbann_data.Model model = 2;
  if (this->has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->model_, false, target);
  }

  // optional string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.optimizer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->optimizer(), target);
  }

  // optional string objective_fn = 11;
  if (this->objective_fn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_fn().data(), this->objective_fn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.objective_fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->objective_fn(), target);
  }

  // optional uint32 mini_batch_size = 12;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mini_batch_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.LbannPB)
  return target;
}

int LbannPB::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.LbannPB)
  int total_size = 0;

  // optional .lbann_data.DataReader data_reader = 1;
  if (this->has_data_reader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_reader_);
  }

  // optional .lbann_data.Model model = 2;
  if (this->has_model()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_);
  }

  // optional string optimizer = 10;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optimizer());
  }

  // optional string objective_fn = 11;
  if (this->objective_fn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objective_fn());
  }

  // optional uint32 mini_batch_size = 12;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mini_batch_size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LbannPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.LbannPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LbannPB* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LbannPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.LbannPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.LbannPB)
    MergeFrom(*source);
  }
}

void LbannPB::MergeFrom(const LbannPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.LbannPB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_data_reader()) {
    mutable_data_reader()->::lbann_data::DataReader::MergeFrom(from.data_reader());
  }
  if (from.has_model()) {
    mutable_model()->::lbann_data::Model::MergeFrom(from.model());
  }
  if (from.optimizer().size() > 0) {

    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
  if (from.objective_fn().size() > 0) {

    objective_fn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objective_fn_);
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void LbannPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.LbannPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LbannPB::CopyFrom(const LbannPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.LbannPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LbannPB::IsInitialized() const {

  return true;
}

void LbannPB::Swap(LbannPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LbannPB::InternalSwap(LbannPB* other) {
  std::swap(data_reader_, other->data_reader_);
  std::swap(model_, other->model_);
  optimizer_.Swap(&other->optimizer_);
  objective_fn_.Swap(&other->objective_fn_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LbannPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LbannPB_descriptor_;
  metadata.reflection = LbannPB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LbannPB

// optional .lbann_data.DataReader data_reader = 1;
bool LbannPB::has_data_reader() const {
  return !_is_default_instance_ && data_reader_ != NULL;
}
void LbannPB::clear_data_reader() {
  if (GetArenaNoVirtual() == NULL && data_reader_ != NULL) delete data_reader_;
  data_reader_ = NULL;
}
const ::lbann_data::DataReader& LbannPB::data_reader() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.data_reader)
  return data_reader_ != NULL ? *data_reader_ : *default_instance_->data_reader_;
}
::lbann_data::DataReader* LbannPB::mutable_data_reader() {
  
  if (data_reader_ == NULL) {
    data_reader_ = new ::lbann_data::DataReader;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.data_reader)
  return data_reader_;
}
::lbann_data::DataReader* LbannPB::release_data_reader() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.data_reader)
  
  ::lbann_data::DataReader* temp = data_reader_;
  data_reader_ = NULL;
  return temp;
}
void LbannPB::set_allocated_data_reader(::lbann_data::DataReader* data_reader) {
  delete data_reader_;
  data_reader_ = data_reader;
  if (data_reader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.data_reader)
}

// optional .lbann_data.Model model = 2;
bool LbannPB::has_model() const {
  return !_is_default_instance_ && model_ != NULL;
}
void LbannPB::clear_model() {
  if (GetArenaNoVirtual() == NULL && model_ != NULL) delete model_;
  model_ = NULL;
}
const ::lbann_data::Model& LbannPB::model() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.model)
  return model_ != NULL ? *model_ : *default_instance_->model_;
}
::lbann_data::Model* LbannPB::mutable_model() {
  
  if (model_ == NULL) {
    model_ = new ::lbann_data::Model;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.model)
  return model_;
}
::lbann_data::Model* LbannPB::release_model() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.model)
  
  ::lbann_data::Model* temp = model_;
  model_ = NULL;
  return temp;
}
void LbannPB::set_allocated_model(::lbann_data::Model* model) {
  delete model_;
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.model)
}

// optional string optimizer = 10;
void LbannPB::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LbannPB::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.optimizer)
  return optimizer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LbannPB::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.optimizer)
}
 void LbannPB::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.optimizer)
}
 void LbannPB::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.optimizer)
}
 ::std::string* LbannPB::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LbannPB::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LbannPB::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.optimizer)
}

// optional string objective_fn = 11;
void LbannPB::clear_objective_fn() {
  objective_fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LbannPB::objective_fn() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.objective_fn)
  return objective_fn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LbannPB::set_objective_fn(const ::std::string& value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.objective_fn)
}
 void LbannPB::set_objective_fn(const char* value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.objective_fn)
}
 void LbannPB::set_objective_fn(const char* value, size_t size) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.objective_fn)
}
 ::std::string* LbannPB::mutable_objective_fn() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.objective_fn)
  return objective_fn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LbannPB::release_objective_fn() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.objective_fn)
  
  return objective_fn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LbannPB::set_allocated_objective_fn(::std::string* objective_fn) {
  if (objective_fn != NULL) {
    
  } else {
    
  }
  objective_fn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objective_fn);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.objective_fn)
}

// optional uint32 mini_batch_size = 12;
void LbannPB::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
}
 ::google::protobuf::uint32 LbannPB::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.mini_batch_size)
  return mini_batch_size_;
}
 void LbannPB::set_mini_batch_size(::google::protobuf::uint32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.mini_batch_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataReader::kMnistFieldNumber;
const int DataReader::kCifar10FieldNumber;
const int DataReader::kImagenetFieldNumber;
const int DataReader::kNciFieldNumber;
const int DataReader::kNciRegressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReader::DataReader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReader)
}

void DataReader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataReader::DataReader(const DataReader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReader)
}

void DataReader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DataReader::~DataReader() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReader)
  SharedDtor();
}

void DataReader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataReader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReader_descriptor_;
}

const DataReader& DataReader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

DataReader* DataReader::default_instance_ = NULL;

DataReader* DataReader::New(::google::protobuf::Arena* arena) const {
  DataReader* n = new DataReader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReader::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReader)
  mnist_.Clear();
  cifar10_.Clear();
  imagenet_.Clear();
  nci_.Clear();
  nci_regression_.Clear();
}

bool DataReader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbann_data.DataReaderMnist mnist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mnist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mnist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mnist;
        if (input->ExpectTag(18)) goto parse_loop_cifar10;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cifar10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cifar10()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_cifar10;
        if (input->ExpectTag(26)) goto parse_loop_imagenet;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderImagenet imagenet = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_imagenet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_imagenet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_imagenet;
        if (input->ExpectTag(34)) goto parse_loop_nci;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderNci nci = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nci:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nci()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_nci;
        if (input->ExpectTag(42)) goto parse_loop_nci_regression;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nci_regression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nci_regression()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_nci_regression;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReader)
  return false;
#undef DO_
}

void DataReader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReader)
  // repeated .lbann_data.DataReaderMnist mnist = 1;
  for (unsigned int i = 0, n = this->mnist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mnist(i), output);
  }

  // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
  for (unsigned int i = 0, n = this->cifar10_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cifar10(i), output);
  }

  // repeated .lbann_data.DataReaderImagenet imagenet = 3;
  for (unsigned int i = 0, n = this->imagenet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imagenet(i), output);
  }

  // repeated .lbann_data.DataReaderNci nci = 4;
  for (unsigned int i = 0, n = this->nci_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nci(i), output);
  }

  // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
  for (unsigned int i = 0, n = this->nci_regression_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nci_regression(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.DataReader)
}

::google::protobuf::uint8* DataReader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReader)
  // repeated .lbann_data.DataReaderMnist mnist = 1;
  for (unsigned int i = 0, n = this->mnist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mnist(i), false, target);
  }

  // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
  for (unsigned int i = 0, n = this->cifar10_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cifar10(i), false, target);
  }

  // repeated .lbann_data.DataReaderImagenet imagenet = 3;
  for (unsigned int i = 0, n = this->imagenet_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->imagenet(i), false, target);
  }

  // repeated .lbann_data.DataReaderNci nci = 4;
  for (unsigned int i = 0, n = this->nci_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->nci(i), false, target);
  }

  // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
  for (unsigned int i = 0, n = this->nci_regression_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->nci_regression(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReader)
  return target;
}

int DataReader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReader)
  int total_size = 0;

  // repeated .lbann_data.DataReaderMnist mnist = 1;
  total_size += 1 * this->mnist_size();
  for (int i = 0; i < this->mnist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mnist(i));
  }

  // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
  total_size += 1 * this->cifar10_size();
  for (int i = 0; i < this->cifar10_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cifar10(i));
  }

  // repeated .lbann_data.DataReaderImagenet imagenet = 3;
  total_size += 1 * this->imagenet_size();
  for (int i = 0; i < this->imagenet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imagenet(i));
  }

  // repeated .lbann_data.DataReaderNci nci = 4;
  total_size += 1 * this->nci_size();
  for (int i = 0; i < this->nci_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nci(i));
  }

  // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
  total_size += 1 * this->nci_regression_size();
  for (int i = 0; i < this->nci_regression_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nci_regression(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReader)
    MergeFrom(*source);
  }
}

void DataReader::MergeFrom(const DataReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mnist_.MergeFrom(from.mnist_);
  cifar10_.MergeFrom(from.cifar10_);
  imagenet_.MergeFrom(from.imagenet_);
  nci_.MergeFrom(from.nci_);
  nci_regression_.MergeFrom(from.nci_regression_);
}

void DataReader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReader::CopyFrom(const DataReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReader::IsInitialized() const {

  return true;
}

void DataReader::Swap(DataReader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReader::InternalSwap(DataReader* other) {
  mnist_.UnsafeArenaSwap(&other->mnist_);
  cifar10_.UnsafeArenaSwap(&other->cifar10_);
  imagenet_.UnsafeArenaSwap(&other->imagenet_);
  nci_.UnsafeArenaSwap(&other->nci_);
  nci_regression_.UnsafeArenaSwap(&other->nci_regression_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReader_descriptor_;
  metadata.reflection = DataReader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReader

// repeated .lbann_data.DataReaderMnist mnist = 1;
int DataReader::mnist_size() const {
  return mnist_.size();
}
void DataReader::clear_mnist() {
  mnist_.Clear();
}
const ::lbann_data::DataReaderMnist& DataReader::mnist(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.mnist)
  return mnist_.Get(index);
}
::lbann_data::DataReaderMnist* DataReader::mutable_mnist(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.mnist)
  return mnist_.Mutable(index);
}
::lbann_data::DataReaderMnist* DataReader::add_mnist() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.mnist)
  return mnist_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderMnist >*
DataReader::mutable_mnist() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.mnist)
  return &mnist_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderMnist >&
DataReader::mnist() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.mnist)
  return mnist_;
}

// repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
int DataReader::cifar10_size() const {
  return cifar10_.size();
}
void DataReader::clear_cifar10() {
  cifar10_.Clear();
}
const ::lbann_data::DataReaderCifar10& DataReader::cifar10(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.cifar10)
  return cifar10_.Get(index);
}
::lbann_data::DataReaderCifar10* DataReader::mutable_cifar10(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.cifar10)
  return cifar10_.Mutable(index);
}
::lbann_data::DataReaderCifar10* DataReader::add_cifar10() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.cifar10)
  return cifar10_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderCifar10 >*
DataReader::mutable_cifar10() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.cifar10)
  return &cifar10_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderCifar10 >&
DataReader::cifar10() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.cifar10)
  return cifar10_;
}

// repeated .lbann_data.DataReaderImagenet imagenet = 3;
int DataReader::imagenet_size() const {
  return imagenet_.size();
}
void DataReader::clear_imagenet() {
  imagenet_.Clear();
}
const ::lbann_data::DataReaderImagenet& DataReader::imagenet(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.imagenet)
  return imagenet_.Get(index);
}
::lbann_data::DataReaderImagenet* DataReader::mutable_imagenet(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.imagenet)
  return imagenet_.Mutable(index);
}
::lbann_data::DataReaderImagenet* DataReader::add_imagenet() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.imagenet)
  return imagenet_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderImagenet >*
DataReader::mutable_imagenet() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.imagenet)
  return &imagenet_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderImagenet >&
DataReader::imagenet() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.imagenet)
  return imagenet_;
}

// repeated .lbann_data.DataReaderNci nci = 4;
int DataReader::nci_size() const {
  return nci_.size();
}
void DataReader::clear_nci() {
  nci_.Clear();
}
const ::lbann_data::DataReaderNci& DataReader::nci(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.nci)
  return nci_.Get(index);
}
::lbann_data::DataReaderNci* DataReader::mutable_nci(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.nci)
  return nci_.Mutable(index);
}
::lbann_data::DataReaderNci* DataReader::add_nci() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.nci)
  return nci_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNci >*
DataReader::mutable_nci() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.nci)
  return &nci_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNci >&
DataReader::nci() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.nci)
  return nci_;
}

// repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
int DataReader::nci_regression_size() const {
  return nci_regression_.size();
}
void DataReader::clear_nci_regression() {
  nci_regression_.Clear();
}
const ::lbann_data::DataReaderNciRegression& DataReader::nci_regression(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.nci_regression)
  return nci_regression_.Get(index);
}
::lbann_data::DataReaderNciRegression* DataReader::mutable_nci_regression(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.nci_regression)
  return nci_regression_.Mutable(index);
}
::lbann_data::DataReaderNciRegression* DataReader::add_nci_regression() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.nci_regression)
  return nci_regression_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNciRegression >*
DataReader::mutable_nci_regression() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.nci_regression)
  return &nci_regression_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNciRegression >&
DataReader::nci_regression() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.nci_regression)
  return nci_regression_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataReaderMnist::kRoleFieldNumber;
const int DataReaderMnist::kBatchSizeFieldNumber;
const int DataReaderMnist::kShuffleFieldNumber;
const int DataReaderMnist::kFileDirFieldNumber;
const int DataReaderMnist::kImageFileFieldNumber;
const int DataReaderMnist::kLabelFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderMnist::DataReaderMnist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderMnist)
}

void DataReaderMnist::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataReaderMnist::DataReaderMnist(const DataReaderMnist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderMnist)
}

void DataReaderMnist::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0u;
  shuffle_ = false;
  file_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataReaderMnist::~DataReaderMnist() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderMnist)
  SharedDtor();
}

void DataReaderMnist::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DataReaderMnist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderMnist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReaderMnist_descriptor_;
}

const DataReaderMnist& DataReaderMnist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

DataReaderMnist* DataReaderMnist::default_instance_ = NULL;

DataReaderMnist* DataReaderMnist::New(::google::protobuf::Arena* arena) const {
  DataReaderMnist* n = new DataReaderMnist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderMnist::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderMnist)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataReaderMnist, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataReaderMnist*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(batch_size_, shuffle_);
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DataReaderMnist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderMnist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string role = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.role"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 3;
      case 3: {
        if (tag == 24) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_file_dir;
        break;
      }

      // optional string file_dir = 4;
      case 4: {
        if (tag == 34) {
         parse_file_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_dir().data(), this->file_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.file_dir"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_file;
        break;
      }

      // optional string image_file = 5;
      case 5: {
        if (tag == 42) {
         parse_image_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_file().data(), this->image_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.image_file"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_label_file;
        break;
      }

      // optional string label_file = 6;
      case 6: {
        if (tag == 50) {
         parse_label_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label_file().data(), this->label_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.label_file"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderMnist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderMnist)
  return false;
#undef DO_
}

void DataReaderMnist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderMnist)
  // optional string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->role(), output);
  }

  // optional uint32 batch_size = 2;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->batch_size(), output);
  }

  // optional bool shuffle = 3;
  if (this->shuffle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  // optional string file_dir = 4;
  if (this->file_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_dir().data(), this->file_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.file_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_dir(), output);
  }

  // optional string image_file = 5;
  if (this->image_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_file().data(), this->image_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.image_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_file(), output);
  }

  // optional string label_file = 6;
  if (this->label_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_file().data(), this->label_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.label_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->label_file(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderMnist)
}

::google::protobuf::uint8* DataReaderMnist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderMnist)
  // optional string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role(), target);
  }

  // optional uint32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->batch_size(), target);
  }

  // optional bool shuffle = 3;
  if (this->shuffle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  // optional string file_dir = 4;
  if (this->file_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_dir().data(), this->file_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.file_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_dir(), target);
  }

  // optional string image_file = 5;
  if (this->image_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_file().data(), this->image_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.image_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_file(), target);
  }

  // optional string label_file = 6;
  if (this->label_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_file().data(), this->label_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.label_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->label_file(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderMnist)
  return target;
}

int DataReaderMnist::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderMnist)
  int total_size = 0;

  // optional string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  // optional uint32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->batch_size());
  }

  // optional bool shuffle = 3;
  if (this->shuffle() != 0) {
    total_size += 1 + 1;
  }

  // optional string file_dir = 4;
  if (this->file_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_dir());
  }

  // optional string image_file = 5;
  if (this->image_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_file());
  }

  // optional string label_file = 6;
  if (this->label_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_file());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderMnist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderMnist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReaderMnist* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderMnist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderMnist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderMnist)
    MergeFrom(*source);
  }
}

void DataReaderMnist::MergeFrom(const DataReaderMnist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderMnist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.shuffle() != 0) {
    set_shuffle(from.shuffle());
  }
  if (from.file_dir().size() > 0) {

    file_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_dir_);
  }
  if (from.image_file().size() > 0) {

    image_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_file_);
  }
  if (from.label_file().size() > 0) {

    label_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_file_);
  }
}

void DataReaderMnist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderMnist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderMnist::CopyFrom(const DataReaderMnist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderMnist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderMnist::IsInitialized() const {

  return true;
}

void DataReaderMnist::Swap(DataReaderMnist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderMnist::InternalSwap(DataReaderMnist* other) {
  role_.Swap(&other->role_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(shuffle_, other->shuffle_);
  file_dir_.Swap(&other->file_dir_);
  image_file_.Swap(&other->image_file_);
  label_file_.Swap(&other->label_file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderMnist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReaderMnist_descriptor_;
  metadata.reflection = DataReaderMnist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderMnist

// optional string role = 1;
void DataReaderMnist::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataReaderMnist::role() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.role)
  return role_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.role)
}
 void DataReaderMnist::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.role)
}
 void DataReaderMnist::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.role)
}
 ::std::string* DataReaderMnist::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataReaderMnist::release_role() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.role)
}

// optional uint32 batch_size = 2;
void DataReaderMnist::clear_batch_size() {
  batch_size_ = 0u;
}
 ::google::protobuf::uint32 DataReaderMnist::batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.batch_size)
  return batch_size_;
}
 void DataReaderMnist::set_batch_size(::google::protobuf::uint32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.batch_size)
}

// optional bool shuffle = 3;
void DataReaderMnist::clear_shuffle() {
  shuffle_ = false;
}
 bool DataReaderMnist::shuffle() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.shuffle)
  return shuffle_;
}
 void DataReaderMnist::set_shuffle(bool value) {
  
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.shuffle)
}

// optional string file_dir = 4;
void DataReaderMnist::clear_file_dir() {
  file_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataReaderMnist::file_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.file_dir)
  return file_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_file_dir(const ::std::string& value) {
  
  file_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.file_dir)
}
 void DataReaderMnist::set_file_dir(const char* value) {
  
  file_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.file_dir)
}
 void DataReaderMnist::set_file_dir(const char* value, size_t size) {
  
  file_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.file_dir)
}
 ::std::string* DataReaderMnist::mutable_file_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.file_dir)
  return file_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataReaderMnist::release_file_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.file_dir)
  
  return file_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_allocated_file_dir(::std::string* file_dir) {
  if (file_dir != NULL) {
    
  } else {
    
  }
  file_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.file_dir)
}

// optional string image_file = 5;
void DataReaderMnist::clear_image_file() {
  image_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataReaderMnist::image_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.image_file)
  return image_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_image_file(const ::std::string& value) {
  
  image_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.image_file)
}
 void DataReaderMnist::set_image_file(const char* value) {
  
  image_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.image_file)
}
 void DataReaderMnist::set_image_file(const char* value, size_t size) {
  
  image_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.image_file)
}
 ::std::string* DataReaderMnist::mutable_image_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.image_file)
  return image_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataReaderMnist::release_image_file() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.image_file)
  
  return image_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_allocated_image_file(::std::string* image_file) {
  if (image_file != NULL) {
    
  } else {
    
  }
  image_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.image_file)
}

// optional string label_file = 6;
void DataReaderMnist::clear_label_file() {
  label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DataReaderMnist::label_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.label_file)
  return label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_label_file(const ::std::string& value) {
  
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.label_file)
}
 void DataReaderMnist::set_label_file(const char* value) {
  
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.label_file)
}
 void DataReaderMnist::set_label_file(const char* value, size_t size) {
  
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.label_file)
}
 ::std::string* DataReaderMnist::mutable_label_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.label_file)
  return label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataReaderMnist::release_label_file() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.label_file)
  
  return label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReaderMnist::set_allocated_label_file(::std::string* label_file) {
  if (label_file != NULL) {
    
  } else {
    
  }
  label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.label_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderCifar10::DataReaderCifar10()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderCifar10)
}

void DataReaderCifar10::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataReaderCifar10::DataReaderCifar10(const DataReaderCifar10& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderCifar10)
}

void DataReaderCifar10::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DataReaderCifar10::~DataReaderCifar10() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderCifar10)
  SharedDtor();
}

void DataReaderCifar10::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataReaderCifar10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderCifar10::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReaderCifar10_descriptor_;
}

const DataReaderCifar10& DataReaderCifar10::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

DataReaderCifar10* DataReaderCifar10::default_instance_ = NULL;

DataReaderCifar10* DataReaderCifar10::New(::google::protobuf::Arena* arena) const {
  DataReaderCifar10* n = new DataReaderCifar10;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderCifar10::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderCifar10)
}

bool DataReaderCifar10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderCifar10)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderCifar10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderCifar10)
  return false;
#undef DO_
}

void DataReaderCifar10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderCifar10)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderCifar10)
}

::google::protobuf::uint8* DataReaderCifar10::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderCifar10)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderCifar10)
  return target;
}

int DataReaderCifar10::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderCifar10)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderCifar10::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderCifar10)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReaderCifar10* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderCifar10>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderCifar10)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderCifar10)
    MergeFrom(*source);
  }
}

void DataReaderCifar10::MergeFrom(const DataReaderCifar10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderCifar10)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DataReaderCifar10::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderCifar10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderCifar10::CopyFrom(const DataReaderCifar10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderCifar10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderCifar10::IsInitialized() const {

  return true;
}

void DataReaderCifar10::Swap(DataReaderCifar10* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderCifar10::InternalSwap(DataReaderCifar10* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderCifar10::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReaderCifar10_descriptor_;
  metadata.reflection = DataReaderCifar10_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderCifar10

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderImagenet::DataReaderImagenet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderImagenet)
}

void DataReaderImagenet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataReaderImagenet::DataReaderImagenet(const DataReaderImagenet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderImagenet)
}

void DataReaderImagenet::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DataReaderImagenet::~DataReaderImagenet() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderImagenet)
  SharedDtor();
}

void DataReaderImagenet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataReaderImagenet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderImagenet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReaderImagenet_descriptor_;
}

const DataReaderImagenet& DataReaderImagenet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

DataReaderImagenet* DataReaderImagenet::default_instance_ = NULL;

DataReaderImagenet* DataReaderImagenet::New(::google::protobuf::Arena* arena) const {
  DataReaderImagenet* n = new DataReaderImagenet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderImagenet::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderImagenet)
}

bool DataReaderImagenet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderImagenet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderImagenet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderImagenet)
  return false;
#undef DO_
}

void DataReaderImagenet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderImagenet)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderImagenet)
}

::google::protobuf::uint8* DataReaderImagenet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderImagenet)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderImagenet)
  return target;
}

int DataReaderImagenet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderImagenet)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderImagenet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderImagenet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReaderImagenet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderImagenet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderImagenet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderImagenet)
    MergeFrom(*source);
  }
}

void DataReaderImagenet::MergeFrom(const DataReaderImagenet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderImagenet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DataReaderImagenet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderImagenet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderImagenet::CopyFrom(const DataReaderImagenet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderImagenet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderImagenet::IsInitialized() const {

  return true;
}

void DataReaderImagenet::Swap(DataReaderImagenet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderImagenet::InternalSwap(DataReaderImagenet* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderImagenet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReaderImagenet_descriptor_;
  metadata.reflection = DataReaderImagenet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderImagenet

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderNci::DataReaderNci()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderNci)
}

void DataReaderNci::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataReaderNci::DataReaderNci(const DataReaderNci& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderNci)
}

void DataReaderNci::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DataReaderNci::~DataReaderNci() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderNci)
  SharedDtor();
}

void DataReaderNci::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataReaderNci::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderNci::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReaderNci_descriptor_;
}

const DataReaderNci& DataReaderNci::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

DataReaderNci* DataReaderNci::default_instance_ = NULL;

DataReaderNci* DataReaderNci::New(::google::protobuf::Arena* arena) const {
  DataReaderNci* n = new DataReaderNci;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderNci::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderNci)
}

bool DataReaderNci::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderNci)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderNci)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderNci)
  return false;
#undef DO_
}

void DataReaderNci::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderNci)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderNci)
}

::google::protobuf::uint8* DataReaderNci::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderNci)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderNci)
  return target;
}

int DataReaderNci::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderNci)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderNci::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderNci)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReaderNci* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderNci>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderNci)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderNci)
    MergeFrom(*source);
  }
}

void DataReaderNci::MergeFrom(const DataReaderNci& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderNci)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DataReaderNci::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderNci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderNci::CopyFrom(const DataReaderNci& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderNci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderNci::IsInitialized() const {

  return true;
}

void DataReaderNci::Swap(DataReaderNci* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderNci::InternalSwap(DataReaderNci* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderNci::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReaderNci_descriptor_;
  metadata.reflection = DataReaderNci_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderNci

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderNciRegression::DataReaderNciRegression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderNciRegression)
}

void DataReaderNciRegression::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DataReaderNciRegression::DataReaderNciRegression(const DataReaderNciRegression& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderNciRegression)
}

void DataReaderNciRegression::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DataReaderNciRegression::~DataReaderNciRegression() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderNciRegression)
  SharedDtor();
}

void DataReaderNciRegression::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataReaderNciRegression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderNciRegression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReaderNciRegression_descriptor_;
}

const DataReaderNciRegression& DataReaderNciRegression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

DataReaderNciRegression* DataReaderNciRegression::default_instance_ = NULL;

DataReaderNciRegression* DataReaderNciRegression::New(::google::protobuf::Arena* arena) const {
  DataReaderNciRegression* n = new DataReaderNciRegression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderNciRegression::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderNciRegression)
}

bool DataReaderNciRegression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderNciRegression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderNciRegression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderNciRegression)
  return false;
#undef DO_
}

void DataReaderNciRegression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderNciRegression)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderNciRegression)
}

::google::protobuf::uint8* DataReaderNciRegression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderNciRegression)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderNciRegression)
  return target;
}

int DataReaderNciRegression::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderNciRegression)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderNciRegression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderNciRegression)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReaderNciRegression* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderNciRegression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderNciRegression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderNciRegression)
    MergeFrom(*source);
  }
}

void DataReaderNciRegression::MergeFrom(const DataReaderNciRegression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderNciRegression)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void DataReaderNciRegression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderNciRegression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderNciRegression::CopyFrom(const DataReaderNciRegression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderNciRegression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderNciRegression::IsInitialized() const {

  return true;
}

void DataReaderNciRegression::Swap(DataReaderNciRegression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderNciRegression::InternalSwap(DataReaderNciRegression* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderNciRegression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReaderNciRegression_descriptor_;
  metadata.reflection = DataReaderNciRegression_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderNciRegression

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kNameFieldNumber;
const int Model::kObjectiveFunctionFieldNumber;
const int Model::kEvaluationFrequencyFieldNumber;
const int Model::kNumEpochsFieldNumber;
const int Model::kOptimizerFieldNumber;
const int Model::kLayerFieldNumber;
const int Model::kCallbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Model)
}

void Model::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Model::Model(const Model& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Model)
}

void Model::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  evaluation_frequency_ = 0;
  num_epochs_ = 0;
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:lbann_data.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_descriptor_;
}

const Model& Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

Model* Model::default_instance_ = NULL;

Model* Model::New(::google::protobuf::Arena* arena) const {
  Model* n = new Model;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Model)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Model, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Model*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(evaluation_frequency_, num_epochs_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  layer_.Clear();
  callback_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_objective_function;
        break;
      }

      // optional string objective_function = 2;
      case 2: {
        if (tag == 18) {
         parse_objective_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objective_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objective_function().data(), this->objective_function().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.objective_function"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_evaluation_frequency;
        break;
      }

      // optional int32 evaluation_frequency = 3;
      case 3: {
        if (tag == 24) {
         parse_evaluation_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evaluation_frequency_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_epochs;
        break;
      }

      // optional int32 num_epochs = 4;
      case 4: {
        if (tag == 32) {
         parse_num_epochs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_epochs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_optimizer;
        break;
      }

      // optional string optimizer = 5;
      case 5: {
        if (tag == 42) {
         parse_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optimizer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizer().data(), this->optimizer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.optimizer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_layer;
        break;
      }

      // repeated .lbann_data.Layer layer = 10;
      case 10: {
        if (tag == 82) {
         parse_layer:
          DO_(input->IncrementRecursionDepth());
         parse_loop_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_layer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_callback;
        break;
      }

      // repeated string callback = 20;
      case 20: {
        if (tag == 162) {
         parse_callback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callback()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->callback(this->callback_size() - 1).data(),
            this->callback(this->callback_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.callback"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_callback;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Model)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string objective_function = 2;
  if (this->objective_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_function().data(), this->objective_function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.objective_function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->objective_function(), output);
  }

  // optional int32 evaluation_frequency = 3;
  if (this->evaluation_frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->evaluation_frequency(), output);
  }

  // optional int32 num_epochs = 4;
  if (this->num_epochs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_epochs(), output);
  }

  // optional string optimizer = 5;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.optimizer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->optimizer(), output);
  }

  // repeated .lbann_data.Layer layer = 10;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->layer(i), output);
  }

  // repeated string callback = 20;
  for (int i = 0; i < this->callback_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callback(i).data(), this->callback(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.callback");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->callback(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Model)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string objective_function = 2;
  if (this->objective_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_function().data(), this->objective_function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.objective_function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->objective_function(), target);
  }

  // optional int32 evaluation_frequency = 3;
  if (this->evaluation_frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->evaluation_frequency(), target);
  }

  // optional int32 num_epochs = 4;
  if (this->num_epochs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_epochs(), target);
  }

  // optional string optimizer = 5;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.optimizer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->optimizer(), target);
  }

  // repeated .lbann_data.Layer layer = 10;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->layer(i), false, target);
  }

  // repeated string callback = 20;
  for (int i = 0; i < this->callback_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callback(i).data(), this->callback(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.callback");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->callback(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Model)
  return target;
}

int Model::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Model)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string objective_function = 2;
  if (this->objective_function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objective_function());
  }

  // optional int32 evaluation_frequency = 3;
  if (this->evaluation_frequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evaluation_frequency());
  }

  // optional int32 num_epochs = 4;
  if (this->num_epochs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_epochs());
  }

  // optional string optimizer = 5;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optimizer());
  }

  // repeated .lbann_data.Layer layer = 10;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  // repeated string callback = 20;
  total_size += 2 * this->callback_size();
  for (int i = 0; i < this->callback_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->callback(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Model)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Model* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Model)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  layer_.MergeFrom(from.layer_);
  callback_.MergeFrom(from.callback_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.objective_function().size() > 0) {

    objective_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objective_function_);
  }
  if (from.evaluation_frequency() != 0) {
    set_evaluation_frequency(from.evaluation_frequency());
  }
  if (from.num_epochs() != 0) {
    set_num_epochs(from.num_epochs());
  }
  if (from.optimizer().size() > 0) {

    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {

  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  name_.Swap(&other->name_);
  objective_function_.Swap(&other->objective_function_);
  std::swap(evaluation_frequency_, other->evaluation_frequency_);
  std::swap(num_epochs_, other->num_epochs_);
  optimizer_.Swap(&other->optimizer_);
  layer_.UnsafeArenaSwap(&other->layer_);
  callback_.UnsafeArenaSwap(&other->callback_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Model_descriptor_;
  metadata.reflection = Model_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Model

// optional string name = 1;
void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Model::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.name)
}
 void Model::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.name)
}
 void Model::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.name)
}
 ::std::string* Model::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Model::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.name)
}

// optional string objective_function = 2;
void Model::clear_objective_function() {
  objective_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Model::objective_function() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.objective_function)
  return objective_function_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Model::set_objective_function(const ::std::string& value) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.objective_function)
}
 void Model::set_objective_function(const char* value) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.objective_function)
}
 void Model::set_objective_function(const char* value, size_t size) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.objective_function)
}
 ::std::string* Model::mutable_objective_function() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.objective_function)
  return objective_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Model::release_objective_function() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.objective_function)
  
  return objective_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Model::set_allocated_objective_function(::std::string* objective_function) {
  if (objective_function != NULL) {
    
  } else {
    
  }
  objective_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objective_function);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.objective_function)
}

// optional int32 evaluation_frequency = 3;
void Model::clear_evaluation_frequency() {
  evaluation_frequency_ = 0;
}
 ::google::protobuf::int32 Model::evaluation_frequency() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.evaluation_frequency)
  return evaluation_frequency_;
}
 void Model::set_evaluation_frequency(::google::protobuf::int32 value) {
  
  evaluation_frequency_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Model.evaluation_frequency)
}

// optional int32 num_epochs = 4;
void Model::clear_num_epochs() {
  num_epochs_ = 0;
}
 ::google::protobuf::int32 Model::num_epochs() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.num_epochs)
  return num_epochs_;
}
 void Model::set_num_epochs(::google::protobuf::int32 value) {
  
  num_epochs_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Model.num_epochs)
}

// optional string optimizer = 5;
void Model::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Model::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.optimizer)
  return optimizer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Model::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.optimizer)
}
 void Model::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.optimizer)
}
 void Model::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.optimizer)
}
 ::std::string* Model::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Model::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Model::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.optimizer)
}

// repeated .lbann_data.Layer layer = 10;
int Model::layer_size() const {
  return layer_.size();
}
void Model::clear_layer() {
  layer_.Clear();
}
const ::lbann_data::Layer& Model::layer(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.layer)
  return layer_.Get(index);
}
::lbann_data::Layer* Model::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.layer)
  return layer_.Mutable(index);
}
::lbann_data::Layer* Model::add_layer() {
  // @@protoc_insertion_point(field_add:lbann_data.Model.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >*
Model::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >&
Model::layer() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.layer)
  return layer_;
}

// repeated string callback = 20;
int Model::callback_size() const {
  return callback_.size();
}
void Model::clear_callback() {
  callback_.Clear();
}
 const ::std::string& Model::callback(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.callback)
  return callback_.Get(index);
}
 ::std::string* Model::mutable_callback(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.callback)
  return callback_.Mutable(index);
}
 void Model::set_callback(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.Model.callback)
  callback_.Mutable(index)->assign(value);
}
 void Model::set_callback(int index, const char* value) {
  callback_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.callback)
}
 void Model::set_callback(int index, const char* value, size_t size) {
  callback_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.callback)
}
 ::std::string* Model::add_callback() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.Model.callback)
  return callback_.Add();
}
 void Model::add_callback(const ::std::string& value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.Model.callback)
}
 void Model::add_callback(const char* value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.Model.callback)
}
 void Model::add_callback(const char* value, size_t size) {
  callback_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.Model.callback)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::callback() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.callback)
  return callback_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_callback() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.callback)
  return &callback_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layer::kIndexFieldNumber;
const int Layer::kInputDistributedMinibatchParallelIoFieldNumber;
const int Layer::kInputDistributedMinibatchFieldNumber;
const int Layer::kInputFieldNumber;
const int Layer::kFullyConnectedFieldNumber;
const int Layer::kPoolingFieldNumber;
const int Layer::kConvolutionFieldNumber;
const int Layer::kSoftmaxFieldNumber;
const int Layer::kTargetFieldNumber;
const int Layer::kTargetParallelFieldNumber;
const int Layer::kTargetDistributedMinibatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layer::Layer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Layer)
}

void Layer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_distributed_minibatch_parallel_io_ = const_cast< ::lbann_data::InputDistributedMiniBatchParallelIO*>(&::lbann_data::InputDistributedMiniBatchParallelIO::default_instance());
  input_distributed_minibatch_ = const_cast< ::lbann_data::InputDistributedMiniBatch*>(&::lbann_data::InputDistributedMiniBatch::default_instance());
  input_ = const_cast< ::lbann_data::Input*>(&::lbann_data::Input::default_instance());
  fully_connected_ = const_cast< ::lbann_data::FullyConnected*>(&::lbann_data::FullyConnected::default_instance());
  pooling_ = const_cast< ::lbann_data::Pooling*>(&::lbann_data::Pooling::default_instance());
  convolution_ = const_cast< ::lbann_data::Convolution*>(&::lbann_data::Convolution::default_instance());
  softmax_ = const_cast< ::lbann_data::Softmax*>(&::lbann_data::Softmax::default_instance());
  target_ = const_cast< ::lbann_data::Target*>(&::lbann_data::Target::default_instance());
  target_parallel_ = const_cast< ::lbann_data::TargetParallel*>(&::lbann_data::TargetParallel::default_instance());
  target_distributed_minibatch_ = const_cast< ::lbann_data::TargetDistributedMinibatch*>(&::lbann_data::TargetDistributedMinibatch::default_instance());
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Layer)
}

void Layer::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  index_ = 0u;
  input_distributed_minibatch_parallel_io_ = NULL;
  input_distributed_minibatch_ = NULL;
  input_ = NULL;
  fully_connected_ = NULL;
  pooling_ = NULL;
  convolution_ = NULL;
  softmax_ = NULL;
  target_ = NULL;
  target_parallel_ = NULL;
  target_distributed_minibatch_ = NULL;
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:lbann_data.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (this != default_instance_) {
    delete input_distributed_minibatch_parallel_io_;
    delete input_distributed_minibatch_;
    delete input_;
    delete fully_connected_;
    delete pooling_;
    delete convolution_;
    delete softmax_;
    delete target_;
    delete target_parallel_;
    delete target_distributed_minibatch_;
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_descriptor_;
}

const Layer& Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New(::google::protobuf::Arena* arena) const {
  Layer* n = new Layer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Layer)
  index_ = 0u;
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_parallel_io_ != NULL) delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_ != NULL) delete input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && fully_connected_ != NULL) delete fully_connected_;
  fully_connected_ = NULL;
  if (GetArenaNoVirtual() == NULL && pooling_ != NULL) delete pooling_;
  pooling_ = NULL;
  if (GetArenaNoVirtual() == NULL && convolution_ != NULL) delete convolution_;
  convolution_ = NULL;
  if (GetArenaNoVirtual() == NULL && softmax_ != NULL) delete softmax_;
  softmax_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_parallel_ != NULL) delete target_parallel_;
  target_parallel_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_ != NULL) delete target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_input_distributed_minibatch_parallel_io;
        break;
      }

      // optional .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
      case 8: {
        if (tag == 66) {
         parse_input_distributed_minibatch_parallel_io:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_distributed_minibatch_parallel_io()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_input_distributed_minibatch;
        break;
      }

      // optional .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
      case 9: {
        if (tag == 74) {
         parse_input_distributed_minibatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_distributed_minibatch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_input;
        break;
      }

      // optional .lbann_data.Input input = 10;
      case 10: {
        if (tag == 82) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fully_connected;
        break;
      }

      // optional .lbann_data.FullyConnected fully_connected = 11;
      case 11: {
        if (tag == 90) {
         parse_fully_connected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fully_connected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_pooling;
        break;
      }

      // optional .lbann_data.Pooling pooling = 12;
      case 12: {
        if (tag == 98) {
         parse_pooling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_convolution;
        break;
      }

      // optional .lbann_data.Convolution convolution = 13;
      case 13: {
        if (tag == 106) {
         parse_convolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_softmax;
        break;
      }

      // optional .lbann_data.Softmax softmax = 14;
      case 14: {
        if (tag == 114) {
         parse_softmax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_target;
        break;
      }

      // optional .lbann_data.Target target = 15;
      case 15: {
        if (tag == 122) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_target_parallel;
        break;
      }

      // optional .lbann_data.TargetParallel target_parallel = 16;
      case 16: {
        if (tag == 130) {
         parse_target_parallel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_parallel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_target_distributed_minibatch;
        break;
      }

      // optional .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
      case 17: {
        if (tag == 138) {
         parse_target_distributed_minibatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_distributed_minibatch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Layer)
  return false;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Layer)
  // optional uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  if (this->has_input_distributed_minibatch_parallel_io()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->input_distributed_minibatch_parallel_io_, output);
  }

  // optional .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  if (this->has_input_distributed_minibatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->input_distributed_minibatch_, output);
  }

  // optional .lbann_data.Input input = 10;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->input_, output);
  }

  // optional .lbann_data.FullyConnected fully_connected = 11;
  if (this->has_fully_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->fully_connected_, output);
  }

  // optional .lbann_data.Pooling pooling = 12;
  if (this->has_pooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->pooling_, output);
  }

  // optional .lbann_data.Convolution convolution = 13;
  if (this->has_convolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->convolution_, output);
  }

  // optional .lbann_data.Softmax softmax = 14;
  if (this->has_softmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->softmax_, output);
  }

  // optional .lbann_data.Target target = 15;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->target_, output);
  }

  // optional .lbann_data.TargetParallel target_parallel = 16;
  if (this->has_target_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->target_parallel_, output);
  }

  // optional .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  if (this->has_target_distributed_minibatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->target_distributed_minibatch_, output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Layer)
}

::google::protobuf::uint8* Layer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Layer)
  // optional uint32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  if (this->has_input_distributed_minibatch_parallel_io()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->input_distributed_minibatch_parallel_io_, false, target);
  }

  // optional .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  if (this->has_input_distributed_minibatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->input_distributed_minibatch_, false, target);
  }

  // optional .lbann_data.Input input = 10;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->input_, false, target);
  }

  // optional .lbann_data.FullyConnected fully_connected = 11;
  if (this->has_fully_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->fully_connected_, false, target);
  }

  // optional .lbann_data.Pooling pooling = 12;
  if (this->has_pooling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->pooling_, false, target);
  }

  // optional .lbann_data.Convolution convolution = 13;
  if (this->has_convolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->convolution_, false, target);
  }

  // optional .lbann_data.Softmax softmax = 14;
  if (this->has_softmax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->softmax_, false, target);
  }

  // optional .lbann_data.Target target = 15;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->target_, false, target);
  }

  // optional .lbann_data.TargetParallel target_parallel = 16;
  if (this->has_target_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->target_parallel_, false, target);
  }

  // optional .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  if (this->has_target_distributed_minibatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->target_distributed_minibatch_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Layer)
  return target;
}

int Layer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Layer)
  int total_size = 0;

  // optional uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // optional .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  if (this->has_input_distributed_minibatch_parallel_io()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_distributed_minibatch_parallel_io_);
  }

  // optional .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  if (this->has_input_distributed_minibatch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_distributed_minibatch_);
  }

  // optional .lbann_data.Input input = 10;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  // optional .lbann_data.FullyConnected fully_connected = 11;
  if (this->has_fully_connected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fully_connected_);
  }

  // optional .lbann_data.Pooling pooling = 12;
  if (this->has_pooling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pooling_);
  }

  // optional .lbann_data.Convolution convolution = 13;
  if (this->has_convolution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->convolution_);
  }

  // optional .lbann_data.Softmax softmax = 14;
  if (this->has_softmax()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_);
  }

  // optional .lbann_data.Target target = 15;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  // optional .lbann_data.TargetParallel target_parallel = 16;
  if (this->has_target_parallel()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_parallel_);
  }

  // optional .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  if (this->has_target_distributed_minibatch()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_distributed_minibatch_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Layer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Layer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Layer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Layer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Layer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.has_input_distributed_minibatch_parallel_io()) {
    mutable_input_distributed_minibatch_parallel_io()->::lbann_data::InputDistributedMiniBatchParallelIO::MergeFrom(from.input_distributed_minibatch_parallel_io());
  }
  if (from.has_input_distributed_minibatch()) {
    mutable_input_distributed_minibatch()->::lbann_data::InputDistributedMiniBatch::MergeFrom(from.input_distributed_minibatch());
  }
  if (from.has_input()) {
    mutable_input()->::lbann_data::Input::MergeFrom(from.input());
  }
  if (from.has_fully_connected()) {
    mutable_fully_connected()->::lbann_data::FullyConnected::MergeFrom(from.fully_connected());
  }
  if (from.has_pooling()) {
    mutable_pooling()->::lbann_data::Pooling::MergeFrom(from.pooling());
  }
  if (from.has_convolution()) {
    mutable_convolution()->::lbann_data::Convolution::MergeFrom(from.convolution());
  }
  if (from.has_softmax()) {
    mutable_softmax()->::lbann_data::Softmax::MergeFrom(from.softmax());
  }
  if (from.has_target()) {
    mutable_target()->::lbann_data::Target::MergeFrom(from.target());
  }
  if (from.has_target_parallel()) {
    mutable_target_parallel()->::lbann_data::TargetParallel::MergeFrom(from.target_parallel());
  }
  if (from.has_target_distributed_minibatch()) {
    mutable_target_distributed_minibatch()->::lbann_data::TargetDistributedMinibatch::MergeFrom(from.target_distributed_minibatch());
  }
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {

  return true;
}

void Layer::Swap(Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layer::InternalSwap(Layer* other) {
  std::swap(index_, other->index_);
  std::swap(input_distributed_minibatch_parallel_io_, other->input_distributed_minibatch_parallel_io_);
  std::swap(input_distributed_minibatch_, other->input_distributed_minibatch_);
  std::swap(input_, other->input_);
  std::swap(fully_connected_, other->fully_connected_);
  std::swap(pooling_, other->pooling_);
  std::swap(convolution_, other->convolution_);
  std::swap(softmax_, other->softmax_);
  std::swap(target_, other->target_);
  std::swap(target_parallel_, other->target_parallel_);
  std::swap(target_distributed_minibatch_, other->target_distributed_minibatch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layer_descriptor_;
  metadata.reflection = Layer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layer

// optional uint32 index = 2;
void Layer::clear_index() {
  index_ = 0u;
}
 ::google::protobuf::uint32 Layer::index() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.index)
  return index_;
}
 void Layer::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Layer.index)
}

// optional .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
bool Layer::has_input_distributed_minibatch_parallel_io() const {
  return !_is_default_instance_ && input_distributed_minibatch_parallel_io_ != NULL;
}
void Layer::clear_input_distributed_minibatch_parallel_io() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_parallel_io_ != NULL) delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
}
const ::lbann_data::InputDistributedMiniBatchParallelIO& Layer::input_distributed_minibatch_parallel_io() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_ != NULL ? *input_distributed_minibatch_parallel_io_ : *default_instance_->input_distributed_minibatch_parallel_io_;
}
::lbann_data::InputDistributedMiniBatchParallelIO* Layer::mutable_input_distributed_minibatch_parallel_io() {
  
  if (input_distributed_minibatch_parallel_io_ == NULL) {
    input_distributed_minibatch_parallel_io_ = new ::lbann_data::InputDistributedMiniBatchParallelIO;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_;
}
::lbann_data::InputDistributedMiniBatchParallelIO* Layer::release_input_distributed_minibatch_parallel_io() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  
  ::lbann_data::InputDistributedMiniBatchParallelIO* temp = input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
  return temp;
}
void Layer::set_allocated_input_distributed_minibatch_parallel_io(::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io) {
  delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = input_distributed_minibatch_parallel_io;
  if (input_distributed_minibatch_parallel_io) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch_parallel_io)
}

// optional .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
bool Layer::has_input_distributed_minibatch() const {
  return !_is_default_instance_ && input_distributed_minibatch_ != NULL;
}
void Layer::clear_input_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_ != NULL) delete input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
}
const ::lbann_data::InputDistributedMiniBatch& Layer::input_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_ != NULL ? *input_distributed_minibatch_ : *default_instance_->input_distributed_minibatch_;
}
::lbann_data::InputDistributedMiniBatch* Layer::mutable_input_distributed_minibatch() {
  
  if (input_distributed_minibatch_ == NULL) {
    input_distributed_minibatch_ = new ::lbann_data::InputDistributedMiniBatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_;
}
::lbann_data::InputDistributedMiniBatch* Layer::release_input_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch)
  
  ::lbann_data::InputDistributedMiniBatch* temp = input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
  return temp;
}
void Layer::set_allocated_input_distributed_minibatch(::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch) {
  delete input_distributed_minibatch_;
  input_distributed_minibatch_ = input_distributed_minibatch;
  if (input_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch)
}

// optional .lbann_data.Input input = 10;
bool Layer::has_input() const {
  return !_is_default_instance_ && input_ != NULL;
}
void Layer::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::lbann_data::Input& Layer::input() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input)
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
::lbann_data::Input* Layer::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::lbann_data::Input;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input)
  return input_;
}
::lbann_data::Input* Layer::release_input() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input)
  
  ::lbann_data::Input* temp = input_;
  input_ = NULL;
  return temp;
}
void Layer::set_allocated_input(::lbann_data::Input* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input)
}

// optional .lbann_data.FullyConnected fully_connected = 11;
bool Layer::has_fully_connected() const {
  return !_is_default_instance_ && fully_connected_ != NULL;
}
void Layer::clear_fully_connected() {
  if (GetArenaNoVirtual() == NULL && fully_connected_ != NULL) delete fully_connected_;
  fully_connected_ = NULL;
}
const ::lbann_data::FullyConnected& Layer::fully_connected() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.fully_connected)
  return fully_connected_ != NULL ? *fully_connected_ : *default_instance_->fully_connected_;
}
::lbann_data::FullyConnected* Layer::mutable_fully_connected() {
  
  if (fully_connected_ == NULL) {
    fully_connected_ = new ::lbann_data::FullyConnected;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.fully_connected)
  return fully_connected_;
}
::lbann_data::FullyConnected* Layer::release_fully_connected() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.fully_connected)
  
  ::lbann_data::FullyConnected* temp = fully_connected_;
  fully_connected_ = NULL;
  return temp;
}
void Layer::set_allocated_fully_connected(::lbann_data::FullyConnected* fully_connected) {
  delete fully_connected_;
  fully_connected_ = fully_connected;
  if (fully_connected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.fully_connected)
}

// optional .lbann_data.Pooling pooling = 12;
bool Layer::has_pooling() const {
  return !_is_default_instance_ && pooling_ != NULL;
}
void Layer::clear_pooling() {
  if (GetArenaNoVirtual() == NULL && pooling_ != NULL) delete pooling_;
  pooling_ = NULL;
}
const ::lbann_data::Pooling& Layer::pooling() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.pooling)
  return pooling_ != NULL ? *pooling_ : *default_instance_->pooling_;
}
::lbann_data::Pooling* Layer::mutable_pooling() {
  
  if (pooling_ == NULL) {
    pooling_ = new ::lbann_data::Pooling;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.pooling)
  return pooling_;
}
::lbann_data::Pooling* Layer::release_pooling() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.pooling)
  
  ::lbann_data::Pooling* temp = pooling_;
  pooling_ = NULL;
  return temp;
}
void Layer::set_allocated_pooling(::lbann_data::Pooling* pooling) {
  delete pooling_;
  pooling_ = pooling;
  if (pooling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.pooling)
}

// optional .lbann_data.Convolution convolution = 13;
bool Layer::has_convolution() const {
  return !_is_default_instance_ && convolution_ != NULL;
}
void Layer::clear_convolution() {
  if (GetArenaNoVirtual() == NULL && convolution_ != NULL) delete convolution_;
  convolution_ = NULL;
}
const ::lbann_data::Convolution& Layer::convolution() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.convolution)
  return convolution_ != NULL ? *convolution_ : *default_instance_->convolution_;
}
::lbann_data::Convolution* Layer::mutable_convolution() {
  
  if (convolution_ == NULL) {
    convolution_ = new ::lbann_data::Convolution;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.convolution)
  return convolution_;
}
::lbann_data::Convolution* Layer::release_convolution() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.convolution)
  
  ::lbann_data::Convolution* temp = convolution_;
  convolution_ = NULL;
  return temp;
}
void Layer::set_allocated_convolution(::lbann_data::Convolution* convolution) {
  delete convolution_;
  convolution_ = convolution;
  if (convolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.convolution)
}

// optional .lbann_data.Softmax softmax = 14;
bool Layer::has_softmax() const {
  return !_is_default_instance_ && softmax_ != NULL;
}
void Layer::clear_softmax() {
  if (GetArenaNoVirtual() == NULL && softmax_ != NULL) delete softmax_;
  softmax_ = NULL;
}
const ::lbann_data::Softmax& Layer::softmax() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.softmax)
  return softmax_ != NULL ? *softmax_ : *default_instance_->softmax_;
}
::lbann_data::Softmax* Layer::mutable_softmax() {
  
  if (softmax_ == NULL) {
    softmax_ = new ::lbann_data::Softmax;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.softmax)
  return softmax_;
}
::lbann_data::Softmax* Layer::release_softmax() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.softmax)
  
  ::lbann_data::Softmax* temp = softmax_;
  softmax_ = NULL;
  return temp;
}
void Layer::set_allocated_softmax(::lbann_data::Softmax* softmax) {
  delete softmax_;
  softmax_ = softmax;
  if (softmax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.softmax)
}

// optional .lbann_data.Target target = 15;
bool Layer::has_target() const {
  return !_is_default_instance_ && target_ != NULL;
}
void Layer::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::lbann_data::Target& Layer::target() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
::lbann_data::Target* Layer::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::lbann_data::Target;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target)
  return target_;
}
::lbann_data::Target* Layer::release_target() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target)
  
  ::lbann_data::Target* temp = target_;
  target_ = NULL;
  return temp;
}
void Layer::set_allocated_target(::lbann_data::Target* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target)
}

// optional .lbann_data.TargetParallel target_parallel = 16;
bool Layer::has_target_parallel() const {
  return !_is_default_instance_ && target_parallel_ != NULL;
}
void Layer::clear_target_parallel() {
  if (GetArenaNoVirtual() == NULL && target_parallel_ != NULL) delete target_parallel_;
  target_parallel_ = NULL;
}
const ::lbann_data::TargetParallel& Layer::target_parallel() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_parallel)
  return target_parallel_ != NULL ? *target_parallel_ : *default_instance_->target_parallel_;
}
::lbann_data::TargetParallel* Layer::mutable_target_parallel() {
  
  if (target_parallel_ == NULL) {
    target_parallel_ = new ::lbann_data::TargetParallel;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_parallel)
  return target_parallel_;
}
::lbann_data::TargetParallel* Layer::release_target_parallel() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_parallel)
  
  ::lbann_data::TargetParallel* temp = target_parallel_;
  target_parallel_ = NULL;
  return temp;
}
void Layer::set_allocated_target_parallel(::lbann_data::TargetParallel* target_parallel) {
  delete target_parallel_;
  target_parallel_ = target_parallel;
  if (target_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_parallel)
}

// optional .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
bool Layer::has_target_distributed_minibatch() const {
  return !_is_default_instance_ && target_distributed_minibatch_ != NULL;
}
void Layer::clear_target_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_ != NULL) delete target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
}
const ::lbann_data::TargetDistributedMinibatch& Layer::target_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_ != NULL ? *target_distributed_minibatch_ : *default_instance_->target_distributed_minibatch_;
}
::lbann_data::TargetDistributedMinibatch* Layer::mutable_target_distributed_minibatch() {
  
  if (target_distributed_minibatch_ == NULL) {
    target_distributed_minibatch_ = new ::lbann_data::TargetDistributedMinibatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_;
}
::lbann_data::TargetDistributedMinibatch* Layer::release_target_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_distributed_minibatch)
  
  ::lbann_data::TargetDistributedMinibatch* temp = target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
  return temp;
}
void Layer::set_allocated_target_distributed_minibatch(::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch) {
  delete target_distributed_minibatch_;
  target_distributed_minibatch_ = target_distributed_minibatch;
  if (target_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_distributed_minibatch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input::kMiniBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input::Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Input)
}

void Input::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Input::Input(const Input& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Input)
}

void Input::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mini_batch_size_ = 0;
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:lbann_data.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Input_descriptor_;
}

const Input& Input::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

Input* Input::default_instance_ = NULL;

Input* Input::New(::google::protobuf::Arena* arena) const {
  Input* n = new Input;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Input)
  mini_batch_size_ = 0;
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Input)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mini_batch_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Input)
  return false;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Input)
  // optional int32 mini_batch_size = 1;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mini_batch_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Input)
}

::google::protobuf::uint8* Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Input)
  // optional int32 mini_batch_size = 1;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mini_batch_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Input)
  return target;
}

int Input::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Input)
  int total_size = 0;

  // optional int32 mini_batch_size = 1;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Input)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Input* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Input)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {

  return true;
}

void Input::Swap(Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input::InternalSwap(Input* other) {
  std::swap(mini_batch_size_, other->mini_batch_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Input_descriptor_;
  metadata.reflection = Input_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Input

// optional int32 mini_batch_size = 1;
void Input::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
 ::google::protobuf::int32 Input::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Input.mini_batch_size)
  return mini_batch_size_;
}
 void Input::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Input.mini_batch_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputDistributedMiniBatchParallelIO::kNumParallelReadersFieldNumber;
const int InputDistributedMiniBatchParallelIO::kMiniBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputDistributedMiniBatchParallelIO::InputDistributedMiniBatchParallelIO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.InputDistributedMiniBatchParallelIO)
}

void InputDistributedMiniBatchParallelIO::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InputDistributedMiniBatchParallelIO::InputDistributedMiniBatchParallelIO(const InputDistributedMiniBatchParallelIO& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.InputDistributedMiniBatchParallelIO)
}

void InputDistributedMiniBatchParallelIO::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  num_parallel_readers_ = 0u;
  mini_batch_size_ = 0u;
}

InputDistributedMiniBatchParallelIO::~InputDistributedMiniBatchParallelIO() {
  // @@protoc_insertion_point(destructor:lbann_data.InputDistributedMiniBatchParallelIO)
  SharedDtor();
}

void InputDistributedMiniBatchParallelIO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputDistributedMiniBatchParallelIO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputDistributedMiniBatchParallelIO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputDistributedMiniBatchParallelIO_descriptor_;
}

const InputDistributedMiniBatchParallelIO& InputDistributedMiniBatchParallelIO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

InputDistributedMiniBatchParallelIO* InputDistributedMiniBatchParallelIO::default_instance_ = NULL;

InputDistributedMiniBatchParallelIO* InputDistributedMiniBatchParallelIO::New(::google::protobuf::Arena* arena) const {
  InputDistributedMiniBatchParallelIO* n = new InputDistributedMiniBatchParallelIO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputDistributedMiniBatchParallelIO::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.InputDistributedMiniBatchParallelIO)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InputDistributedMiniBatchParallelIO, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InputDistributedMiniBatchParallelIO*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_parallel_readers_, mini_batch_size_);

#undef ZR_HELPER_
#undef ZR_

}

bool InputDistributedMiniBatchParallelIO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.InputDistributedMiniBatchParallelIO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_parallel_readers = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_parallel_readers_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mini_batch_size;
        break;
      }

      // optional uint32 mini_batch_size = 2;
      case 2: {
        if (tag == 16) {
         parse_mini_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mini_batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.InputDistributedMiniBatchParallelIO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.InputDistributedMiniBatchParallelIO)
  return false;
#undef DO_
}

void InputDistributedMiniBatchParallelIO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.InputDistributedMiniBatchParallelIO)
  // optional uint32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_parallel_readers(), output);
  }

  // optional uint32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mini_batch_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.InputDistributedMiniBatchParallelIO)
}

::google::protobuf::uint8* InputDistributedMiniBatchParallelIO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.InputDistributedMiniBatchParallelIO)
  // optional uint32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_parallel_readers(), target);
  }

  // optional uint32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mini_batch_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.InputDistributedMiniBatchParallelIO)
  return target;
}

int InputDistributedMiniBatchParallelIO::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.InputDistributedMiniBatchParallelIO)
  int total_size = 0;

  // optional uint32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_parallel_readers());
  }

  // optional uint32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mini_batch_size());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputDistributedMiniBatchParallelIO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InputDistributedMiniBatchParallelIO* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InputDistributedMiniBatchParallelIO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.InputDistributedMiniBatchParallelIO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.InputDistributedMiniBatchParallelIO)
    MergeFrom(*source);
  }
}

void InputDistributedMiniBatchParallelIO::MergeFrom(const InputDistributedMiniBatchParallelIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_parallel_readers() != 0) {
    set_num_parallel_readers(from.num_parallel_readers());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void InputDistributedMiniBatchParallelIO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDistributedMiniBatchParallelIO::CopyFrom(const InputDistributedMiniBatchParallelIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDistributedMiniBatchParallelIO::IsInitialized() const {

  return true;
}

void InputDistributedMiniBatchParallelIO::Swap(InputDistributedMiniBatchParallelIO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputDistributedMiniBatchParallelIO::InternalSwap(InputDistributedMiniBatchParallelIO* other) {
  std::swap(num_parallel_readers_, other->num_parallel_readers_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputDistributedMiniBatchParallelIO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputDistributedMiniBatchParallelIO_descriptor_;
  metadata.reflection = InputDistributedMiniBatchParallelIO_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputDistributedMiniBatchParallelIO

// optional uint32 num_parallel_readers = 1;
void InputDistributedMiniBatchParallelIO::clear_num_parallel_readers() {
  num_parallel_readers_ = 0u;
}
 ::google::protobuf::uint32 InputDistributedMiniBatchParallelIO::num_parallel_readers() const {
  // @@protoc_insertion_point(field_get:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
  return num_parallel_readers_;
}
 void InputDistributedMiniBatchParallelIO::set_num_parallel_readers(::google::protobuf::uint32 value) {
  
  num_parallel_readers_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
}

// optional uint32 mini_batch_size = 2;
void InputDistributedMiniBatchParallelIO::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
}
 ::google::protobuf::uint32 InputDistributedMiniBatchParallelIO::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.InputDistributedMiniBatchParallelIO.mini_batch_size)
  return mini_batch_size_;
}
 void InputDistributedMiniBatchParallelIO::set_mini_batch_size(::google::protobuf::uint32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.InputDistributedMiniBatchParallelIO.mini_batch_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputDistributedMiniBatch::InputDistributedMiniBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.InputDistributedMiniBatch)
}

void InputDistributedMiniBatch::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InputDistributedMiniBatch::InputDistributedMiniBatch(const InputDistributedMiniBatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.InputDistributedMiniBatch)
}

void InputDistributedMiniBatch::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

InputDistributedMiniBatch::~InputDistributedMiniBatch() {
  // @@protoc_insertion_point(destructor:lbann_data.InputDistributedMiniBatch)
  SharedDtor();
}

void InputDistributedMiniBatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputDistributedMiniBatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputDistributedMiniBatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputDistributedMiniBatch_descriptor_;
}

const InputDistributedMiniBatch& InputDistributedMiniBatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

InputDistributedMiniBatch* InputDistributedMiniBatch::default_instance_ = NULL;

InputDistributedMiniBatch* InputDistributedMiniBatch::New(::google::protobuf::Arena* arena) const {
  InputDistributedMiniBatch* n = new InputDistributedMiniBatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputDistributedMiniBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.InputDistributedMiniBatch)
}

bool InputDistributedMiniBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.InputDistributedMiniBatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.InputDistributedMiniBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.InputDistributedMiniBatch)
  return false;
#undef DO_
}

void InputDistributedMiniBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.InputDistributedMiniBatch)
  // @@protoc_insertion_point(serialize_end:lbann_data.InputDistributedMiniBatch)
}

::google::protobuf::uint8* InputDistributedMiniBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.InputDistributedMiniBatch)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.InputDistributedMiniBatch)
  return target;
}

int InputDistributedMiniBatch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.InputDistributedMiniBatch)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputDistributedMiniBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.InputDistributedMiniBatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InputDistributedMiniBatch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InputDistributedMiniBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.InputDistributedMiniBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.InputDistributedMiniBatch)
    MergeFrom(*source);
  }
}

void InputDistributedMiniBatch::MergeFrom(const InputDistributedMiniBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.InputDistributedMiniBatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void InputDistributedMiniBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.InputDistributedMiniBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDistributedMiniBatch::CopyFrom(const InputDistributedMiniBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.InputDistributedMiniBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDistributedMiniBatch::IsInitialized() const {

  return true;
}

void InputDistributedMiniBatch::Swap(InputDistributedMiniBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputDistributedMiniBatch::InternalSwap(InputDistributedMiniBatch* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputDistributedMiniBatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputDistributedMiniBatch_descriptor_;
  metadata.reflection = InputDistributedMiniBatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputDistributedMiniBatch

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullyConnected::kNumPrevNeuronsFieldNumber;
const int FullyConnected::kNumNeuronsFieldNumber;
const int FullyConnected::kMiniBatchSizeFieldNumber;
const int FullyConnected::kActivationTypeFieldNumber;
const int FullyConnected::kWeightInitializationFieldNumber;
const int FullyConnected::kOptimizerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullyConnected::FullyConnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.FullyConnected)
}

void FullyConnected::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FullyConnected::FullyConnected(const FullyConnected& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.FullyConnected)
}

void FullyConnected::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_prev_neurons_ = 0u;
  num_neurons_ = 0u;
  mini_batch_size_ = 0u;
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FullyConnected::~FullyConnected() {
  // @@protoc_insertion_point(destructor:lbann_data.FullyConnected)
  SharedDtor();
}

void FullyConnected::SharedDtor() {
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FullyConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullyConnected::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullyConnected_descriptor_;
}

const FullyConnected& FullyConnected::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

FullyConnected* FullyConnected::default_instance_ = NULL;

FullyConnected* FullyConnected::New(::google::protobuf::Arena* arena) const {
  FullyConnected* n = new FullyConnected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullyConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.FullyConnected)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FullyConnected, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FullyConnected*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_prev_neurons_, num_neurons_);
  mini_batch_size_ = 0u;
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool FullyConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.FullyConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_prev_neurons = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_prev_neurons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_neurons;
        break;
      }

      // optional uint32 num_neurons = 2;
      case 2: {
        if (tag == 16) {
         parse_num_neurons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_neurons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mini_batch_size;
        break;
      }

      // optional uint32 mini_batch_size = 3;
      case 3: {
        if (tag == 24) {
         parse_mini_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mini_batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_activation_type;
        break;
      }

      // optional string activation_type = 4;
      case 4: {
        if (tag == 34) {
         parse_activation_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.FullyConnected.activation_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weight_initialization;
        break;
      }

      // optional string weight_initialization = 5;
      case 5: {
        if (tag == 42) {
         parse_weight_initialization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_initialization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weight_initialization().data(), this->weight_initialization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.FullyConnected.weight_initialization"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_optimizer;
        break;
      }

      // optional string optimizer = 10;
      case 10: {
        if (tag == 82) {
         parse_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optimizer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizer().data(), this->optimizer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.FullyConnected.optimizer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.FullyConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.FullyConnected)
  return false;
#undef DO_
}

void FullyConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.FullyConnected)
  // optional uint32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_prev_neurons(), output);
  }

  // optional uint32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_neurons(), output);
  }

  // optional uint32 mini_batch_size = 3;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mini_batch_size(), output);
  }

  // optional string activation_type = 4;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->activation_type(), output);
  }

  // optional string weight_initialization = 5;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.weight_initialization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->weight_initialization(), output);
  }

  // optional string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.optimizer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->optimizer(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.FullyConnected)
}

::google::protobuf::uint8* FullyConnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.FullyConnected)
  // optional uint32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_prev_neurons(), target);
  }

  // optional uint32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_neurons(), target);
  }

  // optional uint32 mini_batch_size = 3;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mini_batch_size(), target);
  }

  // optional string activation_type = 4;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activation_type(), target);
  }

  // optional string weight_initialization = 5;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.weight_initialization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weight_initialization(), target);
  }

  // optional string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.optimizer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->optimizer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.FullyConnected)
  return target;
}

int FullyConnected::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.FullyConnected)
  int total_size = 0;

  // optional uint32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_prev_neurons());
  }

  // optional uint32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_neurons());
  }

  // optional uint32 mini_batch_size = 3;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mini_batch_size());
  }

  // optional string activation_type = 4;
  if (this->activation_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // optional string weight_initialization = 5;
  if (this->weight_initialization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight_initialization());
  }

  // optional string optimizer = 10;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optimizer());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullyConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.FullyConnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FullyConnected* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FullyConnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.FullyConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.FullyConnected)
    MergeFrom(*source);
  }
}

void FullyConnected::MergeFrom(const FullyConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.FullyConnected)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_prev_neurons() != 0) {
    set_num_prev_neurons(from.num_prev_neurons());
  }
  if (from.num_neurons() != 0) {
    set_num_neurons(from.num_neurons());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  if (from.weight_initialization().size() > 0) {

    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  if (from.optimizer().size() > 0) {

    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
}

void FullyConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.FullyConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullyConnected::CopyFrom(const FullyConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.FullyConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullyConnected::IsInitialized() const {

  return true;
}

void FullyConnected::Swap(FullyConnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullyConnected::InternalSwap(FullyConnected* other) {
  std::swap(num_prev_neurons_, other->num_prev_neurons_);
  std::swap(num_neurons_, other->num_neurons_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  activation_type_.Swap(&other->activation_type_);
  weight_initialization_.Swap(&other->weight_initialization_);
  optimizer_.Swap(&other->optimizer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FullyConnected::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullyConnected_descriptor_;
  metadata.reflection = FullyConnected_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullyConnected

// optional uint32 num_prev_neurons = 1;
void FullyConnected::clear_num_prev_neurons() {
  num_prev_neurons_ = 0u;
}
 ::google::protobuf::uint32 FullyConnected::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_prev_neurons)
  return num_prev_neurons_;
}
 void FullyConnected::set_num_prev_neurons(::google::protobuf::uint32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_prev_neurons)
}

// optional uint32 num_neurons = 2;
void FullyConnected::clear_num_neurons() {
  num_neurons_ = 0u;
}
 ::google::protobuf::uint32 FullyConnected::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_neurons)
  return num_neurons_;
}
 void FullyConnected::set_num_neurons(::google::protobuf::uint32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_neurons)
}

// optional uint32 mini_batch_size = 3;
void FullyConnected::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
}
 ::google::protobuf::uint32 FullyConnected::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.mini_batch_size)
  return mini_batch_size_;
}
 void FullyConnected::set_mini_batch_size(::google::protobuf::uint32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.mini_batch_size)
}

// optional string activation_type = 4;
void FullyConnected::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FullyConnected::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.activation_type)
  return activation_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FullyConnected::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.activation_type)
}
 void FullyConnected::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.activation_type)
}
 void FullyConnected::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.activation_type)
}
 ::std::string* FullyConnected::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FullyConnected::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FullyConnected::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.activation_type)
}

// optional string weight_initialization = 5;
void FullyConnected::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FullyConnected::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.weight_initialization)
  return weight_initialization_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FullyConnected::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.weight_initialization)
}
 void FullyConnected::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.weight_initialization)
}
 void FullyConnected::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.weight_initialization)
}
 ::std::string* FullyConnected::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FullyConnected::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FullyConnected::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.weight_initialization)
}

// optional string optimizer = 10;
void FullyConnected::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FullyConnected::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.optimizer)
  return optimizer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FullyConnected::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.optimizer)
}
 void FullyConnected::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.optimizer)
}
 void FullyConnected::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.optimizer)
}
 ::std::string* FullyConnected::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FullyConnected::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FullyConnected::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.optimizer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pooling::kNumDimsFieldNumber;
const int Pooling::kNumChannelsFieldNumber;
const int Pooling::kInputDimsFieldNumber;
const int Pooling::kPoolDimsFieldNumber;
const int Pooling::kPoolPadsFieldNumber;
const int Pooling::kPoolStridesFieldNumber;
const int Pooling::kPoolModeFieldNumber;
const int Pooling::kActivationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pooling::Pooling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Pooling)
}

void Pooling::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Pooling::Pooling(const Pooling& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Pooling)
}

void Pooling::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_dims_ = 0;
  num_channels_ = 0;
  pool_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Pooling::~Pooling() {
  // @@protoc_insertion_point(destructor:lbann_data.Pooling)
  SharedDtor();
}

void Pooling::SharedDtor() {
  pool_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Pooling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pooling::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pooling_descriptor_;
}

const Pooling& Pooling::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

Pooling* Pooling::default_instance_ = NULL;

Pooling* Pooling::New(::google::protobuf::Arena* arena) const {
  Pooling* n = new Pooling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pooling::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Pooling)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Pooling, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Pooling*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_dims_, num_channels_);
  pool_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  input_dims_.Clear();
  pool_dims_.Clear();
  pool_pads_.Clear();
  pool_strides_.Clear();
}

bool Pooling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Pooling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_dims = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_dims_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_channels;
        break;
      }

      // optional int32 num_channels = 2;
      case 2: {
        if (tag == 16) {
         parse_num_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_channels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_dims;
        break;
      }

      // repeated int32 input_dims = 3;
      case 3: {
        if (tag == 26) {
         parse_input_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dims())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_input_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pool_dims;
        break;
      }

      // repeated int32 pool_dims = 4;
      case 4: {
        if (tag == 34) {
         parse_pool_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pool_dims())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_pool_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pool_pads;
        break;
      }

      // repeated int32 pool_pads = 5;
      case 5: {
        if (tag == 42) {
         parse_pool_pads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pool_pads())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_pool_pads())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pool_strides;
        break;
      }

      // repeated int32 pool_strides = 6;
      case 6: {
        if (tag == 50) {
         parse_pool_strides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pool_strides())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_pool_strides())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pool_mode;
        break;
      }

      // optional string pool_mode = 7;
      case 7: {
        if (tag == 58) {
         parse_pool_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pool_mode().data(), this->pool_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Pooling.pool_mode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_activation_type;
        break;
      }

      // optional string activation_type = 8;
      case 8: {
        if (tag == 66) {
         parse_activation_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Pooling.activation_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Pooling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Pooling)
  return false;
#undef DO_
}

void Pooling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Pooling)
  // optional int32 num_dims = 1;
  if (this->num_dims() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_dims(), output);
  }

  // optional int32 num_channels = 2;
  if (this->num_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_channels(), output);
  }

  // repeated int32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_dims(i), output);
  }

  // repeated int32 pool_dims = 4;
  if (this->pool_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pool_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->pool_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pool_dims(i), output);
  }

  // repeated int32 pool_pads = 5;
  if (this->pool_pads_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pool_pads_cached_byte_size_);
  }
  for (int i = 0; i < this->pool_pads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pool_pads(i), output);
  }

  // repeated int32 pool_strides = 6;
  if (this->pool_strides_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pool_strides_cached_byte_size_);
  }
  for (int i = 0; i < this->pool_strides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pool_strides(i), output);
  }

  // optional string pool_mode = 7;
  if (this->pool_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool_mode().data(), this->pool_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.pool_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pool_mode(), output);
  }

  // optional string activation_type = 8;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->activation_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Pooling)
}

::google::protobuf::uint8* Pooling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Pooling)
  // optional int32 num_dims = 1;
  if (this->num_dims() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_dims(), target);
  }

  // optional int32 num_channels = 2;
  if (this->num_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_channels(), target);
  }

  // repeated int32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_dims(i), target);
  }

  // repeated int32 pool_dims = 4;
  if (this->pool_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pool_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pool_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pool_dims(i), target);
  }

  // repeated int32 pool_pads = 5;
  if (this->pool_pads_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pool_pads_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pool_pads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pool_pads(i), target);
  }

  // repeated int32 pool_strides = 6;
  if (this->pool_strides_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pool_strides_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pool_strides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pool_strides(i), target);
  }

  // optional string pool_mode = 7;
  if (this->pool_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool_mode().data(), this->pool_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.pool_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pool_mode(), target);
  }

  // optional string activation_type = 8;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->activation_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Pooling)
  return target;
}

int Pooling::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Pooling)
  int total_size = 0;

  // optional int32 num_dims = 1;
  if (this->num_dims() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_dims());
  }

  // optional int32 num_channels = 2;
  if (this->num_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_channels());
  }

  // optional string pool_mode = 7;
  if (this->pool_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pool_mode());
  }

  // optional string activation_type = 8;
  if (this->activation_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // repeated int32 input_dims = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->input_dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_dims_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 pool_dims = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pool_dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pool_dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pool_dims_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 pool_pads = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pool_pads_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pool_pads(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pool_pads_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 pool_strides = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->pool_strides_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pool_strides(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pool_strides_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pooling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Pooling)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pooling* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pooling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Pooling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Pooling)
    MergeFrom(*source);
  }
}

void Pooling::MergeFrom(const Pooling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Pooling)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  input_dims_.MergeFrom(from.input_dims_);
  pool_dims_.MergeFrom(from.pool_dims_);
  pool_pads_.MergeFrom(from.pool_pads_);
  pool_strides_.MergeFrom(from.pool_strides_);
  if (from.num_dims() != 0) {
    set_num_dims(from.num_dims());
  }
  if (from.num_channels() != 0) {
    set_num_channels(from.num_channels());
  }
  if (from.pool_mode().size() > 0) {

    pool_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_mode_);
  }
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
}

void Pooling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Pooling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pooling::CopyFrom(const Pooling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Pooling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pooling::IsInitialized() const {

  return true;
}

void Pooling::Swap(Pooling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pooling::InternalSwap(Pooling* other) {
  std::swap(num_dims_, other->num_dims_);
  std::swap(num_channels_, other->num_channels_);
  input_dims_.UnsafeArenaSwap(&other->input_dims_);
  pool_dims_.UnsafeArenaSwap(&other->pool_dims_);
  pool_pads_.UnsafeArenaSwap(&other->pool_pads_);
  pool_strides_.UnsafeArenaSwap(&other->pool_strides_);
  pool_mode_.Swap(&other->pool_mode_);
  activation_type_.Swap(&other->activation_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pooling::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pooling_descriptor_;
  metadata.reflection = Pooling_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pooling

// optional int32 num_dims = 1;
void Pooling::clear_num_dims() {
  num_dims_ = 0;
}
 ::google::protobuf::int32 Pooling::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_dims)
  return num_dims_;
}
 void Pooling::set_num_dims(::google::protobuf::int32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_dims)
}

// optional int32 num_channels = 2;
void Pooling::clear_num_channels() {
  num_channels_ = 0;
}
 ::google::protobuf::int32 Pooling::num_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_channels)
  return num_channels_;
}
 void Pooling::set_num_channels(::google::protobuf::int32 value) {
  
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_channels)
}

// repeated int32 input_dims = 3;
int Pooling::input_dims_size() const {
  return input_dims_.size();
}
void Pooling::clear_input_dims() {
  input_dims_.Clear();
}
 ::google::protobuf::int32 Pooling::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.input_dims)
  return input_dims_.Get(index);
}
 void Pooling::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.input_dims)
}
 void Pooling::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.input_dims)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.input_dims)
  return input_dims_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.input_dims)
  return &input_dims_;
}

// repeated int32 pool_dims = 4;
int Pooling::pool_dims_size() const {
  return pool_dims_.size();
}
void Pooling::clear_pool_dims() {
  pool_dims_.Clear();
}
 ::google::protobuf::int32 Pooling::pool_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_dims)
  return pool_dims_.Get(index);
}
 void Pooling::set_pool_dims(int index, ::google::protobuf::int32 value) {
  pool_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_dims)
}
 void Pooling::add_pool_dims(::google::protobuf::int32 value) {
  pool_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_dims)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_dims)
  return pool_dims_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_dims)
  return &pool_dims_;
}

// repeated int32 pool_pads = 5;
int Pooling::pool_pads_size() const {
  return pool_pads_.size();
}
void Pooling::clear_pool_pads() {
  pool_pads_.Clear();
}
 ::google::protobuf::int32 Pooling::pool_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_pads)
  return pool_pads_.Get(index);
}
 void Pooling::set_pool_pads(int index, ::google::protobuf::int32 value) {
  pool_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_pads)
}
 void Pooling::add_pool_pads(::google::protobuf::int32 value) {
  pool_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_pads)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_pads)
  return pool_pads_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_pads)
  return &pool_pads_;
}

// repeated int32 pool_strides = 6;
int Pooling::pool_strides_size() const {
  return pool_strides_.size();
}
void Pooling::clear_pool_strides() {
  pool_strides_.Clear();
}
 ::google::protobuf::int32 Pooling::pool_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_strides)
  return pool_strides_.Get(index);
}
 void Pooling::set_pool_strides(int index, ::google::protobuf::int32 value) {
  pool_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_strides)
}
 void Pooling::add_pool_strides(::google::protobuf::int32 value) {
  pool_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_strides)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_strides)
  return pool_strides_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_strides)
  return &pool_strides_;
}

// optional string pool_mode = 7;
void Pooling::clear_pool_mode() {
  pool_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Pooling::pool_mode() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_mode)
  return pool_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pooling::set_pool_mode(const ::std::string& value) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_mode)
}
 void Pooling::set_pool_mode(const char* value) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Pooling.pool_mode)
}
 void Pooling::set_pool_mode(const char* value, size_t size) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Pooling.pool_mode)
}
 ::std::string* Pooling::mutable_pool_mode() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Pooling.pool_mode)
  return pool_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Pooling::release_pool_mode() {
  // @@protoc_insertion_point(field_release:lbann_data.Pooling.pool_mode)
  
  return pool_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pooling::set_allocated_pool_mode(::std::string* pool_mode) {
  if (pool_mode != NULL) {
    
  } else {
    
  }
  pool_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_mode);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Pooling.pool_mode)
}

// optional string activation_type = 8;
void Pooling::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Pooling::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.activation_type)
  return activation_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pooling::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.activation_type)
}
 void Pooling::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Pooling.activation_type)
}
 void Pooling::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Pooling.activation_type)
}
 ::std::string* Pooling::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Pooling.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Pooling::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Pooling.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Pooling::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Pooling.activation_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Convolution::kNumDimsFieldNumber;
const int Convolution::kNumInputChannelsFieldNumber;
const int Convolution::kInputDimsFieldNumber;
const int Convolution::kNumOutputChannelsFieldNumber;
const int Convolution::kFilterDimsFieldNumber;
const int Convolution::kConvPadsFieldNumber;
const int Convolution::kConvStridesFieldNumber;
const int Convolution::kMiniBatchSizeFieldNumber;
const int Convolution::kWeightInitializationFieldNumber;
const int Convolution::kActivationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Convolution::Convolution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Convolution)
}

void Convolution::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Convolution::Convolution(const Convolution& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Convolution)
}

void Convolution::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_dims_ = 0u;
  num_input_channels_ = 0u;
  num_output_channels_ = 0u;
  mini_batch_size_ = 0u;
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Convolution::~Convolution() {
  // @@protoc_insertion_point(destructor:lbann_data.Convolution)
  SharedDtor();
}

void Convolution::SharedDtor() {
  weight_initialization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Convolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Convolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Convolution_descriptor_;
}

const Convolution& Convolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

Convolution* Convolution::default_instance_ = NULL;

Convolution* Convolution::New(::google::protobuf::Arena* arena) const {
  Convolution* n = new Convolution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Convolution::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Convolution)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Convolution, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Convolution*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_dims_, num_input_channels_);
  ZR_(num_output_channels_, mini_batch_size_);
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  input_dims_.Clear();
  filter_dims_.Clear();
  conv_pads_.Clear();
  conv_strides_.Clear();
}

bool Convolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Convolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_dims = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_dims_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_input_channels;
        break;
      }

      // optional uint32 num_input_channels = 2;
      case 2: {
        if (tag == 16) {
         parse_num_input_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_input_channels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input_dims;
        break;
      }

      // repeated uint32 input_dims = 3;
      case 3: {
        if (tag == 26) {
         parse_input_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_input_dims())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_input_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_output_channels;
        break;
      }

      // optional uint32 num_output_channels = 4;
      case 4: {
        if (tag == 32) {
         parse_num_output_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_channels_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filter_dims;
        break;
      }

      // repeated uint32 filter_dims = 5;
      case 5: {
        if (tag == 42) {
         parse_filter_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_filter_dims())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_filter_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_conv_pads;
        break;
      }

      // repeated uint32 conv_pads = 6;
      case 6: {
        if (tag == 50) {
         parse_conv_pads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_conv_pads())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_conv_pads())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_conv_strides;
        break;
      }

      // repeated uint32 conv_strides = 7;
      case 7: {
        if (tag == 58) {
         parse_conv_strides:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_conv_strides())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_conv_strides())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mini_batch_size;
        break;
      }

      // optional uint32 mini_batch_size = 8;
      case 8: {
        if (tag == 64) {
         parse_mini_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mini_batch_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_weight_initialization;
        break;
      }

      // optional string weight_initialization = 9;
      case 9: {
        if (tag == 74) {
         parse_weight_initialization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_initialization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weight_initialization().data(), this->weight_initialization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Convolution.weight_initialization"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_activation_type;
        break;
      }

      // optional string activation_type = 10;
      case 10: {
        if (tag == 82) {
         parse_activation_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Convolution.activation_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Convolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Convolution)
  return false;
#undef DO_
}

void Convolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Convolution)
  // optional uint32 num_dims = 1;
  if (this->num_dims() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_dims(), output);
  }

  // optional uint32 num_input_channels = 2;
  if (this->num_input_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_input_channels(), output);
  }

  // repeated uint32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->input_dims(i), output);
  }

  // optional uint32 num_output_channels = 4;
  if (this->num_output_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_output_channels(), output);
  }

  // repeated uint32 filter_dims = 5;
  if (this->filter_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_filter_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->filter_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->filter_dims(i), output);
  }

  // repeated uint32 conv_pads = 6;
  if (this->conv_pads_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_conv_pads_cached_byte_size_);
  }
  for (int i = 0; i < this->conv_pads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->conv_pads(i), output);
  }

  // repeated uint32 conv_strides = 7;
  if (this->conv_strides_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_conv_strides_cached_byte_size_);
  }
  for (int i = 0; i < this->conv_strides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->conv_strides(i), output);
  }

  // optional uint32 mini_batch_size = 8;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mini_batch_size(), output);
  }

  // optional string weight_initialization = 9;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.weight_initialization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->weight_initialization(), output);
  }

  // optional string activation_type = 10;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->activation_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Convolution)
}

::google::protobuf::uint8* Convolution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Convolution)
  // optional uint32 num_dims = 1;
  if (this->num_dims() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_dims(), target);
  }

  // optional uint32 num_input_channels = 2;
  if (this->num_input_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_input_channels(), target);
  }

  // repeated uint32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->input_dims(i), target);
  }

  // optional uint32 num_output_channels = 4;
  if (this->num_output_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_output_channels(), target);
  }

  // repeated uint32 filter_dims = 5;
  if (this->filter_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _filter_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->filter_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->filter_dims(i), target);
  }

  // repeated uint32 conv_pads = 6;
  if (this->conv_pads_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _conv_pads_cached_byte_size_, target);
  }
  for (int i = 0; i < this->conv_pads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->conv_pads(i), target);
  }

  // repeated uint32 conv_strides = 7;
  if (this->conv_strides_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _conv_strides_cached_byte_size_, target);
  }
  for (int i = 0; i < this->conv_strides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->conv_strides(i), target);
  }

  // optional uint32 mini_batch_size = 8;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mini_batch_size(), target);
  }

  // optional string weight_initialization = 9;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.weight_initialization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->weight_initialization(), target);
  }

  // optional string activation_type = 10;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->activation_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Convolution)
  return target;
}

int Convolution::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Convolution)
  int total_size = 0;

  // optional uint32 num_dims = 1;
  if (this->num_dims() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_dims());
  }

  // optional uint32 num_input_channels = 2;
  if (this->num_input_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_input_channels());
  }

  // optional uint32 num_output_channels = 4;
  if (this->num_output_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_output_channels());
  }

  // optional uint32 mini_batch_size = 8;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mini_batch_size());
  }

  // optional string weight_initialization = 9;
  if (this->weight_initialization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight_initialization());
  }

  // optional string activation_type = 10;
  if (this->activation_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // repeated uint32 input_dims = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->input_dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->input_dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_dims_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 filter_dims = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->filter_dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->filter_dims(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _filter_dims_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 conv_pads = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->conv_pads_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->conv_pads(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _conv_pads_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 conv_strides = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->conv_strides_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->conv_strides(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _conv_strides_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Convolution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Convolution)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Convolution* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Convolution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Convolution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Convolution)
    MergeFrom(*source);
  }
}

void Convolution::MergeFrom(const Convolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Convolution)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  input_dims_.MergeFrom(from.input_dims_);
  filter_dims_.MergeFrom(from.filter_dims_);
  conv_pads_.MergeFrom(from.conv_pads_);
  conv_strides_.MergeFrom(from.conv_strides_);
  if (from.num_dims() != 0) {
    set_num_dims(from.num_dims());
  }
  if (from.num_input_channels() != 0) {
    set_num_input_channels(from.num_input_channels());
  }
  if (from.num_output_channels() != 0) {
    set_num_output_channels(from.num_output_channels());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
  if (from.weight_initialization().size() > 0) {

    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
}

void Convolution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Convolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Convolution::CopyFrom(const Convolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Convolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Convolution::IsInitialized() const {

  return true;
}

void Convolution::Swap(Convolution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Convolution::InternalSwap(Convolution* other) {
  std::swap(num_dims_, other->num_dims_);
  std::swap(num_input_channels_, other->num_input_channels_);
  input_dims_.UnsafeArenaSwap(&other->input_dims_);
  std::swap(num_output_channels_, other->num_output_channels_);
  filter_dims_.UnsafeArenaSwap(&other->filter_dims_);
  conv_pads_.UnsafeArenaSwap(&other->conv_pads_);
  conv_strides_.UnsafeArenaSwap(&other->conv_strides_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  weight_initialization_.Swap(&other->weight_initialization_);
  activation_type_.Swap(&other->activation_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Convolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Convolution_descriptor_;
  metadata.reflection = Convolution_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Convolution

// optional uint32 num_dims = 1;
void Convolution::clear_num_dims() {
  num_dims_ = 0u;
}
 ::google::protobuf::uint32 Convolution::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_dims)
  return num_dims_;
}
 void Convolution::set_num_dims(::google::protobuf::uint32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_dims)
}

// optional uint32 num_input_channels = 2;
void Convolution::clear_num_input_channels() {
  num_input_channels_ = 0u;
}
 ::google::protobuf::uint32 Convolution::num_input_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_input_channels)
  return num_input_channels_;
}
 void Convolution::set_num_input_channels(::google::protobuf::uint32 value) {
  
  num_input_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_input_channels)
}

// repeated uint32 input_dims = 3;
int Convolution::input_dims_size() const {
  return input_dims_.size();
}
void Convolution::clear_input_dims() {
  input_dims_.Clear();
}
 ::google::protobuf::uint32 Convolution::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.input_dims)
  return input_dims_.Get(index);
}
 void Convolution::set_input_dims(int index, ::google::protobuf::uint32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.input_dims)
}
 void Convolution::add_input_dims(::google::protobuf::uint32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.input_dims)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.input_dims)
  return input_dims_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.input_dims)
  return &input_dims_;
}

// optional uint32 num_output_channels = 4;
void Convolution::clear_num_output_channels() {
  num_output_channels_ = 0u;
}
 ::google::protobuf::uint32 Convolution::num_output_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_output_channels)
  return num_output_channels_;
}
 void Convolution::set_num_output_channels(::google::protobuf::uint32 value) {
  
  num_output_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_output_channels)
}

// repeated uint32 filter_dims = 5;
int Convolution::filter_dims_size() const {
  return filter_dims_.size();
}
void Convolution::clear_filter_dims() {
  filter_dims_.Clear();
}
 ::google::protobuf::uint32 Convolution::filter_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.filter_dims)
  return filter_dims_.Get(index);
}
 void Convolution::set_filter_dims(int index, ::google::protobuf::uint32 value) {
  filter_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.filter_dims)
}
 void Convolution::add_filter_dims(::google::protobuf::uint32 value) {
  filter_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.filter_dims)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::filter_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.filter_dims)
  return filter_dims_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_filter_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.filter_dims)
  return &filter_dims_;
}

// repeated uint32 conv_pads = 6;
int Convolution::conv_pads_size() const {
  return conv_pads_.size();
}
void Convolution::clear_conv_pads() {
  conv_pads_.Clear();
}
 ::google::protobuf::uint32 Convolution::conv_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_pads)
  return conv_pads_.Get(index);
}
 void Convolution::set_conv_pads(int index, ::google::protobuf::uint32 value) {
  conv_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_pads)
}
 void Convolution::add_conv_pads(::google::protobuf::uint32 value) {
  conv_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_pads)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::conv_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_pads)
  return conv_pads_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_conv_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_pads)
  return &conv_pads_;
}

// repeated uint32 conv_strides = 7;
int Convolution::conv_strides_size() const {
  return conv_strides_.size();
}
void Convolution::clear_conv_strides() {
  conv_strides_.Clear();
}
 ::google::protobuf::uint32 Convolution::conv_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_strides)
  return conv_strides_.Get(index);
}
 void Convolution::set_conv_strides(int index, ::google::protobuf::uint32 value) {
  conv_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_strides)
}
 void Convolution::add_conv_strides(::google::protobuf::uint32 value) {
  conv_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_strides)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::conv_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_strides)
  return conv_strides_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_conv_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_strides)
  return &conv_strides_;
}

// optional uint32 mini_batch_size = 8;
void Convolution::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
}
 ::google::protobuf::uint32 Convolution::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.mini_batch_size)
  return mini_batch_size_;
}
 void Convolution::set_mini_batch_size(::google::protobuf::uint32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.mini_batch_size)
}

// optional string weight_initialization = 9;
void Convolution::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Convolution::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.weight_initialization)
  return weight_initialization_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Convolution::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.weight_initialization)
}
 void Convolution::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Convolution.weight_initialization)
}
 void Convolution::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Convolution.weight_initialization)
}
 ::std::string* Convolution::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Convolution.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Convolution::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.Convolution.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Convolution::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Convolution.weight_initialization)
}

// optional string activation_type = 10;
void Convolution::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Convolution::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.activation_type)
  return activation_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Convolution::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.activation_type)
}
 void Convolution::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Convolution.activation_type)
}
 void Convolution::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Convolution.activation_type)
}
 ::std::string* Convolution::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Convolution.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Convolution::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Convolution.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Convolution::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Convolution.activation_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Softmax::kNumPrevNeuronsFieldNumber;
const int Softmax::kNumNeuronsFieldNumber;
const int Softmax::kWeightInitializationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Softmax::Softmax()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Softmax)
}

void Softmax::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Softmax::Softmax(const Softmax& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Softmax)
}

void Softmax::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  num_prev_neurons_ = 0u;
  num_neurons_ = 0u;
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Softmax::~Softmax() {
  // @@protoc_insertion_point(destructor:lbann_data.Softmax)
  SharedDtor();
}

void Softmax::SharedDtor() {
  weight_initialization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Softmax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Softmax::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Softmax_descriptor_;
}

const Softmax& Softmax::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

Softmax* Softmax::default_instance_ = NULL;

Softmax* Softmax::New(::google::protobuf::Arena* arena) const {
  Softmax* n = new Softmax;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Softmax::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Softmax)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Softmax, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Softmax*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_prev_neurons_, num_neurons_);
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Softmax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Softmax)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_prev_neurons = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_prev_neurons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_neurons;
        break;
      }

      // optional uint32 num_neurons = 2;
      case 2: {
        if (tag == 16) {
         parse_num_neurons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_neurons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight_initialization;
        break;
      }

      // optional string weight_initialization = 3;
      case 3: {
        if (tag == 26) {
         parse_weight_initialization:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_initialization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weight_initialization().data(), this->weight_initialization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Softmax.weight_initialization"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Softmax)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Softmax)
  return false;
#undef DO_
}

void Softmax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Softmax)
  // optional uint32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_prev_neurons(), output);
  }

  // optional uint32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_neurons(), output);
  }

  // optional string weight_initialization = 3;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Softmax.weight_initialization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->weight_initialization(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Softmax)
}

::google::protobuf::uint8* Softmax::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Softmax)
  // optional uint32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_prev_neurons(), target);
  }

  // optional uint32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_neurons(), target);
  }

  // optional string weight_initialization = 3;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Softmax.weight_initialization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight_initialization(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Softmax)
  return target;
}

int Softmax::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Softmax)
  int total_size = 0;

  // optional uint32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_prev_neurons());
  }

  // optional uint32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_neurons());
  }

  // optional string weight_initialization = 3;
  if (this->weight_initialization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight_initialization());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Softmax::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Softmax)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Softmax* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Softmax>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Softmax)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Softmax)
    MergeFrom(*source);
  }
}

void Softmax::MergeFrom(const Softmax& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Softmax)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.num_prev_neurons() != 0) {
    set_num_prev_neurons(from.num_prev_neurons());
  }
  if (from.num_neurons() != 0) {
    set_num_neurons(from.num_neurons());
  }
  if (from.weight_initialization().size() > 0) {

    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
}

void Softmax::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Softmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Softmax::CopyFrom(const Softmax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Softmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Softmax::IsInitialized() const {

  return true;
}

void Softmax::Swap(Softmax* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Softmax::InternalSwap(Softmax* other) {
  std::swap(num_prev_neurons_, other->num_prev_neurons_);
  std::swap(num_neurons_, other->num_neurons_);
  weight_initialization_.Swap(&other->weight_initialization_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Softmax::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Softmax_descriptor_;
  metadata.reflection = Softmax_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Softmax

// optional uint32 num_prev_neurons = 1;
void Softmax::clear_num_prev_neurons() {
  num_prev_neurons_ = 0u;
}
 ::google::protobuf::uint32 Softmax::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_prev_neurons)
  return num_prev_neurons_;
}
 void Softmax::set_num_prev_neurons(::google::protobuf::uint32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_prev_neurons)
}

// optional uint32 num_neurons = 2;
void Softmax::clear_num_neurons() {
  num_neurons_ = 0u;
}
 ::google::protobuf::uint32 Softmax::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_neurons)
  return num_neurons_;
}
 void Softmax::set_num_neurons(::google::protobuf::uint32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_neurons)
}

// optional string weight_initialization = 3;
void Softmax::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Softmax::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.weight_initialization)
  return weight_initialization_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Softmax::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.weight_initialization)
}
 void Softmax::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Softmax.weight_initialization)
}
 void Softmax::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Softmax.weight_initialization)
}
 ::std::string* Softmax::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Softmax.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Softmax::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.Softmax.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Softmax::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Softmax.weight_initialization)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Target::Target()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Target)
}

void Target::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Target::Target(const Target& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Target)
}

void Target::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:lbann_data.Target)
  SharedDtor();
}

void Target::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Target_descriptor_;
}

const Target& Target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

Target* Target::default_instance_ = NULL;

Target* Target::New(::google::protobuf::Arena* arena) const {
  Target* n = new Target;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Target)
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Target)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Target)
  return false;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Target)
  // @@protoc_insertion_point(serialize_end:lbann_data.Target)
}

::google::protobuf::uint8* Target::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Target)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Target)
  return target;
}

int Target::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Target)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Target)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Target* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Target>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Target)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Target)
    MergeFrom(*source);
  }
}

void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Target)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Target::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {

  return true;
}

void Target::Swap(Target* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Target::InternalSwap(Target* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Target_descriptor_;
  metadata.reflection = Target_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Target

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetParallel::TargetParallel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.TargetParallel)
}

void TargetParallel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TargetParallel::TargetParallel(const TargetParallel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.TargetParallel)
}

void TargetParallel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TargetParallel::~TargetParallel() {
  // @@protoc_insertion_point(destructor:lbann_data.TargetParallel)
  SharedDtor();
}

void TargetParallel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetParallel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetParallel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetParallel_descriptor_;
}

const TargetParallel& TargetParallel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

TargetParallel* TargetParallel::default_instance_ = NULL;

TargetParallel* TargetParallel::New(::google::protobuf::Arena* arena) const {
  TargetParallel* n = new TargetParallel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetParallel::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.TargetParallel)
}

bool TargetParallel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.TargetParallel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.TargetParallel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.TargetParallel)
  return false;
#undef DO_
}

void TargetParallel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.TargetParallel)
  // @@protoc_insertion_point(serialize_end:lbann_data.TargetParallel)
}

::google::protobuf::uint8* TargetParallel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.TargetParallel)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.TargetParallel)
  return target;
}

int TargetParallel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.TargetParallel)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetParallel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.TargetParallel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetParallel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetParallel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.TargetParallel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.TargetParallel)
    MergeFrom(*source);
  }
}

void TargetParallel::MergeFrom(const TargetParallel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.TargetParallel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TargetParallel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.TargetParallel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetParallel::CopyFrom(const TargetParallel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.TargetParallel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParallel::IsInitialized() const {

  return true;
}

void TargetParallel::Swap(TargetParallel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetParallel::InternalSwap(TargetParallel* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetParallel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetParallel_descriptor_;
  metadata.reflection = TargetParallel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetParallel

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetDistributedMinibatch::TargetDistributedMinibatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.TargetDistributedMinibatch)
}

void TargetDistributedMinibatch::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TargetDistributedMinibatch::TargetDistributedMinibatch(const TargetDistributedMinibatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann_data.TargetDistributedMinibatch)
}

void TargetDistributedMinibatch::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TargetDistributedMinibatch::~TargetDistributedMinibatch() {
  // @@protoc_insertion_point(destructor:lbann_data.TargetDistributedMinibatch)
  SharedDtor();
}

void TargetDistributedMinibatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetDistributedMinibatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetDistributedMinibatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetDistributedMinibatch_descriptor_;
}

const TargetDistributedMinibatch& TargetDistributedMinibatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

TargetDistributedMinibatch* TargetDistributedMinibatch::default_instance_ = NULL;

TargetDistributedMinibatch* TargetDistributedMinibatch::New(::google::protobuf::Arena* arena) const {
  TargetDistributedMinibatch* n = new TargetDistributedMinibatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetDistributedMinibatch::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.TargetDistributedMinibatch)
}

bool TargetDistributedMinibatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.TargetDistributedMinibatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.TargetDistributedMinibatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.TargetDistributedMinibatch)
  return false;
#undef DO_
}

void TargetDistributedMinibatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.TargetDistributedMinibatch)
  // @@protoc_insertion_point(serialize_end:lbann_data.TargetDistributedMinibatch)
}

::google::protobuf::uint8* TargetDistributedMinibatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.TargetDistributedMinibatch)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.TargetDistributedMinibatch)
  return target;
}

int TargetDistributedMinibatch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.TargetDistributedMinibatch)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetDistributedMinibatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.TargetDistributedMinibatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetDistributedMinibatch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetDistributedMinibatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.TargetDistributedMinibatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.TargetDistributedMinibatch)
    MergeFrom(*source);
  }
}

void TargetDistributedMinibatch::MergeFrom(const TargetDistributedMinibatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.TargetDistributedMinibatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TargetDistributedMinibatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.TargetDistributedMinibatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDistributedMinibatch::CopyFrom(const TargetDistributedMinibatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.TargetDistributedMinibatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDistributedMinibatch::IsInitialized() const {

  return true;
}

void TargetDistributedMinibatch::Swap(TargetDistributedMinibatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetDistributedMinibatch::InternalSwap(TargetDistributedMinibatch* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetDistributedMinibatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetDistributedMinibatch_descriptor_;
  metadata.reflection = TargetDistributedMinibatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetDistributedMinibatch

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lbann_data

// @@protoc_insertion_point(global_scope)
