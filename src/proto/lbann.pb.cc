// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbann.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../../include/lbann/proto/lbann.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbann_data {
class LbannPBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LbannPB> {
} _LbannPB_default_instance_;
class DataReaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataReader> {
} _DataReader_default_instance_;
class DataReaderMnistDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataReaderMnist> {
} _DataReaderMnist_default_instance_;
class DataReaderCifar10DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataReaderCifar10> {
} _DataReaderCifar10_default_instance_;
class DataReaderImagenetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataReaderImagenet> {
} _DataReaderImagenet_default_instance_;
class DataReaderNciDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataReaderNci> {
} _DataReaderNci_default_instance_;
class DataReaderNciRegressionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataReaderNciRegression> {
} _DataReaderNciRegression_default_instance_;
class ModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Model> {
} _Model_default_instance_;
class OptimizerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Optimizer> {
} _Optimizer_default_instance_;
class LayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Layer> {
} _Layer_default_instance_;
class InputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Input> {
} _Input_default_instance_;
class InputDistributedMiniBatchParallelIODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InputDistributedMiniBatchParallelIO> {
} _InputDistributedMiniBatchParallelIO_default_instance_;
class InputDistributedMiniBatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InputDistributedMiniBatch> {
} _InputDistributedMiniBatch_default_instance_;
class FullyConnectedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FullyConnected> {
} _FullyConnected_default_instance_;
class PoolingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pooling> {
} _Pooling_default_instance_;
class ConvolutionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Convolution> {
} _Convolution_default_instance_;
class SoftmaxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Softmax> {
} _Softmax_default_instance_;
class TargetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Target> {
} _Target_default_instance_;
class TargetParallelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TargetParallel> {
} _TargetParallel_default_instance_;
class TargetDistributedMinibatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TargetDistributedMinibatch> {
} _TargetDistributedMinibatch_default_instance_;
class TargetDistributedMinibatchParallelIODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TargetDistributedMinibatchParallelIO> {
} _TargetDistributedMinibatchParallelIO_default_instance_;
class SystemParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemParams> {
} _SystemParams_default_instance_;
class NetworkParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkParams> {
} _NetworkParams_default_instance_;
class PerformanceParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PerformanceParams> {
} _PerformanceParams_default_instance_;
class TrainingParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrainingParams> {
} _TrainingParams_default_instance_;

namespace protobuf_lbann_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[25];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, data_reader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, performance_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, system_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, network_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, training_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, has_cudnn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, optimizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, objective_fn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannPB, mini_batch_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, mnist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, cifar10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, imagenet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, nci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReader, nci_regression_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, shuffle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, file_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, image_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, label_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderMnist, percent_samples_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderCifar10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderImagenet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderNci, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReaderNciRegression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, objective_function_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, mini_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, num_epochs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, optimizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, callback_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, learn_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, nesterov_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, input_distributed_minibatch_parallel_io_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, input_distributed_minibatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, fully_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, pooling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, convolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, softmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, target_parallel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, target_distributed_minibatch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, target_distributed_minibatch_parallel_io_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Input, mini_batch_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatchParallelIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatchParallelIO, num_parallel_readers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatchParallelIO, mini_batch_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDistributedMiniBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, num_prev_neurons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, num_neurons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, mini_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, activation_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, weight_initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, optimizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnected, regularizer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, num_dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, num_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, input_dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_pads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_strides_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, pool_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pooling, activation_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, num_dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, num_input_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, input_dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, num_output_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, filter_dims_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, conv_pads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, conv_strides_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, mini_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, weight_initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Convolution, activation_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, num_prev_neurons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, num_neurons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, weight_initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Softmax, activation_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Target, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParallel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatchParallelIO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatchParallelIO, num_parallel_readers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatchParallelIO, mini_batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatchParallelIO, shared_data_reader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetDistributedMinibatchParallelIO, for_regression_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParams, host_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParams, num_nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParams, num_cores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemParams, tasks_per_node_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkParams, network_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceParams, block_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerformanceParams, max_par_io_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, enable_profiling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, shuffle_training_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, percentage_training_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, percentage_validation_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, percentage_testing_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, test_with_train_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, epoch_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, epoch_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, mb_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, learn_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, learn_rate_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, lr_decay_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, lr_decay_cycles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, lr_momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, activation_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, lambda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, weight_initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, dataset_root_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, save_image_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, parameter_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, save_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, load_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, ckpt_epochs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, ckpt_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, ckpt_secs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, train_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, test_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, summary_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, dump_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, dump_activations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, dump_gradients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, dump_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, intermodel_comm_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainingParams, procs_per_model_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LbannPB)},
  { 14, -1, sizeof(DataReader)},
  { 23, -1, sizeof(DataReaderMnist)},
  { 34, -1, sizeof(DataReaderCifar10)},
  { 38, -1, sizeof(DataReaderImagenet)},
  { 42, -1, sizeof(DataReaderNci)},
  { 46, -1, sizeof(DataReaderNciRegression)},
  { 50, -1, sizeof(Model)},
  { 62, -1, sizeof(Optimizer)},
  { 71, -1, sizeof(Layer)},
  { 87, -1, sizeof(Input)},
  { 92, -1, sizeof(InputDistributedMiniBatchParallelIO)},
  { 98, -1, sizeof(InputDistributedMiniBatch)},
  { 102, -1, sizeof(FullyConnected)},
  { 113, -1, sizeof(Pooling)},
  { 125, -1, sizeof(Convolution)},
  { 139, -1, sizeof(Softmax)},
  { 147, -1, sizeof(Target)},
  { 151, -1, sizeof(TargetParallel)},
  { 155, -1, sizeof(TargetDistributedMinibatch)},
  { 159, -1, sizeof(TargetDistributedMinibatchParallelIO)},
  { 167, -1, sizeof(SystemParams)},
  { 175, -1, sizeof(NetworkParams)},
  { 180, -1, sizeof(PerformanceParams)},
  { 186, -1, sizeof(TrainingParams)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LbannPB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataReader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataReaderMnist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataReaderCifar10_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataReaderImagenet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataReaderNci_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataReaderNciRegression_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Model_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Optimizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Layer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Input_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputDistributedMiniBatchParallelIO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InputDistributedMiniBatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FullyConnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pooling_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Convolution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Softmax_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Target_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetParallel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetDistributedMinibatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TargetDistributedMinibatchParallelIO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SystemParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetworkParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerformanceParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrainingParams_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lbann.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

}  // namespace

void TableStruct::Shutdown() {
  _LbannPB_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DataReader_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DataReaderMnist_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DataReaderCifar10_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DataReaderImagenet_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DataReaderNci_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DataReaderNciRegression_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Model_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Optimizer_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Layer_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Input_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _InputDistributedMiniBatchParallelIO_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _InputDistributedMiniBatch_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _FullyConnected_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Pooling_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Convolution_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Softmax_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Target_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _TargetParallel_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _TargetDistributedMinibatch_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _TargetDistributedMinibatchParallelIO_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SystemParams_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _NetworkParams_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _PerformanceParams_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _TrainingParams_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LbannPB_default_instance_.DefaultConstruct();
  _DataReader_default_instance_.DefaultConstruct();
  _DataReaderMnist_default_instance_.DefaultConstruct();
  _DataReaderCifar10_default_instance_.DefaultConstruct();
  _DataReaderImagenet_default_instance_.DefaultConstruct();
  _DataReaderNci_default_instance_.DefaultConstruct();
  _DataReaderNciRegression_default_instance_.DefaultConstruct();
  _Model_default_instance_.DefaultConstruct();
  _Optimizer_default_instance_.DefaultConstruct();
  _Layer_default_instance_.DefaultConstruct();
  _Input_default_instance_.DefaultConstruct();
  _InputDistributedMiniBatchParallelIO_default_instance_.DefaultConstruct();
  _InputDistributedMiniBatch_default_instance_.DefaultConstruct();
  _FullyConnected_default_instance_.DefaultConstruct();
  _Pooling_default_instance_.DefaultConstruct();
  _Convolution_default_instance_.DefaultConstruct();
  _Softmax_default_instance_.DefaultConstruct();
  _Target_default_instance_.DefaultConstruct();
  _TargetParallel_default_instance_.DefaultConstruct();
  _TargetDistributedMinibatch_default_instance_.DefaultConstruct();
  _TargetDistributedMinibatchParallelIO_default_instance_.DefaultConstruct();
  _SystemParams_default_instance_.DefaultConstruct();
  _NetworkParams_default_instance_.DefaultConstruct();
  _PerformanceParams_default_instance_.DefaultConstruct();
  _TrainingParams_default_instance_.DefaultConstruct();
  _LbannPB_default_instance_.get_mutable()->data_reader_ = const_cast< ::lbann_data::DataReader*>(
      ::lbann_data::DataReader::internal_default_instance());
  _LbannPB_default_instance_.get_mutable()->model_ = const_cast< ::lbann_data::Model*>(
      ::lbann_data::Model::internal_default_instance());
  _LbannPB_default_instance_.get_mutable()->performance_params_ = const_cast< ::lbann_data::PerformanceParams*>(
      ::lbann_data::PerformanceParams::internal_default_instance());
  _LbannPB_default_instance_.get_mutable()->system_params_ = const_cast< ::lbann_data::SystemParams*>(
      ::lbann_data::SystemParams::internal_default_instance());
  _LbannPB_default_instance_.get_mutable()->network_params_ = const_cast< ::lbann_data::NetworkParams*>(
      ::lbann_data::NetworkParams::internal_default_instance());
  _LbannPB_default_instance_.get_mutable()->training_params_ = const_cast< ::lbann_data::TrainingParams*>(
      ::lbann_data::TrainingParams::internal_default_instance());
  _Model_default_instance_.get_mutable()->optimizer_ = const_cast< ::lbann_data::Optimizer*>(
      ::lbann_data::Optimizer::internal_default_instance());
  _Layer_default_instance_.get_mutable()->input_distributed_minibatch_parallel_io_ = const_cast< ::lbann_data::InputDistributedMiniBatchParallelIO*>(
      ::lbann_data::InputDistributedMiniBatchParallelIO::internal_default_instance());
  _Layer_default_instance_.get_mutable()->input_distributed_minibatch_ = const_cast< ::lbann_data::InputDistributedMiniBatch*>(
      ::lbann_data::InputDistributedMiniBatch::internal_default_instance());
  _Layer_default_instance_.get_mutable()->input_ = const_cast< ::lbann_data::Input*>(
      ::lbann_data::Input::internal_default_instance());
  _Layer_default_instance_.get_mutable()->fully_connected_ = const_cast< ::lbann_data::FullyConnected*>(
      ::lbann_data::FullyConnected::internal_default_instance());
  _Layer_default_instance_.get_mutable()->pooling_ = const_cast< ::lbann_data::Pooling*>(
      ::lbann_data::Pooling::internal_default_instance());
  _Layer_default_instance_.get_mutable()->convolution_ = const_cast< ::lbann_data::Convolution*>(
      ::lbann_data::Convolution::internal_default_instance());
  _Layer_default_instance_.get_mutable()->softmax_ = const_cast< ::lbann_data::Softmax*>(
      ::lbann_data::Softmax::internal_default_instance());
  _Layer_default_instance_.get_mutable()->target_ = const_cast< ::lbann_data::Target*>(
      ::lbann_data::Target::internal_default_instance());
  _Layer_default_instance_.get_mutable()->target_parallel_ = const_cast< ::lbann_data::TargetParallel*>(
      ::lbann_data::TargetParallel::internal_default_instance());
  _Layer_default_instance_.get_mutable()->target_distributed_minibatch_ = const_cast< ::lbann_data::TargetDistributedMinibatch*>(
      ::lbann_data::TargetDistributedMinibatch::internal_default_instance());
  _Layer_default_instance_.get_mutable()->target_distributed_minibatch_parallel_io_ = const_cast< ::lbann_data::TargetDistributedMinibatchParallelIO*>(
      ::lbann_data::TargetDistributedMinibatchParallelIO::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013lbann.proto\022\nlbann_data\"\201\003\n\007LbannPB\022+\n"
      "\013data_reader\030\001 \001(\0132\026.lbann_data.DataRead"
      "er\022 \n\005model\030\002 \001(\0132\021.lbann_data.Model\0229\n\022"
      "performance_params\030\003 \001(\0132\035.lbann_data.Pe"
      "rformanceParams\022/\n\rsystem_params\030\004 \001(\0132\030"
      ".lbann_data.SystemParams\0221\n\016network_para"
      "ms\030\005 \001(\0132\031.lbann_data.NetworkParams\0223\n\017t"
      "raining_params\030\006 \001(\0132\032.lbann_data.Traini"
      "ngParams\022\021\n\thas_cudnn\030\007 \001(\010\022\021\n\toptimizer"
      "\030\n \001(\t\022\024\n\014objective_fn\030\013 \001(\t\022\027\n\017mini_bat"
      "ch_size\030\014 \001(\005\"\377\001\n\nDataReader\022*\n\005mnist\030\001 "
      "\003(\0132\033.lbann_data.DataReaderMnist\022.\n\007cifa"
      "r10\030\002 \003(\0132\035.lbann_data.DataReaderCifar10"
      "\0220\n\010imagenet\030\003 \003(\0132\036.lbann_data.DataRead"
      "erImagenet\022&\n\003nci\030\004 \003(\0132\031.lbann_data.Dat"
      "aReaderNci\022;\n\016nci_regression\030\005 \003(\0132#.lba"
      "nn_data.DataReaderNciRegression\"\227\001\n\017Data"
      "ReaderMnist\022\014\n\004role\030\001 \001(\t\022\022\n\nbatch_size\030"
      "\002 \001(\005\022\017\n\007shuffle\030\003 \001(\010\022\020\n\010file_dir\030\004 \001(\t"
      "\022\022\n\nimage_file\030\005 \001(\t\022\022\n\nlabel_file\030\006 \001(\t"
      "\022\027\n\017percent_samples\030\007 \001(\001\"\023\n\021DataReaderC"
      "ifar10\"\024\n\022DataReaderImagenet\"\017\n\rDataRead"
      "erNci\"\031\n\027DataReaderNciRegression\"\314\001\n\005Mod"
      "el\022\014\n\004name\030\001 \001(\t\022\032\n\022objective_function\030\002"
      " \001(\t\022\027\n\017mini_batch_size\030\006 \001(\005\022\022\n\nnum_epo"
      "chs\030\004 \001(\005\022\016\n\006metric\030\005 \003(\t\022 \n\005layer\030\n \003(\013"
      "2\021.lbann_data.Layer\022(\n\toptimizer\030\013 \001(\0132\025"
      ".lbann_data.Optimizer\022\020\n\010callback\030\024 \003(\t\""
      "`\n\tOptimizer\022\014\n\004name\030\001 \001(\t\022\022\n\nlearn_rate"
      "\030\002 \001(\001\022\020\n\010momentum\030\003 \001(\001\022\r\n\005decay\030\004 \001(\001\022"
      "\020\n\010nesterov\030\005 \001(\010\"\240\005\n\005Layer\022\r\n\005index\030\002 \001"
      "(\005\022`\n\'input_distributed_minibatch_parall"
      "el_io\030\010 \001(\0132/.lbann_data.InputDistribute"
      "dMiniBatchParallelIO\022J\n\033input_distribute"
      "d_minibatch\030\t \001(\0132%.lbann_data.InputDist"
      "ributedMiniBatch\022 \n\005input\030\n \001(\0132\021.lbann_"
      "data.Input\0223\n\017fully_connected\030\013 \001(\0132\032.lb"
      "ann_data.FullyConnected\022$\n\007pooling\030\014 \001(\013"
      "2\023.lbann_data.Pooling\022,\n\013convolution\030\r \001"
      "(\0132\027.lbann_data.Convolution\022$\n\007softmax\030\016"
      " \001(\0132\023.lbann_data.Softmax\022\"\n\006target\030\017 \001("
      "\0132\022.lbann_data.Target\0223\n\017target_parallel"
      "\030\020 \001(\0132\032.lbann_data.TargetParallel\022L\n\034ta"
      "rget_distributed_minibatch\030\021 \001(\0132&.lbann"
      "_data.TargetDistributedMinibatch\022b\n(targ"
      "et_distributed_minibatch_parallel_io\030\022 \001"
      "(\01320.lbann_data.TargetDistributedMinibat"
      "chParallelIO\" \n\005Input\022\027\n\017mini_batch_size"
      "\030\001 \001(\005\"\\\n#InputDistributedMiniBatchParal"
      "lelIO\022\034\n\024num_parallel_readers\030\001 \001(\005\022\027\n\017m"
      "ini_batch_size\030\002 \001(\005\"\033\n\031InputDistributed"
      "MiniBatch\"\270\001\n\016FullyConnected\022\030\n\020num_prev"
      "_neurons\030\001 \001(\005\022\023\n\013num_neurons\030\002 \001(\005\022\027\n\017m"
      "ini_batch_size\030\003 \001(\005\022\027\n\017activation_type\030"
      "\004 \001(\t\022\035\n\025weight_initialization\030\005 \001(\t\022\021\n\t"
      "optimizer\030\n \001(\t\022\023\n\013regularizer\030\013 \003(\t\"\255\001\n"
      "\007Pooling\022\020\n\010num_dims\030\001 \001(\005\022\024\n\014num_channe"
      "ls\030\002 \001(\005\022\022\n\ninput_dims\030\003 \003(\005\022\021\n\tpool_dim"
      "s\030\004 \003(\005\022\021\n\tpool_pads\030\005 \003(\005\022\024\n\014pool_strid"
      "es\030\006 \003(\005\022\021\n\tpool_mode\030\007 \001(\t\022\027\n\017activatio"
      "n_type\030\010 \001(\t\"\373\001\n\013Convolution\022\020\n\010num_dims"
      "\030\001 \001(\005\022\032\n\022num_input_channels\030\002 \001(\005\022\022\n\nin"
      "put_dims\030\003 \003(\005\022\033\n\023num_output_channels\030\004 "
      "\001(\005\022\023\n\013filter_dims\030\005 \003(\005\022\021\n\tconv_pads\030\006 "
      "\003(\005\022\024\n\014conv_strides\030\007 \003(\005\022\027\n\017mini_batch_"
      "size\030\010 \001(\005\022\035\n\025weight_initialization\030\t \001("
      "\t\022\027\n\017activation_type\030\n \001(\t\"p\n\007Softmax\022\030\n"
      "\020num_prev_neurons\030\001 \001(\005\022\023\n\013num_neurons\030\002"
      " \001(\005\022\035\n\025weight_initialization\030\003 \001(\t\022\027\n\017a"
      "ctivation_type\030\004 \001(\t\"\010\n\006Target\"\020\n\016Target"
      "Parallel\"\034\n\032TargetDistributedMinibatch\"\221"
      "\001\n$TargetDistributedMinibatchParallelIO\022"
      "\034\n\024num_parallel_readers\030\001 \001(\005\022\027\n\017mini_ba"
      "tch_size\030\002 \001(\005\022\032\n\022shared_data_reader\030\003 \001"
      "(\010\022\026\n\016for_regression\030\004 \001(\010\"_\n\014SystemPara"
      "ms\022\021\n\thost_name\030\001 \001(\t\022\021\n\tnum_nodes\030\002 \001(\005"
      "\022\021\n\tnum_cores\030\003 \001(\005\022\026\n\016tasks_per_node\030\004 "
      "\001(\005\"$\n\rNetworkParams\022\023\n\013network_str\030\001 \001("
      "\t\"@\n\021PerformanceParams\022\022\n\nblock_size\030\001 \001"
      "(\005\022\027\n\017max_par_io_size\030\002 \001(\005\"\360\006\n\016Training"
      "Params\022\030\n\020enable_profiling\030\001 \001(\010\022\023\n\013rand"
      "om_seed\030\002 \001(\005\022\035\n\025shuffle_training_data\030\003"
      " \001(\005\022#\n\033percentage_training_samples\030\004 \001("
      "\001\022%\n\035percentage_validation_samples\030\005 \001(\001"
      "\022\"\n\032percentage_testing_samples\030\006 \001(\001\022\034\n\024"
      "test_with_train_data\030\007 \001(\005\022\023\n\013epoch_star"
      "t\030\010 \001(\005\022\023\n\013epoch_count\030\t \001(\005\022\017\n\007mb_size\030"
      "\n \001(\005\022\022\n\nlearn_rate\030\013 \001(\001\022\031\n\021learn_rate_"
      "method\030\014 \001(\005\022\025\n\rlr_decay_rate\030\r \001(\001\022\027\n\017l"
      "r_decay_cycles\030\016 \001(\005\022\023\n\013lr_momentum\030\017 \001("
      "\001\022\027\n\017activation_type\030\020 \001(\t\022\017\n\007dropout\030\021 "
      "\001(\001\022\016\n\006lambda\030\022 \001(\001\022\035\n\025weight_initializa"
      "tion\030\023 \001(\t\022\030\n\020dataset_root_dir\030\024 \001(\t\022\026\n\016"
      "save_image_dir\030\025 \001(\t\022\025\n\rparameter_dir\030\026 "
      "\001(\t\022\022\n\nsave_model\030\027 \001(\010\022\022\n\nload_model\030\030 "
      "\001(\010\022\023\n\013ckpt_epochs\030\031 \001(\005\022\022\n\nckpt_steps\030\032"
      " \001(\005\022\021\n\tckpt_secs\030\033 \001(\005\022\022\n\ntrain_file\030\034 "
      "\001(\t\022\021\n\ttest_file\030\035 \001(\t\022\023\n\013summary_dir\030\036 "
      "\001(\t\022\024\n\014dump_weights\030\037 \001(\010\022\030\n\020dump_activa"
      "tions\030  \001(\010\022\026\n\016dump_gradients\030! \001(\010\022\020\n\010d"
      "ump_dir\030\" \001(\t\022\036\n\026intermodel_comm_method\030"
      "# \001(\005\022\027\n\017procs_per_model\030$ \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4078);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lbann.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_lbann_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LbannPB::kDataReaderFieldNumber;
const int LbannPB::kModelFieldNumber;
const int LbannPB::kPerformanceParamsFieldNumber;
const int LbannPB::kSystemParamsFieldNumber;
const int LbannPB::kNetworkParamsFieldNumber;
const int LbannPB::kTrainingParamsFieldNumber;
const int LbannPB::kHasCudnnFieldNumber;
const int LbannPB::kOptimizerFieldNumber;
const int LbannPB::kObjectiveFnFieldNumber;
const int LbannPB::kMiniBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LbannPB::LbannPB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.LbannPB)
}
LbannPB::LbannPB(const LbannPB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optimizer().size() > 0) {
    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
  objective_fn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.objective_fn().size() > 0) {
    objective_fn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objective_fn_);
  }
  if (from.has_data_reader()) {
    data_reader_ = new ::lbann_data::DataReader(*from.data_reader_);
  } else {
    data_reader_ = NULL;
  }
  if (from.has_model()) {
    model_ = new ::lbann_data::Model(*from.model_);
  } else {
    model_ = NULL;
  }
  if (from.has_performance_params()) {
    performance_params_ = new ::lbann_data::PerformanceParams(*from.performance_params_);
  } else {
    performance_params_ = NULL;
  }
  if (from.has_system_params()) {
    system_params_ = new ::lbann_data::SystemParams(*from.system_params_);
  } else {
    system_params_ = NULL;
  }
  if (from.has_network_params()) {
    network_params_ = new ::lbann_data::NetworkParams(*from.network_params_);
  } else {
    network_params_ = NULL;
  }
  if (from.has_training_params()) {
    training_params_ = new ::lbann_data::TrainingParams(*from.training_params_);
  } else {
    training_params_ = NULL;
  }
  ::memcpy(&has_cudnn_, &from.has_cudnn_,
    reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&has_cudnn_) + sizeof(mini_batch_size_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.LbannPB)
}

void LbannPB::SharedCtor() {
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_fn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_reader_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&data_reader_) + sizeof(mini_batch_size_));
  _cached_size_ = 0;
}

LbannPB::~LbannPB() {
  // @@protoc_insertion_point(destructor:lbann_data.LbannPB)
  SharedDtor();
}

void LbannPB::SharedDtor() {
  optimizer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_fn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete data_reader_;
  }
  if (this != internal_default_instance()) {
    delete model_;
  }
  if (this != internal_default_instance()) {
    delete performance_params_;
  }
  if (this != internal_default_instance()) {
    delete system_params_;
  }
  if (this != internal_default_instance()) {
    delete network_params_;
  }
  if (this != internal_default_instance()) {
    delete training_params_;
  }
}

void LbannPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LbannPB::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[0].descriptor;
}

const LbannPB& LbannPB::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

LbannPB* LbannPB::New(::google::protobuf::Arena* arena) const {
  LbannPB* n = new LbannPB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LbannPB::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.LbannPB)
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_reader_ != NULL) {
    delete data_reader_;
  }
  data_reader_ = NULL;
  if (GetArenaNoVirtual() == NULL && model_ != NULL) {
    delete model_;
  }
  model_ = NULL;
  if (GetArenaNoVirtual() == NULL && performance_params_ != NULL) {
    delete performance_params_;
  }
  performance_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && system_params_ != NULL) {
    delete system_params_;
  }
  system_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && network_params_ != NULL) {
    delete network_params_;
  }
  network_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && training_params_ != NULL) {
    delete training_params_;
  }
  training_params_ = NULL;
  ::memset(&has_cudnn_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&has_cudnn_) + sizeof(mini_batch_size_));
}

bool LbannPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.LbannPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .lbann_data.DataReader data_reader = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_reader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.Model model = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.PerformanceParams performance_params = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_performance_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.SystemParams system_params = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.NetworkParams network_params = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.TrainingParams training_params = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_training_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_cudnn = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_cudnn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optimizer = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optimizer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizer().data(), this->optimizer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.LbannPB.optimizer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objective_fn = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objective_fn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objective_fn().data(), this->objective_fn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.LbannPB.objective_fn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mini_batch_size = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.LbannPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.LbannPB)
  return false;
#undef DO_
}

void LbannPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.LbannPB)
  // .lbann_data.DataReader data_reader = 1;
  if (this->has_data_reader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_reader_, output);
  }

  // .lbann_data.Model model = 2;
  if (this->has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->model_, output);
  }

  // .lbann_data.PerformanceParams performance_params = 3;
  if (this->has_performance_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->performance_params_, output);
  }

  // .lbann_data.SystemParams system_params = 4;
  if (this->has_system_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->system_params_, output);
  }

  // .lbann_data.NetworkParams network_params = 5;
  if (this->has_network_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->network_params_, output);
  }

  // .lbann_data.TrainingParams training_params = 6;
  if (this->has_training_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->training_params_, output);
  }

  // bool has_cudnn = 7;
  if (this->has_cudnn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_cudnn(), output);
  }

  // string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.optimizer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->optimizer(), output);
  }

  // string objective_fn = 11;
  if (this->objective_fn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_fn().data(), this->objective_fn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.objective_fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->objective_fn(), output);
  }

  // int32 mini_batch_size = 12;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mini_batch_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.LbannPB)
}

::google::protobuf::uint8* LbannPB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.LbannPB)
  // .lbann_data.DataReader data_reader = 1;
  if (this->has_data_reader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_reader_, false, target);
  }

  // .lbann_data.Model model = 2;
  if (this->has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->model_, false, target);
  }

  // .lbann_data.PerformanceParams performance_params = 3;
  if (this->has_performance_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->performance_params_, false, target);
  }

  // .lbann_data.SystemParams system_params = 4;
  if (this->has_system_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->system_params_, false, target);
  }

  // .lbann_data.NetworkParams network_params = 5;
  if (this->has_network_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->network_params_, false, target);
  }

  // .lbann_data.TrainingParams training_params = 6;
  if (this->has_training_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->training_params_, false, target);
  }

  // bool has_cudnn = 7;
  if (this->has_cudnn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_cudnn(), target);
  }

  // string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.optimizer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->optimizer(), target);
  }

  // string objective_fn = 11;
  if (this->objective_fn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_fn().data(), this->objective_fn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.LbannPB.objective_fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->objective_fn(), target);
  }

  // int32 mini_batch_size = 12;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mini_batch_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.LbannPB)
  return target;
}

size_t LbannPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.LbannPB)
  size_t total_size = 0;

  // string optimizer = 10;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optimizer());
  }

  // string objective_fn = 11;
  if (this->objective_fn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objective_fn());
  }

  // .lbann_data.DataReader data_reader = 1;
  if (this->has_data_reader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_reader_);
  }

  // .lbann_data.Model model = 2;
  if (this->has_model()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_);
  }

  // .lbann_data.PerformanceParams performance_params = 3;
  if (this->has_performance_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->performance_params_);
  }

  // .lbann_data.SystemParams system_params = 4;
  if (this->has_system_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->system_params_);
  }

  // .lbann_data.NetworkParams network_params = 5;
  if (this->has_network_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_params_);
  }

  // .lbann_data.TrainingParams training_params = 6;
  if (this->has_training_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->training_params_);
  }

  // bool has_cudnn = 7;
  if (this->has_cudnn() != 0) {
    total_size += 1 + 1;
  }

  // int32 mini_batch_size = 12;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LbannPB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.LbannPB)
  GOOGLE_DCHECK_NE(&from, this);
  const LbannPB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LbannPB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.LbannPB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.LbannPB)
    MergeFrom(*source);
  }
}

void LbannPB::MergeFrom(const LbannPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.LbannPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.optimizer().size() > 0) {

    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
  if (from.objective_fn().size() > 0) {

    objective_fn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objective_fn_);
  }
  if (from.has_data_reader()) {
    mutable_data_reader()->::lbann_data::DataReader::MergeFrom(from.data_reader());
  }
  if (from.has_model()) {
    mutable_model()->::lbann_data::Model::MergeFrom(from.model());
  }
  if (from.has_performance_params()) {
    mutable_performance_params()->::lbann_data::PerformanceParams::MergeFrom(from.performance_params());
  }
  if (from.has_system_params()) {
    mutable_system_params()->::lbann_data::SystemParams::MergeFrom(from.system_params());
  }
  if (from.has_network_params()) {
    mutable_network_params()->::lbann_data::NetworkParams::MergeFrom(from.network_params());
  }
  if (from.has_training_params()) {
    mutable_training_params()->::lbann_data::TrainingParams::MergeFrom(from.training_params());
  }
  if (from.has_cudnn() != 0) {
    set_has_cudnn(from.has_cudnn());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void LbannPB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.LbannPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LbannPB::CopyFrom(const LbannPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.LbannPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LbannPB::IsInitialized() const {
  return true;
}

void LbannPB::Swap(LbannPB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LbannPB::InternalSwap(LbannPB* other) {
  optimizer_.Swap(&other->optimizer_);
  objective_fn_.Swap(&other->objective_fn_);
  std::swap(data_reader_, other->data_reader_);
  std::swap(model_, other->model_);
  std::swap(performance_params_, other->performance_params_);
  std::swap(system_params_, other->system_params_);
  std::swap(network_params_, other->network_params_);
  std::swap(training_params_, other->training_params_);
  std::swap(has_cudnn_, other->has_cudnn_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LbannPB::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LbannPB

// .lbann_data.DataReader data_reader = 1;
bool LbannPB::has_data_reader() const {
  return this != internal_default_instance() && data_reader_ != NULL;
}
void LbannPB::clear_data_reader() {
  if (GetArenaNoVirtual() == NULL && data_reader_ != NULL) delete data_reader_;
  data_reader_ = NULL;
}
const ::lbann_data::DataReader& LbannPB::data_reader() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.data_reader)
  return data_reader_ != NULL ? *data_reader_
                         : *::lbann_data::DataReader::internal_default_instance();
}
::lbann_data::DataReader* LbannPB::mutable_data_reader() {
  
  if (data_reader_ == NULL) {
    data_reader_ = new ::lbann_data::DataReader;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.data_reader)
  return data_reader_;
}
::lbann_data::DataReader* LbannPB::release_data_reader() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.data_reader)
  
  ::lbann_data::DataReader* temp = data_reader_;
  data_reader_ = NULL;
  return temp;
}
void LbannPB::set_allocated_data_reader(::lbann_data::DataReader* data_reader) {
  delete data_reader_;
  data_reader_ = data_reader;
  if (data_reader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.data_reader)
}

// .lbann_data.Model model = 2;
bool LbannPB::has_model() const {
  return this != internal_default_instance() && model_ != NULL;
}
void LbannPB::clear_model() {
  if (GetArenaNoVirtual() == NULL && model_ != NULL) delete model_;
  model_ = NULL;
}
const ::lbann_data::Model& LbannPB::model() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.model)
  return model_ != NULL ? *model_
                         : *::lbann_data::Model::internal_default_instance();
}
::lbann_data::Model* LbannPB::mutable_model() {
  
  if (model_ == NULL) {
    model_ = new ::lbann_data::Model;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.model)
  return model_;
}
::lbann_data::Model* LbannPB::release_model() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.model)
  
  ::lbann_data::Model* temp = model_;
  model_ = NULL;
  return temp;
}
void LbannPB::set_allocated_model(::lbann_data::Model* model) {
  delete model_;
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.model)
}

// .lbann_data.PerformanceParams performance_params = 3;
bool LbannPB::has_performance_params() const {
  return this != internal_default_instance() && performance_params_ != NULL;
}
void LbannPB::clear_performance_params() {
  if (GetArenaNoVirtual() == NULL && performance_params_ != NULL) delete performance_params_;
  performance_params_ = NULL;
}
const ::lbann_data::PerformanceParams& LbannPB::performance_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.performance_params)
  return performance_params_ != NULL ? *performance_params_
                         : *::lbann_data::PerformanceParams::internal_default_instance();
}
::lbann_data::PerformanceParams* LbannPB::mutable_performance_params() {
  
  if (performance_params_ == NULL) {
    performance_params_ = new ::lbann_data::PerformanceParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.performance_params)
  return performance_params_;
}
::lbann_data::PerformanceParams* LbannPB::release_performance_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.performance_params)
  
  ::lbann_data::PerformanceParams* temp = performance_params_;
  performance_params_ = NULL;
  return temp;
}
void LbannPB::set_allocated_performance_params(::lbann_data::PerformanceParams* performance_params) {
  delete performance_params_;
  performance_params_ = performance_params;
  if (performance_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.performance_params)
}

// .lbann_data.SystemParams system_params = 4;
bool LbannPB::has_system_params() const {
  return this != internal_default_instance() && system_params_ != NULL;
}
void LbannPB::clear_system_params() {
  if (GetArenaNoVirtual() == NULL && system_params_ != NULL) delete system_params_;
  system_params_ = NULL;
}
const ::lbann_data::SystemParams& LbannPB::system_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.system_params)
  return system_params_ != NULL ? *system_params_
                         : *::lbann_data::SystemParams::internal_default_instance();
}
::lbann_data::SystemParams* LbannPB::mutable_system_params() {
  
  if (system_params_ == NULL) {
    system_params_ = new ::lbann_data::SystemParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.system_params)
  return system_params_;
}
::lbann_data::SystemParams* LbannPB::release_system_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.system_params)
  
  ::lbann_data::SystemParams* temp = system_params_;
  system_params_ = NULL;
  return temp;
}
void LbannPB::set_allocated_system_params(::lbann_data::SystemParams* system_params) {
  delete system_params_;
  system_params_ = system_params;
  if (system_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.system_params)
}

// .lbann_data.NetworkParams network_params = 5;
bool LbannPB::has_network_params() const {
  return this != internal_default_instance() && network_params_ != NULL;
}
void LbannPB::clear_network_params() {
  if (GetArenaNoVirtual() == NULL && network_params_ != NULL) delete network_params_;
  network_params_ = NULL;
}
const ::lbann_data::NetworkParams& LbannPB::network_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.network_params)
  return network_params_ != NULL ? *network_params_
                         : *::lbann_data::NetworkParams::internal_default_instance();
}
::lbann_data::NetworkParams* LbannPB::mutable_network_params() {
  
  if (network_params_ == NULL) {
    network_params_ = new ::lbann_data::NetworkParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.network_params)
  return network_params_;
}
::lbann_data::NetworkParams* LbannPB::release_network_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.network_params)
  
  ::lbann_data::NetworkParams* temp = network_params_;
  network_params_ = NULL;
  return temp;
}
void LbannPB::set_allocated_network_params(::lbann_data::NetworkParams* network_params) {
  delete network_params_;
  network_params_ = network_params;
  if (network_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.network_params)
}

// .lbann_data.TrainingParams training_params = 6;
bool LbannPB::has_training_params() const {
  return this != internal_default_instance() && training_params_ != NULL;
}
void LbannPB::clear_training_params() {
  if (GetArenaNoVirtual() == NULL && training_params_ != NULL) delete training_params_;
  training_params_ = NULL;
}
const ::lbann_data::TrainingParams& LbannPB::training_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.training_params)
  return training_params_ != NULL ? *training_params_
                         : *::lbann_data::TrainingParams::internal_default_instance();
}
::lbann_data::TrainingParams* LbannPB::mutable_training_params() {
  
  if (training_params_ == NULL) {
    training_params_ = new ::lbann_data::TrainingParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.training_params)
  return training_params_;
}
::lbann_data::TrainingParams* LbannPB::release_training_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.training_params)
  
  ::lbann_data::TrainingParams* temp = training_params_;
  training_params_ = NULL;
  return temp;
}
void LbannPB::set_allocated_training_params(::lbann_data::TrainingParams* training_params) {
  delete training_params_;
  training_params_ = training_params;
  if (training_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.training_params)
}

// bool has_cudnn = 7;
void LbannPB::clear_has_cudnn() {
  has_cudnn_ = false;
}
bool LbannPB::has_cudnn() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.has_cudnn)
  return has_cudnn_;
}
void LbannPB::set_has_cudnn(bool value) {
  
  has_cudnn_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.has_cudnn)
}

// string optimizer = 10;
void LbannPB::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LbannPB::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.optimizer)
  return optimizer_.GetNoArena();
}
void LbannPB::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.optimizer)
}
#if LANG_CXX11
void LbannPB::set_optimizer(::std::string&& value) {
  
  optimizer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.LbannPB.optimizer)
}
#endif
void LbannPB::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.optimizer)
}
void LbannPB::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.optimizer)
}
::std::string* LbannPB::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LbannPB::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LbannPB::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.optimizer)
}

// string objective_fn = 11;
void LbannPB::clear_objective_fn() {
  objective_fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LbannPB::objective_fn() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.objective_fn)
  return objective_fn_.GetNoArena();
}
void LbannPB::set_objective_fn(const ::std::string& value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.objective_fn)
}
#if LANG_CXX11
void LbannPB::set_objective_fn(::std::string&& value) {
  
  objective_fn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.LbannPB.objective_fn)
}
#endif
void LbannPB::set_objective_fn(const char* value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.objective_fn)
}
void LbannPB::set_objective_fn(const char* value, size_t size) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.objective_fn)
}
::std::string* LbannPB::mutable_objective_fn() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.objective_fn)
  return objective_fn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LbannPB::release_objective_fn() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.objective_fn)
  
  return objective_fn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LbannPB::set_allocated_objective_fn(::std::string* objective_fn) {
  if (objective_fn != NULL) {
    
  } else {
    
  }
  objective_fn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objective_fn);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.objective_fn)
}

// int32 mini_batch_size = 12;
void LbannPB::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
::google::protobuf::int32 LbannPB::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.mini_batch_size)
  return mini_batch_size_;
}
void LbannPB::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.mini_batch_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataReader::kMnistFieldNumber;
const int DataReader::kCifar10FieldNumber;
const int DataReader::kImagenetFieldNumber;
const int DataReader::kNciFieldNumber;
const int DataReader::kNciRegressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReader::DataReader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReader)
}
DataReader::DataReader(const DataReader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mnist_(from.mnist_),
      cifar10_(from.cifar10_),
      imagenet_(from.imagenet_),
      nci_(from.nci_),
      nci_regression_(from.nci_regression_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReader)
}

void DataReader::SharedCtor() {
  _cached_size_ = 0;
}

DataReader::~DataReader() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReader)
  SharedDtor();
}

void DataReader::SharedDtor() {
}

void DataReader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReader::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[1].descriptor;
}

const DataReader& DataReader::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataReader* DataReader::New(::google::protobuf::Arena* arena) const {
  DataReader* n = new DataReader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReader::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReader)
  mnist_.Clear();
  cifar10_.Clear();
  imagenet_.Clear();
  nci_.Clear();
  nci_regression_.Clear();
}

bool DataReader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbann_data.DataReaderMnist mnist = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mnist()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cifar10()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderImagenet imagenet = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_imagenet()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderNci nci = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nci()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nci_regression()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReader)
  return false;
#undef DO_
}

void DataReader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReader)
  // repeated .lbann_data.DataReaderMnist mnist = 1;
  for (unsigned int i = 0, n = this->mnist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mnist(i), output);
  }

  // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
  for (unsigned int i = 0, n = this->cifar10_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cifar10(i), output);
  }

  // repeated .lbann_data.DataReaderImagenet imagenet = 3;
  for (unsigned int i = 0, n = this->imagenet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imagenet(i), output);
  }

  // repeated .lbann_data.DataReaderNci nci = 4;
  for (unsigned int i = 0, n = this->nci_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nci(i), output);
  }

  // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
  for (unsigned int i = 0, n = this->nci_regression_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nci_regression(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.DataReader)
}

::google::protobuf::uint8* DataReader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReader)
  // repeated .lbann_data.DataReaderMnist mnist = 1;
  for (unsigned int i = 0, n = this->mnist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mnist(i), false, target);
  }

  // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
  for (unsigned int i = 0, n = this->cifar10_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cifar10(i), false, target);
  }

  // repeated .lbann_data.DataReaderImagenet imagenet = 3;
  for (unsigned int i = 0, n = this->imagenet_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->imagenet(i), false, target);
  }

  // repeated .lbann_data.DataReaderNci nci = 4;
  for (unsigned int i = 0, n = this->nci_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->nci(i), false, target);
  }

  // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
  for (unsigned int i = 0, n = this->nci_regression_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->nci_regression(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReader)
  return target;
}

size_t DataReader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReader)
  size_t total_size = 0;

  // repeated .lbann_data.DataReaderMnist mnist = 1;
  {
    unsigned int count = this->mnist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mnist(i));
    }
  }

  // repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
  {
    unsigned int count = this->cifar10_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cifar10(i));
    }
  }

  // repeated .lbann_data.DataReaderImagenet imagenet = 3;
  {
    unsigned int count = this->imagenet_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagenet(i));
    }
  }

  // repeated .lbann_data.DataReaderNci nci = 4;
  {
    unsigned int count = this->nci_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nci(i));
    }
  }

  // repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
  {
    unsigned int count = this->nci_regression_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nci_regression(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReader)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReader)
    MergeFrom(*source);
  }
}

void DataReader::MergeFrom(const DataReader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mnist_.MergeFrom(from.mnist_);
  cifar10_.MergeFrom(from.cifar10_);
  imagenet_.MergeFrom(from.imagenet_);
  nci_.MergeFrom(from.nci_);
  nci_regression_.MergeFrom(from.nci_regression_);
}

void DataReader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReader::CopyFrom(const DataReader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReader::IsInitialized() const {
  return true;
}

void DataReader::Swap(DataReader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReader::InternalSwap(DataReader* other) {
  mnist_.UnsafeArenaSwap(&other->mnist_);
  cifar10_.UnsafeArenaSwap(&other->cifar10_);
  imagenet_.UnsafeArenaSwap(&other->imagenet_);
  nci_.UnsafeArenaSwap(&other->nci_);
  nci_regression_.UnsafeArenaSwap(&other->nci_regression_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReader::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReader

// repeated .lbann_data.DataReaderMnist mnist = 1;
int DataReader::mnist_size() const {
  return mnist_.size();
}
void DataReader::clear_mnist() {
  mnist_.Clear();
}
const ::lbann_data::DataReaderMnist& DataReader::mnist(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.mnist)
  return mnist_.Get(index);
}
::lbann_data::DataReaderMnist* DataReader::mutable_mnist(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.mnist)
  return mnist_.Mutable(index);
}
::lbann_data::DataReaderMnist* DataReader::add_mnist() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.mnist)
  return mnist_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderMnist >*
DataReader::mutable_mnist() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.mnist)
  return &mnist_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderMnist >&
DataReader::mnist() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.mnist)
  return mnist_;
}

// repeated .lbann_data.DataReaderCifar10 cifar10 = 2;
int DataReader::cifar10_size() const {
  return cifar10_.size();
}
void DataReader::clear_cifar10() {
  cifar10_.Clear();
}
const ::lbann_data::DataReaderCifar10& DataReader::cifar10(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.cifar10)
  return cifar10_.Get(index);
}
::lbann_data::DataReaderCifar10* DataReader::mutable_cifar10(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.cifar10)
  return cifar10_.Mutable(index);
}
::lbann_data::DataReaderCifar10* DataReader::add_cifar10() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.cifar10)
  return cifar10_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderCifar10 >*
DataReader::mutable_cifar10() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.cifar10)
  return &cifar10_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderCifar10 >&
DataReader::cifar10() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.cifar10)
  return cifar10_;
}

// repeated .lbann_data.DataReaderImagenet imagenet = 3;
int DataReader::imagenet_size() const {
  return imagenet_.size();
}
void DataReader::clear_imagenet() {
  imagenet_.Clear();
}
const ::lbann_data::DataReaderImagenet& DataReader::imagenet(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.imagenet)
  return imagenet_.Get(index);
}
::lbann_data::DataReaderImagenet* DataReader::mutable_imagenet(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.imagenet)
  return imagenet_.Mutable(index);
}
::lbann_data::DataReaderImagenet* DataReader::add_imagenet() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.imagenet)
  return imagenet_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderImagenet >*
DataReader::mutable_imagenet() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.imagenet)
  return &imagenet_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderImagenet >&
DataReader::imagenet() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.imagenet)
  return imagenet_;
}

// repeated .lbann_data.DataReaderNci nci = 4;
int DataReader::nci_size() const {
  return nci_.size();
}
void DataReader::clear_nci() {
  nci_.Clear();
}
const ::lbann_data::DataReaderNci& DataReader::nci(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.nci)
  return nci_.Get(index);
}
::lbann_data::DataReaderNci* DataReader::mutable_nci(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.nci)
  return nci_.Mutable(index);
}
::lbann_data::DataReaderNci* DataReader::add_nci() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.nci)
  return nci_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNci >*
DataReader::mutable_nci() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.nci)
  return &nci_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNci >&
DataReader::nci() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.nci)
  return nci_;
}

// repeated .lbann_data.DataReaderNciRegression nci_regression = 5;
int DataReader::nci_regression_size() const {
  return nci_regression_.size();
}
void DataReader::clear_nci_regression() {
  nci_regression_.Clear();
}
const ::lbann_data::DataReaderNciRegression& DataReader::nci_regression(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.nci_regression)
  return nci_regression_.Get(index);
}
::lbann_data::DataReaderNciRegression* DataReader::mutable_nci_regression(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.nci_regression)
  return nci_regression_.Mutable(index);
}
::lbann_data::DataReaderNciRegression* DataReader::add_nci_regression() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.nci_regression)
  return nci_regression_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNciRegression >*
DataReader::mutable_nci_regression() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.nci_regression)
  return &nci_regression_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::DataReaderNciRegression >&
DataReader::nci_regression() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.nci_regression)
  return nci_regression_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataReaderMnist::kRoleFieldNumber;
const int DataReaderMnist::kBatchSizeFieldNumber;
const int DataReaderMnist::kShuffleFieldNumber;
const int DataReaderMnist::kFileDirFieldNumber;
const int DataReaderMnist::kImageFileFieldNumber;
const int DataReaderMnist::kLabelFileFieldNumber;
const int DataReaderMnist::kPercentSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderMnist::DataReaderMnist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderMnist)
}
DataReaderMnist::DataReaderMnist(const DataReaderMnist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  file_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_dir().size() > 0) {
    file_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_dir_);
  }
  image_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_file().size() > 0) {
    image_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_file_);
  }
  label_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label_file().size() > 0) {
    label_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_file_);
  }
  ::memcpy(&batch_size_, &from.batch_size_,
    reinterpret_cast<char*>(&percent_samples_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(percent_samples_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderMnist)
}

void DataReaderMnist::SharedCtor() {
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&percent_samples_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(percent_samples_));
  _cached_size_ = 0;
}

DataReaderMnist::~DataReaderMnist() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderMnist)
  SharedDtor();
}

void DataReaderMnist::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataReaderMnist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderMnist::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[2].descriptor;
}

const DataReaderMnist& DataReaderMnist::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataReaderMnist* DataReaderMnist::New(::google::protobuf::Arena* arena) const {
  DataReaderMnist* n = new DataReaderMnist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderMnist::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderMnist)
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_size_, 0, reinterpret_cast<char*>(&percent_samples_) -
    reinterpret_cast<char*>(&batch_size_) + sizeof(percent_samples_));
}

bool DataReaderMnist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderMnist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string role = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batch_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shuffle = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_dir = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_dir().data(), this->file_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.file_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_file = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_file().data(), this->image_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.image_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label_file = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label_file().data(), this->label_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.DataReaderMnist.label_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double percent_samples = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percent_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderMnist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderMnist)
  return false;
#undef DO_
}

void DataReaderMnist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderMnist)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->role(), output);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batch_size(), output);
  }

  // bool shuffle = 3;
  if (this->shuffle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  // string file_dir = 4;
  if (this->file_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_dir().data(), this->file_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.file_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_dir(), output);
  }

  // string image_file = 5;
  if (this->image_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_file().data(), this->image_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.image_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_file(), output);
  }

  // string label_file = 6;
  if (this->label_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_file().data(), this->label_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.label_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->label_file(), output);
  }

  // double percent_samples = 7;
  if (this->percent_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->percent_samples(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderMnist)
}

::google::protobuf::uint8* DataReaderMnist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderMnist)
  // string role = 1;
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role(), target);
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batch_size(), target);
  }

  // bool shuffle = 3;
  if (this->shuffle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  // string file_dir = 4;
  if (this->file_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_dir().data(), this->file_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.file_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_dir(), target);
  }

  // string image_file = 5;
  if (this->image_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_file().data(), this->image_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.image_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_file(), target);
  }

  // string label_file = 6;
  if (this->label_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label_file().data(), this->label_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.DataReaderMnist.label_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->label_file(), target);
  }

  // double percent_samples = 7;
  if (this->percent_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->percent_samples(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderMnist)
  return target;
}

size_t DataReaderMnist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderMnist)
  size_t total_size = 0;

  // string role = 1;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  // string file_dir = 4;
  if (this->file_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_dir());
  }

  // string image_file = 5;
  if (this->image_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_file());
  }

  // string label_file = 6;
  if (this->label_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label_file());
  }

  // int32 batch_size = 2;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batch_size());
  }

  // bool shuffle = 3;
  if (this->shuffle() != 0) {
    total_size += 1 + 1;
  }

  // double percent_samples = 7;
  if (this->percent_samples() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderMnist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderMnist)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReaderMnist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderMnist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderMnist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderMnist)
    MergeFrom(*source);
  }
}

void DataReaderMnist::MergeFrom(const DataReaderMnist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderMnist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.file_dir().size() > 0) {

    file_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_dir_);
  }
  if (from.image_file().size() > 0) {

    image_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_file_);
  }
  if (from.label_file().size() > 0) {

    label_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_file_);
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
  if (from.shuffle() != 0) {
    set_shuffle(from.shuffle());
  }
  if (from.percent_samples() != 0) {
    set_percent_samples(from.percent_samples());
  }
}

void DataReaderMnist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderMnist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderMnist::CopyFrom(const DataReaderMnist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderMnist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderMnist::IsInitialized() const {
  return true;
}

void DataReaderMnist::Swap(DataReaderMnist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderMnist::InternalSwap(DataReaderMnist* other) {
  role_.Swap(&other->role_);
  file_dir_.Swap(&other->file_dir_);
  image_file_.Swap(&other->image_file_);
  label_file_.Swap(&other->label_file_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(shuffle_, other->shuffle_);
  std::swap(percent_samples_, other->percent_samples_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderMnist::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderMnist

// string role = 1;
void DataReaderMnist::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataReaderMnist::role() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.role)
  return role_.GetNoArena();
}
void DataReaderMnist::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.role)
}
#if LANG_CXX11
void DataReaderMnist::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.DataReaderMnist.role)
}
#endif
void DataReaderMnist::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.role)
}
void DataReaderMnist::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.role)
}
::std::string* DataReaderMnist::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataReaderMnist::release_role() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataReaderMnist::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.role)
}

// int32 batch_size = 2;
void DataReaderMnist::clear_batch_size() {
  batch_size_ = 0;
}
::google::protobuf::int32 DataReaderMnist::batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.batch_size)
  return batch_size_;
}
void DataReaderMnist::set_batch_size(::google::protobuf::int32 value) {
  
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.batch_size)
}

// bool shuffle = 3;
void DataReaderMnist::clear_shuffle() {
  shuffle_ = false;
}
bool DataReaderMnist::shuffle() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.shuffle)
  return shuffle_;
}
void DataReaderMnist::set_shuffle(bool value) {
  
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.shuffle)
}

// string file_dir = 4;
void DataReaderMnist::clear_file_dir() {
  file_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataReaderMnist::file_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.file_dir)
  return file_dir_.GetNoArena();
}
void DataReaderMnist::set_file_dir(const ::std::string& value) {
  
  file_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.file_dir)
}
#if LANG_CXX11
void DataReaderMnist::set_file_dir(::std::string&& value) {
  
  file_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.DataReaderMnist.file_dir)
}
#endif
void DataReaderMnist::set_file_dir(const char* value) {
  
  file_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.file_dir)
}
void DataReaderMnist::set_file_dir(const char* value, size_t size) {
  
  file_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.file_dir)
}
::std::string* DataReaderMnist::mutable_file_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.file_dir)
  return file_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataReaderMnist::release_file_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.file_dir)
  
  return file_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataReaderMnist::set_allocated_file_dir(::std::string* file_dir) {
  if (file_dir != NULL) {
    
  } else {
    
  }
  file_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.file_dir)
}

// string image_file = 5;
void DataReaderMnist::clear_image_file() {
  image_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataReaderMnist::image_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.image_file)
  return image_file_.GetNoArena();
}
void DataReaderMnist::set_image_file(const ::std::string& value) {
  
  image_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.image_file)
}
#if LANG_CXX11
void DataReaderMnist::set_image_file(::std::string&& value) {
  
  image_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.DataReaderMnist.image_file)
}
#endif
void DataReaderMnist::set_image_file(const char* value) {
  
  image_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.image_file)
}
void DataReaderMnist::set_image_file(const char* value, size_t size) {
  
  image_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.image_file)
}
::std::string* DataReaderMnist::mutable_image_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.image_file)
  return image_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataReaderMnist::release_image_file() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.image_file)
  
  return image_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataReaderMnist::set_allocated_image_file(::std::string* image_file) {
  if (image_file != NULL) {
    
  } else {
    
  }
  image_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.image_file)
}

// string label_file = 6;
void DataReaderMnist::clear_label_file() {
  label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataReaderMnist::label_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.label_file)
  return label_file_.GetNoArena();
}
void DataReaderMnist::set_label_file(const ::std::string& value) {
  
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.label_file)
}
#if LANG_CXX11
void DataReaderMnist::set_label_file(::std::string&& value) {
  
  label_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.DataReaderMnist.label_file)
}
#endif
void DataReaderMnist::set_label_file(const char* value) {
  
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.DataReaderMnist.label_file)
}
void DataReaderMnist::set_label_file(const char* value, size_t size) {
  
  label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.DataReaderMnist.label_file)
}
::std::string* DataReaderMnist::mutable_label_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReaderMnist.label_file)
  return label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataReaderMnist::release_label_file() {
  // @@protoc_insertion_point(field_release:lbann_data.DataReaderMnist.label_file)
  
  return label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataReaderMnist::set_allocated_label_file(::std::string* label_file) {
  if (label_file != NULL) {
    
  } else {
    
  }
  label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.DataReaderMnist.label_file)
}

// double percent_samples = 7;
void DataReaderMnist::clear_percent_samples() {
  percent_samples_ = 0;
}
double DataReaderMnist::percent_samples() const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReaderMnist.percent_samples)
  return percent_samples_;
}
void DataReaderMnist::set_percent_samples(double value) {
  
  percent_samples_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.DataReaderMnist.percent_samples)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderCifar10::DataReaderCifar10()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderCifar10)
}
DataReaderCifar10::DataReaderCifar10(const DataReaderCifar10& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderCifar10)
}

void DataReaderCifar10::SharedCtor() {
  _cached_size_ = 0;
}

DataReaderCifar10::~DataReaderCifar10() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderCifar10)
  SharedDtor();
}

void DataReaderCifar10::SharedDtor() {
}

void DataReaderCifar10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderCifar10::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[3].descriptor;
}

const DataReaderCifar10& DataReaderCifar10::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataReaderCifar10* DataReaderCifar10::New(::google::protobuf::Arena* arena) const {
  DataReaderCifar10* n = new DataReaderCifar10;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderCifar10::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderCifar10)
}

bool DataReaderCifar10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderCifar10)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderCifar10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderCifar10)
  return false;
#undef DO_
}

void DataReaderCifar10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderCifar10)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderCifar10)
}

::google::protobuf::uint8* DataReaderCifar10::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderCifar10)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderCifar10)
  return target;
}

size_t DataReaderCifar10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderCifar10)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderCifar10::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderCifar10)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReaderCifar10* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderCifar10>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderCifar10)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderCifar10)
    MergeFrom(*source);
  }
}

void DataReaderCifar10::MergeFrom(const DataReaderCifar10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderCifar10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void DataReaderCifar10::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderCifar10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderCifar10::CopyFrom(const DataReaderCifar10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderCifar10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderCifar10::IsInitialized() const {
  return true;
}

void DataReaderCifar10::Swap(DataReaderCifar10* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderCifar10::InternalSwap(DataReaderCifar10* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderCifar10::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderCifar10

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderImagenet::DataReaderImagenet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderImagenet)
}
DataReaderImagenet::DataReaderImagenet(const DataReaderImagenet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderImagenet)
}

void DataReaderImagenet::SharedCtor() {
  _cached_size_ = 0;
}

DataReaderImagenet::~DataReaderImagenet() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderImagenet)
  SharedDtor();
}

void DataReaderImagenet::SharedDtor() {
}

void DataReaderImagenet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderImagenet::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[4].descriptor;
}

const DataReaderImagenet& DataReaderImagenet::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataReaderImagenet* DataReaderImagenet::New(::google::protobuf::Arena* arena) const {
  DataReaderImagenet* n = new DataReaderImagenet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderImagenet::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderImagenet)
}

bool DataReaderImagenet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderImagenet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderImagenet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderImagenet)
  return false;
#undef DO_
}

void DataReaderImagenet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderImagenet)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderImagenet)
}

::google::protobuf::uint8* DataReaderImagenet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderImagenet)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderImagenet)
  return target;
}

size_t DataReaderImagenet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderImagenet)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderImagenet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderImagenet)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReaderImagenet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderImagenet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderImagenet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderImagenet)
    MergeFrom(*source);
  }
}

void DataReaderImagenet::MergeFrom(const DataReaderImagenet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderImagenet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void DataReaderImagenet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderImagenet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderImagenet::CopyFrom(const DataReaderImagenet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderImagenet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderImagenet::IsInitialized() const {
  return true;
}

void DataReaderImagenet::Swap(DataReaderImagenet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderImagenet::InternalSwap(DataReaderImagenet* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderImagenet::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderImagenet

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderNci::DataReaderNci()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderNci)
}
DataReaderNci::DataReaderNci(const DataReaderNci& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderNci)
}

void DataReaderNci::SharedCtor() {
  _cached_size_ = 0;
}

DataReaderNci::~DataReaderNci() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderNci)
  SharedDtor();
}

void DataReaderNci::SharedDtor() {
}

void DataReaderNci::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderNci::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[5].descriptor;
}

const DataReaderNci& DataReaderNci::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataReaderNci* DataReaderNci::New(::google::protobuf::Arena* arena) const {
  DataReaderNci* n = new DataReaderNci;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderNci::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderNci)
}

bool DataReaderNci::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderNci)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderNci)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderNci)
  return false;
#undef DO_
}

void DataReaderNci::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderNci)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderNci)
}

::google::protobuf::uint8* DataReaderNci::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderNci)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderNci)
  return target;
}

size_t DataReaderNci::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderNci)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderNci::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderNci)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReaderNci* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderNci>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderNci)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderNci)
    MergeFrom(*source);
  }
}

void DataReaderNci::MergeFrom(const DataReaderNci& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderNci)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void DataReaderNci::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderNci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderNci::CopyFrom(const DataReaderNci& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderNci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderNci::IsInitialized() const {
  return true;
}

void DataReaderNci::Swap(DataReaderNci* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderNci::InternalSwap(DataReaderNci* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderNci::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderNci

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReaderNciRegression::DataReaderNciRegression()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.DataReaderNciRegression)
}
DataReaderNciRegression::DataReaderNciRegression(const DataReaderNciRegression& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.DataReaderNciRegression)
}

void DataReaderNciRegression::SharedCtor() {
  _cached_size_ = 0;
}

DataReaderNciRegression::~DataReaderNciRegression() {
  // @@protoc_insertion_point(destructor:lbann_data.DataReaderNciRegression)
  SharedDtor();
}

void DataReaderNciRegression::SharedDtor() {
}

void DataReaderNciRegression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReaderNciRegression::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[6].descriptor;
}

const DataReaderNciRegression& DataReaderNciRegression::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataReaderNciRegression* DataReaderNciRegression::New(::google::protobuf::Arena* arena) const {
  DataReaderNciRegression* n = new DataReaderNciRegression;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReaderNciRegression::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.DataReaderNciRegression)
}

bool DataReaderNciRegression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.DataReaderNciRegression)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.DataReaderNciRegression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.DataReaderNciRegression)
  return false;
#undef DO_
}

void DataReaderNciRegression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.DataReaderNciRegression)
  // @@protoc_insertion_point(serialize_end:lbann_data.DataReaderNciRegression)
}

::google::protobuf::uint8* DataReaderNciRegression::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.DataReaderNciRegression)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.DataReaderNciRegression)
  return target;
}

size_t DataReaderNciRegression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.DataReaderNciRegression)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReaderNciRegression::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.DataReaderNciRegression)
  GOOGLE_DCHECK_NE(&from, this);
  const DataReaderNciRegression* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReaderNciRegression>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.DataReaderNciRegression)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.DataReaderNciRegression)
    MergeFrom(*source);
  }
}

void DataReaderNciRegression::MergeFrom(const DataReaderNciRegression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.DataReaderNciRegression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void DataReaderNciRegression::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.DataReaderNciRegression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReaderNciRegression::CopyFrom(const DataReaderNciRegression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.DataReaderNciRegression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReaderNciRegression::IsInitialized() const {
  return true;
}

void DataReaderNciRegression::Swap(DataReaderNciRegression* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReaderNciRegression::InternalSwap(DataReaderNciRegression* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReaderNciRegression::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReaderNciRegression

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kNameFieldNumber;
const int Model::kObjectiveFunctionFieldNumber;
const int Model::kMiniBatchSizeFieldNumber;
const int Model::kNumEpochsFieldNumber;
const int Model::kMetricFieldNumber;
const int Model::kLayerFieldNumber;
const int Model::kOptimizerFieldNumber;
const int Model::kCallbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Model)
}
Model::Model(const Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metric_(from.metric_),
      layer_(from.layer_),
      callback_(from.callback_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  objective_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.objective_function().size() > 0) {
    objective_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objective_function_);
  }
  if (from.has_optimizer()) {
    optimizer_ = new ::lbann_data::Optimizer(*from.optimizer_);
  } else {
    optimizer_ = NULL;
  }
  ::memcpy(&mini_batch_size_, &from.mini_batch_size_,
    reinterpret_cast<char*>(&num_epochs_) -
    reinterpret_cast<char*>(&mini_batch_size_) + sizeof(num_epochs_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.Model)
}

void Model::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&optimizer_, 0, reinterpret_cast<char*>(&num_epochs_) -
    reinterpret_cast<char*>(&optimizer_) + sizeof(num_epochs_));
  _cached_size_ = 0;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:lbann_data.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete optimizer_;
  }
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[7].descriptor;
}

const Model& Model::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Model* Model::New(::google::protobuf::Arena* arena) const {
  Model* n = new Model;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Model)
  metric_.Clear();
  layer_.Clear();
  callback_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  objective_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && optimizer_ != NULL) {
    delete optimizer_;
  }
  optimizer_ = NULL;
  ::memset(&mini_batch_size_, 0, reinterpret_cast<char*>(&num_epochs_) -
    reinterpret_cast<char*>(&mini_batch_size_) + sizeof(num_epochs_));
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objective_function = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objective_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->objective_function().data(), this->objective_function().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.objective_function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_epochs = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_epochs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string metric = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_metric()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->metric(this->metric_size() - 1).data(),
            this->metric(this->metric_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.metric"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mini_batch_size = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lbann_data.Layer layer = 10;
      case 10: {
        if (tag == 82u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .lbann_data.Optimizer optimizer = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string callback = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callback()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->callback(this->callback_size() - 1).data(),
            this->callback(this->callback_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Model.callback"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Model)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string objective_function = 2;
  if (this->objective_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_function().data(), this->objective_function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.objective_function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->objective_function(), output);
  }

  // int32 num_epochs = 4;
  if (this->num_epochs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_epochs(), output);
  }

  // repeated string metric = 5;
  for (int i = 0; i < this->metric_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric(i).data(), this->metric(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.metric");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->metric(i), output);
  }

  // int32 mini_batch_size = 6;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mini_batch_size(), output);
  }

  // repeated .lbann_data.Layer layer = 10;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->layer(i), output);
  }

  // .lbann_data.Optimizer optimizer = 11;
  if (this->has_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->optimizer_, output);
  }

  // repeated string callback = 20;
  for (int i = 0; i < this->callback_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callback(i).data(), this->callback(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.callback");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->callback(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Model)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string objective_function = 2;
  if (this->objective_function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->objective_function().data(), this->objective_function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.objective_function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->objective_function(), target);
  }

  // int32 num_epochs = 4;
  if (this->num_epochs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_epochs(), target);
  }

  // repeated string metric = 5;
  for (int i = 0; i < this->metric_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->metric(i).data(), this->metric(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.metric");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->metric(i), target);
  }

  // int32 mini_batch_size = 6;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mini_batch_size(), target);
  }

  // repeated .lbann_data.Layer layer = 10;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->layer(i), false, target);
  }

  // .lbann_data.Optimizer optimizer = 11;
  if (this->has_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->optimizer_, false, target);
  }

  // repeated string callback = 20;
  for (int i = 0; i < this->callback_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->callback(i).data(), this->callback(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Model.callback");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->callback(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Model)
  size_t total_size = 0;

  // repeated string metric = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->metric_size());
  for (int i = 0; i < this->metric_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->metric(i));
  }

  // repeated .lbann_data.Layer layer = 10;
  {
    unsigned int count = this->layer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(i));
    }
  }

  // repeated string callback = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->callback_size());
  for (int i = 0; i < this->callback_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->callback(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string objective_function = 2;
  if (this->objective_function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->objective_function());
  }

  // .lbann_data.Optimizer optimizer = 11;
  if (this->has_optimizer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->optimizer_);
  }

  // int32 mini_batch_size = 6;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  // int32 num_epochs = 4;
  if (this->num_epochs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_epochs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metric_.MergeFrom(from.metric_);
  layer_.MergeFrom(from.layer_);
  callback_.MergeFrom(from.callback_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.objective_function().size() > 0) {

    objective_function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.objective_function_);
  }
  if (from.has_optimizer()) {
    mutable_optimizer()->::lbann_data::Optimizer::MergeFrom(from.optimizer());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
  if (from.num_epochs() != 0) {
    set_num_epochs(from.num_epochs());
  }
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  metric_.UnsafeArenaSwap(&other->metric_);
  layer_.UnsafeArenaSwap(&other->layer_);
  callback_.UnsafeArenaSwap(&other->callback_);
  name_.Swap(&other->name_);
  objective_function_.Swap(&other->objective_function_);
  std::swap(optimizer_, other->optimizer_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  std::swap(num_epochs_, other->num_epochs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Model

// string name = 1;
void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.name)
  return name_.GetNoArena();
}
void Model::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.name)
}
#if LANG_CXX11
void Model::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Model.name)
}
#endif
void Model::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.name)
}
void Model::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.name)
}
::std::string* Model::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Model::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.name)
}

// string objective_function = 2;
void Model::clear_objective_function() {
  objective_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Model::objective_function() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.objective_function)
  return objective_function_.GetNoArena();
}
void Model::set_objective_function(const ::std::string& value) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.objective_function)
}
#if LANG_CXX11
void Model::set_objective_function(::std::string&& value) {
  
  objective_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Model.objective_function)
}
#endif
void Model::set_objective_function(const char* value) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.objective_function)
}
void Model::set_objective_function(const char* value, size_t size) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.objective_function)
}
::std::string* Model::mutable_objective_function() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.objective_function)
  return objective_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Model::release_objective_function() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.objective_function)
  
  return objective_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Model::set_allocated_objective_function(::std::string* objective_function) {
  if (objective_function != NULL) {
    
  } else {
    
  }
  objective_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objective_function);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.objective_function)
}

// int32 mini_batch_size = 6;
void Model::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
::google::protobuf::int32 Model::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.mini_batch_size)
  return mini_batch_size_;
}
void Model::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Model.mini_batch_size)
}

// int32 num_epochs = 4;
void Model::clear_num_epochs() {
  num_epochs_ = 0;
}
::google::protobuf::int32 Model::num_epochs() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.num_epochs)
  return num_epochs_;
}
void Model::set_num_epochs(::google::protobuf::int32 value) {
  
  num_epochs_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Model.num_epochs)
}

// repeated string metric = 5;
int Model::metric_size() const {
  return metric_.size();
}
void Model::clear_metric() {
  metric_.Clear();
}
const ::std::string& Model::metric(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.metric)
  return metric_.Get(index);
}
::std::string* Model::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.metric)
  return metric_.Mutable(index);
}
void Model::set_metric(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.Model.metric)
  metric_.Mutable(index)->assign(value);
}
void Model::set_metric(int index, const char* value) {
  metric_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.metric)
}
void Model::set_metric(int index, const char* value, size_t size) {
  metric_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.metric)
}
::std::string* Model::add_metric() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.Model.metric)
  return metric_.Add();
}
void Model::add_metric(const ::std::string& value) {
  metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.Model.metric)
}
void Model::add_metric(const char* value) {
  metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.Model.metric)
}
void Model::add_metric(const char* value, size_t size) {
  metric_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.Model.metric)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::metric() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.metric)
  return metric_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.metric)
  return &metric_;
}

// repeated .lbann_data.Layer layer = 10;
int Model::layer_size() const {
  return layer_.size();
}
void Model::clear_layer() {
  layer_.Clear();
}
const ::lbann_data::Layer& Model::layer(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.layer)
  return layer_.Get(index);
}
::lbann_data::Layer* Model::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.layer)
  return layer_.Mutable(index);
}
::lbann_data::Layer* Model::add_layer() {
  // @@protoc_insertion_point(field_add:lbann_data.Model.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >*
Model::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >&
Model::layer() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.layer)
  return layer_;
}

// .lbann_data.Optimizer optimizer = 11;
bool Model::has_optimizer() const {
  return this != internal_default_instance() && optimizer_ != NULL;
}
void Model::clear_optimizer() {
  if (GetArenaNoVirtual() == NULL && optimizer_ != NULL) delete optimizer_;
  optimizer_ = NULL;
}
const ::lbann_data::Optimizer& Model::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.optimizer)
  return optimizer_ != NULL ? *optimizer_
                         : *::lbann_data::Optimizer::internal_default_instance();
}
::lbann_data::Optimizer* Model::mutable_optimizer() {
  
  if (optimizer_ == NULL) {
    optimizer_ = new ::lbann_data::Optimizer;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.optimizer)
  return optimizer_;
}
::lbann_data::Optimizer* Model::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.optimizer)
  
  ::lbann_data::Optimizer* temp = optimizer_;
  optimizer_ = NULL;
  return temp;
}
void Model::set_allocated_optimizer(::lbann_data::Optimizer* optimizer) {
  delete optimizer_;
  optimizer_ = optimizer;
  if (optimizer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.optimizer)
}

// repeated string callback = 20;
int Model::callback_size() const {
  return callback_.size();
}
void Model::clear_callback() {
  callback_.Clear();
}
const ::std::string& Model::callback(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.callback)
  return callback_.Get(index);
}
::std::string* Model::mutable_callback(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.callback)
  return callback_.Mutable(index);
}
void Model::set_callback(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.Model.callback)
  callback_.Mutable(index)->assign(value);
}
void Model::set_callback(int index, const char* value) {
  callback_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.callback)
}
void Model::set_callback(int index, const char* value, size_t size) {
  callback_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.callback)
}
::std::string* Model::add_callback() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.Model.callback)
  return callback_.Add();
}
void Model::add_callback(const ::std::string& value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.Model.callback)
}
void Model::add_callback(const char* value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.Model.callback)
}
void Model::add_callback(const char* value, size_t size) {
  callback_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.Model.callback)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::callback() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.callback)
  return callback_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_callback() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.callback)
  return &callback_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Optimizer::kNameFieldNumber;
const int Optimizer::kLearnRateFieldNumber;
const int Optimizer::kMomentumFieldNumber;
const int Optimizer::kDecayFieldNumber;
const int Optimizer::kNesterovFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Optimizer::Optimizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Optimizer)
}
Optimizer::Optimizer(const Optimizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&learn_rate_, &from.learn_rate_,
    reinterpret_cast<char*>(&nesterov_) -
    reinterpret_cast<char*>(&learn_rate_) + sizeof(nesterov_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.Optimizer)
}

void Optimizer::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&learn_rate_, 0, reinterpret_cast<char*>(&nesterov_) -
    reinterpret_cast<char*>(&learn_rate_) + sizeof(nesterov_));
  _cached_size_ = 0;
}

Optimizer::~Optimizer() {
  // @@protoc_insertion_point(destructor:lbann_data.Optimizer)
  SharedDtor();
}

void Optimizer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Optimizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Optimizer::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[8].descriptor;
}

const Optimizer& Optimizer::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Optimizer* Optimizer::New(::google::protobuf::Arena* arena) const {
  Optimizer* n = new Optimizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Optimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Optimizer)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&learn_rate_, 0, reinterpret_cast<char*>(&nesterov_) -
    reinterpret_cast<char*>(&learn_rate_) + sizeof(nesterov_));
}

bool Optimizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Optimizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Optimizer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double learn_rate = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &learn_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double momentum = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double decay = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nesterov = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nesterov_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Optimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Optimizer)
  return false;
#undef DO_
}

void Optimizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Optimizer)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Optimizer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // double learn_rate = 2;
  if (this->learn_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->learn_rate(), output);
  }

  // double momentum = 3;
  if (this->momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->momentum(), output);
  }

  // double decay = 4;
  if (this->decay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->decay(), output);
  }

  // bool nesterov = 5;
  if (this->nesterov() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->nesterov(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Optimizer)
}

::google::protobuf::uint8* Optimizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Optimizer)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Optimizer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // double learn_rate = 2;
  if (this->learn_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->learn_rate(), target);
  }

  // double momentum = 3;
  if (this->momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->momentum(), target);
  }

  // double decay = 4;
  if (this->decay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->decay(), target);
  }

  // bool nesterov = 5;
  if (this->nesterov() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->nesterov(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Optimizer)
  return target;
}

size_t Optimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Optimizer)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double learn_rate = 2;
  if (this->learn_rate() != 0) {
    total_size += 1 + 8;
  }

  // double momentum = 3;
  if (this->momentum() != 0) {
    total_size += 1 + 8;
  }

  // double decay = 4;
  if (this->decay() != 0) {
    total_size += 1 + 8;
  }

  // bool nesterov = 5;
  if (this->nesterov() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Optimizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Optimizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Optimizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Optimizer)
    MergeFrom(*source);
  }
}

void Optimizer::MergeFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.learn_rate() != 0) {
    set_learn_rate(from.learn_rate());
  }
  if (from.momentum() != 0) {
    set_momentum(from.momentum());
  }
  if (from.decay() != 0) {
    set_decay(from.decay());
  }
  if (from.nesterov() != 0) {
    set_nesterov(from.nesterov());
  }
}

void Optimizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimizer::CopyFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimizer::IsInitialized() const {
  return true;
}

void Optimizer::Swap(Optimizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Optimizer::InternalSwap(Optimizer* other) {
  name_.Swap(&other->name_);
  std::swap(learn_rate_, other->learn_rate_);
  std::swap(momentum_, other->momentum_);
  std::swap(decay_, other->decay_);
  std::swap(nesterov_, other->nesterov_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Optimizer::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Optimizer

// string name = 1;
void Optimizer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Optimizer::name() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.name)
  return name_.GetNoArena();
}
void Optimizer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.name)
}
#if LANG_CXX11
void Optimizer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Optimizer.name)
}
#endif
void Optimizer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Optimizer.name)
}
void Optimizer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Optimizer.name)
}
::std::string* Optimizer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Optimizer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Optimizer::release_name() {
  // @@protoc_insertion_point(field_release:lbann_data.Optimizer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Optimizer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Optimizer.name)
}

// double learn_rate = 2;
void Optimizer::clear_learn_rate() {
  learn_rate_ = 0;
}
double Optimizer::learn_rate() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.learn_rate)
  return learn_rate_;
}
void Optimizer::set_learn_rate(double value) {
  
  learn_rate_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.learn_rate)
}

// double momentum = 3;
void Optimizer::clear_momentum() {
  momentum_ = 0;
}
double Optimizer::momentum() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.momentum)
  return momentum_;
}
void Optimizer::set_momentum(double value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.momentum)
}

// double decay = 4;
void Optimizer::clear_decay() {
  decay_ = 0;
}
double Optimizer::decay() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.decay)
  return decay_;
}
void Optimizer::set_decay(double value) {
  
  decay_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.decay)
}

// bool nesterov = 5;
void Optimizer::clear_nesterov() {
  nesterov_ = false;
}
bool Optimizer::nesterov() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.nesterov)
  return nesterov_;
}
void Optimizer::set_nesterov(bool value) {
  
  nesterov_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.nesterov)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layer::kIndexFieldNumber;
const int Layer::kInputDistributedMinibatchParallelIoFieldNumber;
const int Layer::kInputDistributedMinibatchFieldNumber;
const int Layer::kInputFieldNumber;
const int Layer::kFullyConnectedFieldNumber;
const int Layer::kPoolingFieldNumber;
const int Layer::kConvolutionFieldNumber;
const int Layer::kSoftmaxFieldNumber;
const int Layer::kTargetFieldNumber;
const int Layer::kTargetParallelFieldNumber;
const int Layer::kTargetDistributedMinibatchFieldNumber;
const int Layer::kTargetDistributedMinibatchParallelIoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layer::Layer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Layer)
}
Layer::Layer(const Layer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input_distributed_minibatch_parallel_io()) {
    input_distributed_minibatch_parallel_io_ = new ::lbann_data::InputDistributedMiniBatchParallelIO(*from.input_distributed_minibatch_parallel_io_);
  } else {
    input_distributed_minibatch_parallel_io_ = NULL;
  }
  if (from.has_input_distributed_minibatch()) {
    input_distributed_minibatch_ = new ::lbann_data::InputDistributedMiniBatch(*from.input_distributed_minibatch_);
  } else {
    input_distributed_minibatch_ = NULL;
  }
  if (from.has_input()) {
    input_ = new ::lbann_data::Input(*from.input_);
  } else {
    input_ = NULL;
  }
  if (from.has_fully_connected()) {
    fully_connected_ = new ::lbann_data::FullyConnected(*from.fully_connected_);
  } else {
    fully_connected_ = NULL;
  }
  if (from.has_pooling()) {
    pooling_ = new ::lbann_data::Pooling(*from.pooling_);
  } else {
    pooling_ = NULL;
  }
  if (from.has_convolution()) {
    convolution_ = new ::lbann_data::Convolution(*from.convolution_);
  } else {
    convolution_ = NULL;
  }
  if (from.has_softmax()) {
    softmax_ = new ::lbann_data::Softmax(*from.softmax_);
  } else {
    softmax_ = NULL;
  }
  if (from.has_target()) {
    target_ = new ::lbann_data::Target(*from.target_);
  } else {
    target_ = NULL;
  }
  if (from.has_target_parallel()) {
    target_parallel_ = new ::lbann_data::TargetParallel(*from.target_parallel_);
  } else {
    target_parallel_ = NULL;
  }
  if (from.has_target_distributed_minibatch()) {
    target_distributed_minibatch_ = new ::lbann_data::TargetDistributedMinibatch(*from.target_distributed_minibatch_);
  } else {
    target_distributed_minibatch_ = NULL;
  }
  if (from.has_target_distributed_minibatch_parallel_io()) {
    target_distributed_minibatch_parallel_io_ = new ::lbann_data::TargetDistributedMinibatchParallelIO(*from.target_distributed_minibatch_parallel_io_);
  } else {
    target_distributed_minibatch_parallel_io_ = NULL;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:lbann_data.Layer)
}

void Layer::SharedCtor() {
  ::memset(&input_distributed_minibatch_parallel_io_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&input_distributed_minibatch_parallel_io_) + sizeof(index_));
  _cached_size_ = 0;
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:lbann_data.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete input_distributed_minibatch_parallel_io_;
  }
  if (this != internal_default_instance()) {
    delete input_distributed_minibatch_;
  }
  if (this != internal_default_instance()) {
    delete input_;
  }
  if (this != internal_default_instance()) {
    delete fully_connected_;
  }
  if (this != internal_default_instance()) {
    delete pooling_;
  }
  if (this != internal_default_instance()) {
    delete convolution_;
  }
  if (this != internal_default_instance()) {
    delete softmax_;
  }
  if (this != internal_default_instance()) {
    delete target_;
  }
  if (this != internal_default_instance()) {
    delete target_parallel_;
  }
  if (this != internal_default_instance()) {
    delete target_distributed_minibatch_;
  }
  if (this != internal_default_instance()) {
    delete target_distributed_minibatch_parallel_io_;
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[9].descriptor;
}

const Layer& Layer::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Layer* Layer::New(::google::protobuf::Arena* arena) const {
  Layer* n = new Layer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Layer)
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_parallel_io_ != NULL) {
    delete input_distributed_minibatch_parallel_io_;
  }
  input_distributed_minibatch_parallel_io_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_ != NULL) {
    delete input_distributed_minibatch_;
  }
  input_distributed_minibatch_ = NULL;
  if (GetArenaNoVirtual() == NULL && input_ != NULL) {
    delete input_;
  }
  input_ = NULL;
  if (GetArenaNoVirtual() == NULL && fully_connected_ != NULL) {
    delete fully_connected_;
  }
  fully_connected_ = NULL;
  if (GetArenaNoVirtual() == NULL && pooling_ != NULL) {
    delete pooling_;
  }
  pooling_ = NULL;
  if (GetArenaNoVirtual() == NULL && convolution_ != NULL) {
    delete convolution_;
  }
  convolution_ = NULL;
  if (GetArenaNoVirtual() == NULL && softmax_ != NULL) {
    delete softmax_;
  }
  softmax_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_parallel_ != NULL) {
    delete target_parallel_;
  }
  target_parallel_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_ != NULL) {
    delete target_distributed_minibatch_;
  }
  target_distributed_minibatch_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_parallel_io_ != NULL) {
    delete target_distributed_minibatch_parallel_io_;
  }
  target_distributed_minibatch_parallel_io_ = NULL;
  index_ = 0;
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 index = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_distributed_minibatch_parallel_io()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_distributed_minibatch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.Input input = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.FullyConnected fully_connected = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fully_connected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.Pooling pooling = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.Convolution convolution = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.Softmax softmax = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.Target target = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.TargetParallel target_parallel = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_parallel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_distributed_minibatch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .lbann_data.TargetDistributedMinibatchParallelIO target_distributed_minibatch_parallel_io = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_distributed_minibatch_parallel_io()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Layer)
  return false;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Layer)
  // int32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  if (this->has_input_distributed_minibatch_parallel_io()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->input_distributed_minibatch_parallel_io_, output);
  }

  // .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  if (this->has_input_distributed_minibatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->input_distributed_minibatch_, output);
  }

  // .lbann_data.Input input = 10;
  if (this->has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->input_, output);
  }

  // .lbann_data.FullyConnected fully_connected = 11;
  if (this->has_fully_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->fully_connected_, output);
  }

  // .lbann_data.Pooling pooling = 12;
  if (this->has_pooling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->pooling_, output);
  }

  // .lbann_data.Convolution convolution = 13;
  if (this->has_convolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->convolution_, output);
  }

  // .lbann_data.Softmax softmax = 14;
  if (this->has_softmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->softmax_, output);
  }

  // .lbann_data.Target target = 15;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->target_, output);
  }

  // .lbann_data.TargetParallel target_parallel = 16;
  if (this->has_target_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->target_parallel_, output);
  }

  // .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  if (this->has_target_distributed_minibatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->target_distributed_minibatch_, output);
  }

  // .lbann_data.TargetDistributedMinibatchParallelIO target_distributed_minibatch_parallel_io = 18;
  if (this->has_target_distributed_minibatch_parallel_io()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->target_distributed_minibatch_parallel_io_, output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Layer)
}

::google::protobuf::uint8* Layer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Layer)
  // int32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  if (this->has_input_distributed_minibatch_parallel_io()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->input_distributed_minibatch_parallel_io_, false, target);
  }

  // .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  if (this->has_input_distributed_minibatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->input_distributed_minibatch_, false, target);
  }

  // .lbann_data.Input input = 10;
  if (this->has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->input_, false, target);
  }

  // .lbann_data.FullyConnected fully_connected = 11;
  if (this->has_fully_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->fully_connected_, false, target);
  }

  // .lbann_data.Pooling pooling = 12;
  if (this->has_pooling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->pooling_, false, target);
  }

  // .lbann_data.Convolution convolution = 13;
  if (this->has_convolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->convolution_, false, target);
  }

  // .lbann_data.Softmax softmax = 14;
  if (this->has_softmax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->softmax_, false, target);
  }

  // .lbann_data.Target target = 15;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->target_, false, target);
  }

  // .lbann_data.TargetParallel target_parallel = 16;
  if (this->has_target_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->target_parallel_, false, target);
  }

  // .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  if (this->has_target_distributed_minibatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->target_distributed_minibatch_, false, target);
  }

  // .lbann_data.TargetDistributedMinibatchParallelIO target_distributed_minibatch_parallel_io = 18;
  if (this->has_target_distributed_minibatch_parallel_io()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->target_distributed_minibatch_parallel_io_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Layer)
  size_t total_size = 0;

  // .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  if (this->has_input_distributed_minibatch_parallel_io()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_distributed_minibatch_parallel_io_);
  }

  // .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  if (this->has_input_distributed_minibatch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_distributed_minibatch_);
  }

  // .lbann_data.Input input = 10;
  if (this->has_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  // .lbann_data.FullyConnected fully_connected = 11;
  if (this->has_fully_connected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fully_connected_);
  }

  // .lbann_data.Pooling pooling = 12;
  if (this->has_pooling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pooling_);
  }

  // .lbann_data.Convolution convolution = 13;
  if (this->has_convolution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->convolution_);
  }

  // .lbann_data.Softmax softmax = 14;
  if (this->has_softmax()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_);
  }

  // .lbann_data.Target target = 15;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  // .lbann_data.TargetParallel target_parallel = 16;
  if (this->has_target_parallel()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_parallel_);
  }

  // .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  if (this->has_target_distributed_minibatch()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_distributed_minibatch_);
  }

  // .lbann_data.TargetDistributedMinibatchParallelIO target_distributed_minibatch_parallel_io = 18;
  if (this->has_target_distributed_minibatch_parallel_io()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_distributed_minibatch_parallel_io_);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Layer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Layer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input_distributed_minibatch_parallel_io()) {
    mutable_input_distributed_minibatch_parallel_io()->::lbann_data::InputDistributedMiniBatchParallelIO::MergeFrom(from.input_distributed_minibatch_parallel_io());
  }
  if (from.has_input_distributed_minibatch()) {
    mutable_input_distributed_minibatch()->::lbann_data::InputDistributedMiniBatch::MergeFrom(from.input_distributed_minibatch());
  }
  if (from.has_input()) {
    mutable_input()->::lbann_data::Input::MergeFrom(from.input());
  }
  if (from.has_fully_connected()) {
    mutable_fully_connected()->::lbann_data::FullyConnected::MergeFrom(from.fully_connected());
  }
  if (from.has_pooling()) {
    mutable_pooling()->::lbann_data::Pooling::MergeFrom(from.pooling());
  }
  if (from.has_convolution()) {
    mutable_convolution()->::lbann_data::Convolution::MergeFrom(from.convolution());
  }
  if (from.has_softmax()) {
    mutable_softmax()->::lbann_data::Softmax::MergeFrom(from.softmax());
  }
  if (from.has_target()) {
    mutable_target()->::lbann_data::Target::MergeFrom(from.target());
  }
  if (from.has_target_parallel()) {
    mutable_target_parallel()->::lbann_data::TargetParallel::MergeFrom(from.target_parallel());
  }
  if (from.has_target_distributed_minibatch()) {
    mutable_target_distributed_minibatch()->::lbann_data::TargetDistributedMinibatch::MergeFrom(from.target_distributed_minibatch());
  }
  if (from.has_target_distributed_minibatch_parallel_io()) {
    mutable_target_distributed_minibatch_parallel_io()->::lbann_data::TargetDistributedMinibatchParallelIO::MergeFrom(from.target_distributed_minibatch_parallel_io());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  return true;
}

void Layer::Swap(Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layer::InternalSwap(Layer* other) {
  std::swap(input_distributed_minibatch_parallel_io_, other->input_distributed_minibatch_parallel_io_);
  std::swap(input_distributed_minibatch_, other->input_distributed_minibatch_);
  std::swap(input_, other->input_);
  std::swap(fully_connected_, other->fully_connected_);
  std::swap(pooling_, other->pooling_);
  std::swap(convolution_, other->convolution_);
  std::swap(softmax_, other->softmax_);
  std::swap(target_, other->target_);
  std::swap(target_parallel_, other->target_parallel_);
  std::swap(target_distributed_minibatch_, other->target_distributed_minibatch_);
  std::swap(target_distributed_minibatch_parallel_io_, other->target_distributed_minibatch_parallel_io_);
  std::swap(index_, other->index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layer

// int32 index = 2;
void Layer::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 Layer::index() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.index)
  return index_;
}
void Layer::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Layer.index)
}

// .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
bool Layer::has_input_distributed_minibatch_parallel_io() const {
  return this != internal_default_instance() && input_distributed_minibatch_parallel_io_ != NULL;
}
void Layer::clear_input_distributed_minibatch_parallel_io() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_parallel_io_ != NULL) delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
}
const ::lbann_data::InputDistributedMiniBatchParallelIO& Layer::input_distributed_minibatch_parallel_io() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_ != NULL ? *input_distributed_minibatch_parallel_io_
                         : *::lbann_data::InputDistributedMiniBatchParallelIO::internal_default_instance();
}
::lbann_data::InputDistributedMiniBatchParallelIO* Layer::mutable_input_distributed_minibatch_parallel_io() {
  
  if (input_distributed_minibatch_parallel_io_ == NULL) {
    input_distributed_minibatch_parallel_io_ = new ::lbann_data::InputDistributedMiniBatchParallelIO;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_;
}
::lbann_data::InputDistributedMiniBatchParallelIO* Layer::release_input_distributed_minibatch_parallel_io() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  
  ::lbann_data::InputDistributedMiniBatchParallelIO* temp = input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
  return temp;
}
void Layer::set_allocated_input_distributed_minibatch_parallel_io(::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io) {
  delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = input_distributed_minibatch_parallel_io;
  if (input_distributed_minibatch_parallel_io) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch_parallel_io)
}

// .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
bool Layer::has_input_distributed_minibatch() const {
  return this != internal_default_instance() && input_distributed_minibatch_ != NULL;
}
void Layer::clear_input_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_ != NULL) delete input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
}
const ::lbann_data::InputDistributedMiniBatch& Layer::input_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_ != NULL ? *input_distributed_minibatch_
                         : *::lbann_data::InputDistributedMiniBatch::internal_default_instance();
}
::lbann_data::InputDistributedMiniBatch* Layer::mutable_input_distributed_minibatch() {
  
  if (input_distributed_minibatch_ == NULL) {
    input_distributed_minibatch_ = new ::lbann_data::InputDistributedMiniBatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_;
}
::lbann_data::InputDistributedMiniBatch* Layer::release_input_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch)
  
  ::lbann_data::InputDistributedMiniBatch* temp = input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
  return temp;
}
void Layer::set_allocated_input_distributed_minibatch(::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch) {
  delete input_distributed_minibatch_;
  input_distributed_minibatch_ = input_distributed_minibatch;
  if (input_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch)
}

// .lbann_data.Input input = 10;
bool Layer::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
void Layer::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
const ::lbann_data::Input& Layer::input() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input)
  return input_ != NULL ? *input_
                         : *::lbann_data::Input::internal_default_instance();
}
::lbann_data::Input* Layer::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::lbann_data::Input;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input)
  return input_;
}
::lbann_data::Input* Layer::release_input() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input)
  
  ::lbann_data::Input* temp = input_;
  input_ = NULL;
  return temp;
}
void Layer::set_allocated_input(::lbann_data::Input* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input)
}

// .lbann_data.FullyConnected fully_connected = 11;
bool Layer::has_fully_connected() const {
  return this != internal_default_instance() && fully_connected_ != NULL;
}
void Layer::clear_fully_connected() {
  if (GetArenaNoVirtual() == NULL && fully_connected_ != NULL) delete fully_connected_;
  fully_connected_ = NULL;
}
const ::lbann_data::FullyConnected& Layer::fully_connected() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.fully_connected)
  return fully_connected_ != NULL ? *fully_connected_
                         : *::lbann_data::FullyConnected::internal_default_instance();
}
::lbann_data::FullyConnected* Layer::mutable_fully_connected() {
  
  if (fully_connected_ == NULL) {
    fully_connected_ = new ::lbann_data::FullyConnected;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.fully_connected)
  return fully_connected_;
}
::lbann_data::FullyConnected* Layer::release_fully_connected() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.fully_connected)
  
  ::lbann_data::FullyConnected* temp = fully_connected_;
  fully_connected_ = NULL;
  return temp;
}
void Layer::set_allocated_fully_connected(::lbann_data::FullyConnected* fully_connected) {
  delete fully_connected_;
  fully_connected_ = fully_connected;
  if (fully_connected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.fully_connected)
}

// .lbann_data.Pooling pooling = 12;
bool Layer::has_pooling() const {
  return this != internal_default_instance() && pooling_ != NULL;
}
void Layer::clear_pooling() {
  if (GetArenaNoVirtual() == NULL && pooling_ != NULL) delete pooling_;
  pooling_ = NULL;
}
const ::lbann_data::Pooling& Layer::pooling() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.pooling)
  return pooling_ != NULL ? *pooling_
                         : *::lbann_data::Pooling::internal_default_instance();
}
::lbann_data::Pooling* Layer::mutable_pooling() {
  
  if (pooling_ == NULL) {
    pooling_ = new ::lbann_data::Pooling;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.pooling)
  return pooling_;
}
::lbann_data::Pooling* Layer::release_pooling() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.pooling)
  
  ::lbann_data::Pooling* temp = pooling_;
  pooling_ = NULL;
  return temp;
}
void Layer::set_allocated_pooling(::lbann_data::Pooling* pooling) {
  delete pooling_;
  pooling_ = pooling;
  if (pooling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.pooling)
}

// .lbann_data.Convolution convolution = 13;
bool Layer::has_convolution() const {
  return this != internal_default_instance() && convolution_ != NULL;
}
void Layer::clear_convolution() {
  if (GetArenaNoVirtual() == NULL && convolution_ != NULL) delete convolution_;
  convolution_ = NULL;
}
const ::lbann_data::Convolution& Layer::convolution() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.convolution)
  return convolution_ != NULL ? *convolution_
                         : *::lbann_data::Convolution::internal_default_instance();
}
::lbann_data::Convolution* Layer::mutable_convolution() {
  
  if (convolution_ == NULL) {
    convolution_ = new ::lbann_data::Convolution;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.convolution)
  return convolution_;
}
::lbann_data::Convolution* Layer::release_convolution() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.convolution)
  
  ::lbann_data::Convolution* temp = convolution_;
  convolution_ = NULL;
  return temp;
}
void Layer::set_allocated_convolution(::lbann_data::Convolution* convolution) {
  delete convolution_;
  convolution_ = convolution;
  if (convolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.convolution)
}

// .lbann_data.Softmax softmax = 14;
bool Layer::has_softmax() const {
  return this != internal_default_instance() && softmax_ != NULL;
}
void Layer::clear_softmax() {
  if (GetArenaNoVirtual() == NULL && softmax_ != NULL) delete softmax_;
  softmax_ = NULL;
}
const ::lbann_data::Softmax& Layer::softmax() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.softmax)
  return softmax_ != NULL ? *softmax_
                         : *::lbann_data::Softmax::internal_default_instance();
}
::lbann_data::Softmax* Layer::mutable_softmax() {
  
  if (softmax_ == NULL) {
    softmax_ = new ::lbann_data::Softmax;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.softmax)
  return softmax_;
}
::lbann_data::Softmax* Layer::release_softmax() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.softmax)
  
  ::lbann_data::Softmax* temp = softmax_;
  softmax_ = NULL;
  return temp;
}
void Layer::set_allocated_softmax(::lbann_data::Softmax* softmax) {
  delete softmax_;
  softmax_ = softmax;
  if (softmax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.softmax)
}

// .lbann_data.Target target = 15;
bool Layer::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
void Layer::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::lbann_data::Target& Layer::target() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target)
  return target_ != NULL ? *target_
                         : *::lbann_data::Target::internal_default_instance();
}
::lbann_data::Target* Layer::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::lbann_data::Target;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target)
  return target_;
}
::lbann_data::Target* Layer::release_target() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target)
  
  ::lbann_data::Target* temp = target_;
  target_ = NULL;
  return temp;
}
void Layer::set_allocated_target(::lbann_data::Target* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target)
}

// .lbann_data.TargetParallel target_parallel = 16;
bool Layer::has_target_parallel() const {
  return this != internal_default_instance() && target_parallel_ != NULL;
}
void Layer::clear_target_parallel() {
  if (GetArenaNoVirtual() == NULL && target_parallel_ != NULL) delete target_parallel_;
  target_parallel_ = NULL;
}
const ::lbann_data::TargetParallel& Layer::target_parallel() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_parallel)
  return target_parallel_ != NULL ? *target_parallel_
                         : *::lbann_data::TargetParallel::internal_default_instance();
}
::lbann_data::TargetParallel* Layer::mutable_target_parallel() {
  
  if (target_parallel_ == NULL) {
    target_parallel_ = new ::lbann_data::TargetParallel;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_parallel)
  return target_parallel_;
}
::lbann_data::TargetParallel* Layer::release_target_parallel() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_parallel)
  
  ::lbann_data::TargetParallel* temp = target_parallel_;
  target_parallel_ = NULL;
  return temp;
}
void Layer::set_allocated_target_parallel(::lbann_data::TargetParallel* target_parallel) {
  delete target_parallel_;
  target_parallel_ = target_parallel;
  if (target_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_parallel)
}

// .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
bool Layer::has_target_distributed_minibatch() const {
  return this != internal_default_instance() && target_distributed_minibatch_ != NULL;
}
void Layer::clear_target_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_ != NULL) delete target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
}
const ::lbann_data::TargetDistributedMinibatch& Layer::target_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_ != NULL ? *target_distributed_minibatch_
                         : *::lbann_data::TargetDistributedMinibatch::internal_default_instance();
}
::lbann_data::TargetDistributedMinibatch* Layer::mutable_target_distributed_minibatch() {
  
  if (target_distributed_minibatch_ == NULL) {
    target_distributed_minibatch_ = new ::lbann_data::TargetDistributedMinibatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_;
}
::lbann_data::TargetDistributedMinibatch* Layer::release_target_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_distributed_minibatch)
  
  ::lbann_data::TargetDistributedMinibatch* temp = target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
  return temp;
}
void Layer::set_allocated_target_distributed_minibatch(::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch) {
  delete target_distributed_minibatch_;
  target_distributed_minibatch_ = target_distributed_minibatch;
  if (target_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_distributed_minibatch)
}

// .lbann_data.TargetDistributedMinibatchParallelIO target_distributed_minibatch_parallel_io = 18;
bool Layer::has_target_distributed_minibatch_parallel_io() const {
  return this != internal_default_instance() && target_distributed_minibatch_parallel_io_ != NULL;
}
void Layer::clear_target_distributed_minibatch_parallel_io() {
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_parallel_io_ != NULL) delete target_distributed_minibatch_parallel_io_;
  target_distributed_minibatch_parallel_io_ = NULL;
}
const ::lbann_data::TargetDistributedMinibatchParallelIO& Layer::target_distributed_minibatch_parallel_io() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_distributed_minibatch_parallel_io)
  return target_distributed_minibatch_parallel_io_ != NULL ? *target_distributed_minibatch_parallel_io_
                         : *::lbann_data::TargetDistributedMinibatchParallelIO::internal_default_instance();
}
::lbann_data::TargetDistributedMinibatchParallelIO* Layer::mutable_target_distributed_minibatch_parallel_io() {
  
  if (target_distributed_minibatch_parallel_io_ == NULL) {
    target_distributed_minibatch_parallel_io_ = new ::lbann_data::TargetDistributedMinibatchParallelIO;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_distributed_minibatch_parallel_io)
  return target_distributed_minibatch_parallel_io_;
}
::lbann_data::TargetDistributedMinibatchParallelIO* Layer::release_target_distributed_minibatch_parallel_io() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_distributed_minibatch_parallel_io)
  
  ::lbann_data::TargetDistributedMinibatchParallelIO* temp = target_distributed_minibatch_parallel_io_;
  target_distributed_minibatch_parallel_io_ = NULL;
  return temp;
}
void Layer::set_allocated_target_distributed_minibatch_parallel_io(::lbann_data::TargetDistributedMinibatchParallelIO* target_distributed_minibatch_parallel_io) {
  delete target_distributed_minibatch_parallel_io_;
  target_distributed_minibatch_parallel_io_ = target_distributed_minibatch_parallel_io;
  if (target_distributed_minibatch_parallel_io) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_distributed_minibatch_parallel_io)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input::kMiniBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input::Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Input)
}
Input::Input(const Input& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mini_batch_size_ = from.mini_batch_size_;
  // @@protoc_insertion_point(copy_constructor:lbann_data.Input)
}

void Input::SharedCtor() {
  mini_batch_size_ = 0;
  _cached_size_ = 0;
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:lbann_data.Input)
  SharedDtor();
}

void Input::SharedDtor() {
}

void Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Input::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[10].descriptor;
}

const Input& Input::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Input* Input::New(::google::protobuf::Arena* arena) const {
  Input* n = new Input;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Input)
  mini_batch_size_ = 0;
}

bool Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Input)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mini_batch_size = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Input)
  return false;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Input)
  // int32 mini_batch_size = 1;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mini_batch_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Input)
}

::google::protobuf::uint8* Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Input)
  // int32 mini_batch_size = 1;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mini_batch_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Input)
  size_t total_size = 0;

  // int32 mini_batch_size = 1;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::Swap(Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Input::InternalSwap(Input* other) {
  std::swap(mini_batch_size_, other->mini_batch_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Input::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Input

// int32 mini_batch_size = 1;
void Input::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
::google::protobuf::int32 Input::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Input.mini_batch_size)
  return mini_batch_size_;
}
void Input::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Input.mini_batch_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputDistributedMiniBatchParallelIO::kNumParallelReadersFieldNumber;
const int InputDistributedMiniBatchParallelIO::kMiniBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputDistributedMiniBatchParallelIO::InputDistributedMiniBatchParallelIO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.InputDistributedMiniBatchParallelIO)
}
InputDistributedMiniBatchParallelIO::InputDistributedMiniBatchParallelIO(const InputDistributedMiniBatchParallelIO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_parallel_readers_, &from.num_parallel_readers_,
    reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_parallel_readers_) + sizeof(mini_batch_size_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.InputDistributedMiniBatchParallelIO)
}

void InputDistributedMiniBatchParallelIO::SharedCtor() {
  ::memset(&num_parallel_readers_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_parallel_readers_) + sizeof(mini_batch_size_));
  _cached_size_ = 0;
}

InputDistributedMiniBatchParallelIO::~InputDistributedMiniBatchParallelIO() {
  // @@protoc_insertion_point(destructor:lbann_data.InputDistributedMiniBatchParallelIO)
  SharedDtor();
}

void InputDistributedMiniBatchParallelIO::SharedDtor() {
}

void InputDistributedMiniBatchParallelIO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputDistributedMiniBatchParallelIO::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[11].descriptor;
}

const InputDistributedMiniBatchParallelIO& InputDistributedMiniBatchParallelIO::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputDistributedMiniBatchParallelIO* InputDistributedMiniBatchParallelIO::New(::google::protobuf::Arena* arena) const {
  InputDistributedMiniBatchParallelIO* n = new InputDistributedMiniBatchParallelIO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputDistributedMiniBatchParallelIO::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.InputDistributedMiniBatchParallelIO)
  ::memset(&num_parallel_readers_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_parallel_readers_) + sizeof(mini_batch_size_));
}

bool InputDistributedMiniBatchParallelIO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.InputDistributedMiniBatchParallelIO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_parallel_readers = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_parallel_readers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mini_batch_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.InputDistributedMiniBatchParallelIO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.InputDistributedMiniBatchParallelIO)
  return false;
#undef DO_
}

void InputDistributedMiniBatchParallelIO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.InputDistributedMiniBatchParallelIO)
  // int32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_parallel_readers(), output);
  }

  // int32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mini_batch_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.InputDistributedMiniBatchParallelIO)
}

::google::protobuf::uint8* InputDistributedMiniBatchParallelIO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.InputDistributedMiniBatchParallelIO)
  // int32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_parallel_readers(), target);
  }

  // int32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mini_batch_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.InputDistributedMiniBatchParallelIO)
  return target;
}

size_t InputDistributedMiniBatchParallelIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.InputDistributedMiniBatchParallelIO)
  size_t total_size = 0;

  // int32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_parallel_readers());
  }

  // int32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputDistributedMiniBatchParallelIO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  GOOGLE_DCHECK_NE(&from, this);
  const InputDistributedMiniBatchParallelIO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputDistributedMiniBatchParallelIO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.InputDistributedMiniBatchParallelIO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.InputDistributedMiniBatchParallelIO)
    MergeFrom(*source);
  }
}

void InputDistributedMiniBatchParallelIO::MergeFrom(const InputDistributedMiniBatchParallelIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.num_parallel_readers() != 0) {
    set_num_parallel_readers(from.num_parallel_readers());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void InputDistributedMiniBatchParallelIO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDistributedMiniBatchParallelIO::CopyFrom(const InputDistributedMiniBatchParallelIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.InputDistributedMiniBatchParallelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDistributedMiniBatchParallelIO::IsInitialized() const {
  return true;
}

void InputDistributedMiniBatchParallelIO::Swap(InputDistributedMiniBatchParallelIO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputDistributedMiniBatchParallelIO::InternalSwap(InputDistributedMiniBatchParallelIO* other) {
  std::swap(num_parallel_readers_, other->num_parallel_readers_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputDistributedMiniBatchParallelIO::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputDistributedMiniBatchParallelIO

// int32 num_parallel_readers = 1;
void InputDistributedMiniBatchParallelIO::clear_num_parallel_readers() {
  num_parallel_readers_ = 0;
}
::google::protobuf::int32 InputDistributedMiniBatchParallelIO::num_parallel_readers() const {
  // @@protoc_insertion_point(field_get:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
  return num_parallel_readers_;
}
void InputDistributedMiniBatchParallelIO::set_num_parallel_readers(::google::protobuf::int32 value) {
  
  num_parallel_readers_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
}

// int32 mini_batch_size = 2;
void InputDistributedMiniBatchParallelIO::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
::google::protobuf::int32 InputDistributedMiniBatchParallelIO::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.InputDistributedMiniBatchParallelIO.mini_batch_size)
  return mini_batch_size_;
}
void InputDistributedMiniBatchParallelIO::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.InputDistributedMiniBatchParallelIO.mini_batch_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputDistributedMiniBatch::InputDistributedMiniBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.InputDistributedMiniBatch)
}
InputDistributedMiniBatch::InputDistributedMiniBatch(const InputDistributedMiniBatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.InputDistributedMiniBatch)
}

void InputDistributedMiniBatch::SharedCtor() {
  _cached_size_ = 0;
}

InputDistributedMiniBatch::~InputDistributedMiniBatch() {
  // @@protoc_insertion_point(destructor:lbann_data.InputDistributedMiniBatch)
  SharedDtor();
}

void InputDistributedMiniBatch::SharedDtor() {
}

void InputDistributedMiniBatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputDistributedMiniBatch::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[12].descriptor;
}

const InputDistributedMiniBatch& InputDistributedMiniBatch::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

InputDistributedMiniBatch* InputDistributedMiniBatch::New(::google::protobuf::Arena* arena) const {
  InputDistributedMiniBatch* n = new InputDistributedMiniBatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputDistributedMiniBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.InputDistributedMiniBatch)
}

bool InputDistributedMiniBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.InputDistributedMiniBatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.InputDistributedMiniBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.InputDistributedMiniBatch)
  return false;
#undef DO_
}

void InputDistributedMiniBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.InputDistributedMiniBatch)
  // @@protoc_insertion_point(serialize_end:lbann_data.InputDistributedMiniBatch)
}

::google::protobuf::uint8* InputDistributedMiniBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.InputDistributedMiniBatch)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.InputDistributedMiniBatch)
  return target;
}

size_t InputDistributedMiniBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.InputDistributedMiniBatch)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputDistributedMiniBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.InputDistributedMiniBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const InputDistributedMiniBatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InputDistributedMiniBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.InputDistributedMiniBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.InputDistributedMiniBatch)
    MergeFrom(*source);
  }
}

void InputDistributedMiniBatch::MergeFrom(const InputDistributedMiniBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.InputDistributedMiniBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void InputDistributedMiniBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.InputDistributedMiniBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDistributedMiniBatch::CopyFrom(const InputDistributedMiniBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.InputDistributedMiniBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDistributedMiniBatch::IsInitialized() const {
  return true;
}

void InputDistributedMiniBatch::Swap(InputDistributedMiniBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputDistributedMiniBatch::InternalSwap(InputDistributedMiniBatch* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputDistributedMiniBatch::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputDistributedMiniBatch

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullyConnected::kNumPrevNeuronsFieldNumber;
const int FullyConnected::kNumNeuronsFieldNumber;
const int FullyConnected::kMiniBatchSizeFieldNumber;
const int FullyConnected::kActivationTypeFieldNumber;
const int FullyConnected::kWeightInitializationFieldNumber;
const int FullyConnected::kOptimizerFieldNumber;
const int FullyConnected::kRegularizerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullyConnected::FullyConnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.FullyConnected)
}
FullyConnected::FullyConnected(const FullyConnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      regularizer_(from.regularizer_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.activation_type().size() > 0) {
    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.weight_initialization().size() > 0) {
    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.optimizer().size() > 0) {
    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
  ::memcpy(&num_prev_neurons_, &from.num_prev_neurons_,
    reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_prev_neurons_) + sizeof(mini_batch_size_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.FullyConnected)
}

void FullyConnected::SharedCtor() {
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_prev_neurons_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_prev_neurons_) + sizeof(mini_batch_size_));
  _cached_size_ = 0;
}

FullyConnected::~FullyConnected() {
  // @@protoc_insertion_point(destructor:lbann_data.FullyConnected)
  SharedDtor();
}

void FullyConnected::SharedDtor() {
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FullyConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullyConnected::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[13].descriptor;
}

const FullyConnected& FullyConnected::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

FullyConnected* FullyConnected::New(::google::protobuf::Arena* arena) const {
  FullyConnected* n = new FullyConnected;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullyConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.FullyConnected)
  regularizer_.Clear();
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_prev_neurons_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_prev_neurons_) + sizeof(mini_batch_size_));
}

bool FullyConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.FullyConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_prev_neurons = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_prev_neurons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_neurons = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_neurons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mini_batch_size = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string activation_type = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.FullyConnected.activation_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string weight_initialization = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_initialization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weight_initialization().data(), this->weight_initialization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.FullyConnected.weight_initialization"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string optimizer = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optimizer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizer().data(), this->optimizer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.FullyConnected.optimizer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string regularizer = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regularizer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->regularizer(this->regularizer_size() - 1).data(),
            this->regularizer(this->regularizer_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.FullyConnected.regularizer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.FullyConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.FullyConnected)
  return false;
#undef DO_
}

void FullyConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.FullyConnected)
  // int32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_prev_neurons(), output);
  }

  // int32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_neurons(), output);
  }

  // int32 mini_batch_size = 3;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mini_batch_size(), output);
  }

  // string activation_type = 4;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->activation_type(), output);
  }

  // string weight_initialization = 5;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.weight_initialization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->weight_initialization(), output);
  }

  // string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.optimizer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->optimizer(), output);
  }

  // repeated string regularizer = 11;
  for (int i = 0; i < this->regularizer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regularizer(i).data(), this->regularizer(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.regularizer");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->regularizer(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.FullyConnected)
}

::google::protobuf::uint8* FullyConnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.FullyConnected)
  // int32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_prev_neurons(), target);
  }

  // int32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_neurons(), target);
  }

  // int32 mini_batch_size = 3;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mini_batch_size(), target);
  }

  // string activation_type = 4;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activation_type(), target);
  }

  // string weight_initialization = 5;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.weight_initialization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weight_initialization(), target);
  }

  // string optimizer = 10;
  if (this->optimizer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizer().data(), this->optimizer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.optimizer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->optimizer(), target);
  }

  // repeated string regularizer = 11;
  for (int i = 0; i < this->regularizer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->regularizer(i).data(), this->regularizer(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.FullyConnected.regularizer");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->regularizer(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.FullyConnected)
  return target;
}

size_t FullyConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.FullyConnected)
  size_t total_size = 0;

  // repeated string regularizer = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->regularizer_size());
  for (int i = 0; i < this->regularizer_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regularizer(i));
  }

  // string activation_type = 4;
  if (this->activation_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // string weight_initialization = 5;
  if (this->weight_initialization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight_initialization());
  }

  // string optimizer = 10;
  if (this->optimizer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->optimizer());
  }

  // int32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_prev_neurons());
  }

  // int32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_neurons());
  }

  // int32 mini_batch_size = 3;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullyConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.FullyConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const FullyConnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FullyConnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.FullyConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.FullyConnected)
    MergeFrom(*source);
  }
}

void FullyConnected::MergeFrom(const FullyConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.FullyConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  regularizer_.MergeFrom(from.regularizer_);
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  if (from.weight_initialization().size() > 0) {

    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  if (from.optimizer().size() > 0) {

    optimizer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.optimizer_);
  }
  if (from.num_prev_neurons() != 0) {
    set_num_prev_neurons(from.num_prev_neurons());
  }
  if (from.num_neurons() != 0) {
    set_num_neurons(from.num_neurons());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void FullyConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.FullyConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullyConnected::CopyFrom(const FullyConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.FullyConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullyConnected::IsInitialized() const {
  return true;
}

void FullyConnected::Swap(FullyConnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullyConnected::InternalSwap(FullyConnected* other) {
  regularizer_.UnsafeArenaSwap(&other->regularizer_);
  activation_type_.Swap(&other->activation_type_);
  weight_initialization_.Swap(&other->weight_initialization_);
  optimizer_.Swap(&other->optimizer_);
  std::swap(num_prev_neurons_, other->num_prev_neurons_);
  std::swap(num_neurons_, other->num_neurons_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FullyConnected::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullyConnected

// int32 num_prev_neurons = 1;
void FullyConnected::clear_num_prev_neurons() {
  num_prev_neurons_ = 0;
}
::google::protobuf::int32 FullyConnected::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_prev_neurons)
  return num_prev_neurons_;
}
void FullyConnected::set_num_prev_neurons(::google::protobuf::int32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_prev_neurons)
}

// int32 num_neurons = 2;
void FullyConnected::clear_num_neurons() {
  num_neurons_ = 0;
}
::google::protobuf::int32 FullyConnected::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_neurons)
  return num_neurons_;
}
void FullyConnected::set_num_neurons(::google::protobuf::int32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_neurons)
}

// int32 mini_batch_size = 3;
void FullyConnected::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
::google::protobuf::int32 FullyConnected::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.mini_batch_size)
  return mini_batch_size_;
}
void FullyConnected::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.mini_batch_size)
}

// string activation_type = 4;
void FullyConnected::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FullyConnected::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.activation_type)
  return activation_type_.GetNoArena();
}
void FullyConnected::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.activation_type)
}
#if LANG_CXX11
void FullyConnected::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.FullyConnected.activation_type)
}
#endif
void FullyConnected::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.activation_type)
}
void FullyConnected::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.activation_type)
}
::std::string* FullyConnected::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FullyConnected::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FullyConnected::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.activation_type)
}

// string weight_initialization = 5;
void FullyConnected::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FullyConnected::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.weight_initialization)
  return weight_initialization_.GetNoArena();
}
void FullyConnected::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.weight_initialization)
}
#if LANG_CXX11
void FullyConnected::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.FullyConnected.weight_initialization)
}
#endif
void FullyConnected::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.weight_initialization)
}
void FullyConnected::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.weight_initialization)
}
::std::string* FullyConnected::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FullyConnected::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FullyConnected::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.weight_initialization)
}

// string optimizer = 10;
void FullyConnected::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FullyConnected::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.optimizer)
  return optimizer_.GetNoArena();
}
void FullyConnected::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.optimizer)
}
#if LANG_CXX11
void FullyConnected::set_optimizer(::std::string&& value) {
  
  optimizer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.FullyConnected.optimizer)
}
#endif
void FullyConnected::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.optimizer)
}
void FullyConnected::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.optimizer)
}
::std::string* FullyConnected::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FullyConnected::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FullyConnected::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.optimizer)
}

// repeated string regularizer = 11;
int FullyConnected::regularizer_size() const {
  return regularizer_.size();
}
void FullyConnected::clear_regularizer() {
  regularizer_.Clear();
}
const ::std::string& FullyConnected::regularizer(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.regularizer)
  return regularizer_.Get(index);
}
::std::string* FullyConnected::mutable_regularizer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.regularizer)
  return regularizer_.Mutable(index);
}
void FullyConnected::set_regularizer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.regularizer)
  regularizer_.Mutable(index)->assign(value);
}
void FullyConnected::set_regularizer(int index, const char* value) {
  regularizer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.regularizer)
}
void FullyConnected::set_regularizer(int index, const char* value, size_t size) {
  regularizer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.regularizer)
}
::std::string* FullyConnected::add_regularizer() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.FullyConnected.regularizer)
  return regularizer_.Add();
}
void FullyConnected::add_regularizer(const ::std::string& value) {
  regularizer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.FullyConnected.regularizer)
}
void FullyConnected::add_regularizer(const char* value) {
  regularizer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.FullyConnected.regularizer)
}
void FullyConnected::add_regularizer(const char* value, size_t size) {
  regularizer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.FullyConnected.regularizer)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
FullyConnected::regularizer() const {
  // @@protoc_insertion_point(field_list:lbann_data.FullyConnected.regularizer)
  return regularizer_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
FullyConnected::mutable_regularizer() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.FullyConnected.regularizer)
  return &regularizer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pooling::kNumDimsFieldNumber;
const int Pooling::kNumChannelsFieldNumber;
const int Pooling::kInputDimsFieldNumber;
const int Pooling::kPoolDimsFieldNumber;
const int Pooling::kPoolPadsFieldNumber;
const int Pooling::kPoolStridesFieldNumber;
const int Pooling::kPoolModeFieldNumber;
const int Pooling::kActivationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pooling::Pooling()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Pooling)
}
Pooling::Pooling(const Pooling& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      input_dims_(from.input_dims_),
      pool_dims_(from.pool_dims_),
      pool_pads_(from.pool_pads_),
      pool_strides_(from.pool_strides_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pool_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pool_mode().size() > 0) {
    pool_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_mode_);
  }
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.activation_type().size() > 0) {
    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  ::memcpy(&num_dims_, &from.num_dims_,
    reinterpret_cast<char*>(&num_channels_) -
    reinterpret_cast<char*>(&num_dims_) + sizeof(num_channels_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.Pooling)
}

void Pooling::SharedCtor() {
  pool_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_dims_, 0, reinterpret_cast<char*>(&num_channels_) -
    reinterpret_cast<char*>(&num_dims_) + sizeof(num_channels_));
  _cached_size_ = 0;
}

Pooling::~Pooling() {
  // @@protoc_insertion_point(destructor:lbann_data.Pooling)
  SharedDtor();
}

void Pooling::SharedDtor() {
  pool_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Pooling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pooling::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[14].descriptor;
}

const Pooling& Pooling::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pooling* Pooling::New(::google::protobuf::Arena* arena) const {
  Pooling* n = new Pooling;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pooling::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Pooling)
  input_dims_.Clear();
  pool_dims_.Clear();
  pool_pads_.Clear();
  pool_strides_.Clear();
  pool_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_dims_, 0, reinterpret_cast<char*>(&num_channels_) -
    reinterpret_cast<char*>(&num_dims_) + sizeof(num_channels_));
}

bool Pooling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Pooling)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_dims = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_dims_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_channels = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 input_dims = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dims())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_input_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pool_dims = 4;
      case 4: {
        if (tag == 34u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pool_dims())));
        } else if (tag == 32u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_pool_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pool_pads = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pool_pads())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_pool_pads())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pool_strides = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pool_strides())));
        } else if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_pool_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pool_mode = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pool_mode().data(), this->pool_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Pooling.pool_mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string activation_type = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Pooling.activation_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Pooling)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Pooling)
  return false;
#undef DO_
}

void Pooling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Pooling)
  // int32 num_dims = 1;
  if (this->num_dims() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_dims(), output);
  }

  // int32 num_channels = 2;
  if (this->num_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_channels(), output);
  }

  // repeated int32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_dims(i), output);
  }

  // repeated int32 pool_dims = 4;
  if (this->pool_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pool_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->pool_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pool_dims(i), output);
  }

  // repeated int32 pool_pads = 5;
  if (this->pool_pads_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pool_pads_cached_byte_size_);
  }
  for (int i = 0; i < this->pool_pads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pool_pads(i), output);
  }

  // repeated int32 pool_strides = 6;
  if (this->pool_strides_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pool_strides_cached_byte_size_);
  }
  for (int i = 0; i < this->pool_strides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->pool_strides(i), output);
  }

  // string pool_mode = 7;
  if (this->pool_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool_mode().data(), this->pool_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.pool_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pool_mode(), output);
  }

  // string activation_type = 8;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->activation_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Pooling)
}

::google::protobuf::uint8* Pooling::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Pooling)
  // int32 num_dims = 1;
  if (this->num_dims() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_dims(), target);
  }

  // int32 num_channels = 2;
  if (this->num_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_channels(), target);
  }

  // repeated int32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_dims(i), target);
  }

  // repeated int32 pool_dims = 4;
  if (this->pool_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pool_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pool_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pool_dims(i), target);
  }

  // repeated int32 pool_pads = 5;
  if (this->pool_pads_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pool_pads_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pool_pads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pool_pads(i), target);
  }

  // repeated int32 pool_strides = 6;
  if (this->pool_strides_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pool_strides_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pool_strides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pool_strides(i), target);
  }

  // string pool_mode = 7;
  if (this->pool_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pool_mode().data(), this->pool_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.pool_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pool_mode(), target);
  }

  // string activation_type = 8;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Pooling.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->activation_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Pooling)
  return target;
}

size_t Pooling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Pooling)
  size_t total_size = 0;

  // repeated int32 input_dims = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->input_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 pool_dims = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->pool_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pool_dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 pool_pads = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->pool_pads_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pool_pads_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 pool_strides = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->pool_strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pool_strides_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string pool_mode = 7;
  if (this->pool_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pool_mode());
  }

  // string activation_type = 8;
  if (this->activation_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // int32 num_dims = 1;
  if (this->num_dims() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_dims());
  }

  // int32 num_channels = 2;
  if (this->num_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_channels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pooling::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Pooling)
  GOOGLE_DCHECK_NE(&from, this);
  const Pooling* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pooling>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Pooling)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Pooling)
    MergeFrom(*source);
  }
}

void Pooling::MergeFrom(const Pooling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Pooling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_dims_.MergeFrom(from.input_dims_);
  pool_dims_.MergeFrom(from.pool_dims_);
  pool_pads_.MergeFrom(from.pool_pads_);
  pool_strides_.MergeFrom(from.pool_strides_);
  if (from.pool_mode().size() > 0) {

    pool_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pool_mode_);
  }
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  if (from.num_dims() != 0) {
    set_num_dims(from.num_dims());
  }
  if (from.num_channels() != 0) {
    set_num_channels(from.num_channels());
  }
}

void Pooling::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Pooling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pooling::CopyFrom(const Pooling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Pooling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pooling::IsInitialized() const {
  return true;
}

void Pooling::Swap(Pooling* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pooling::InternalSwap(Pooling* other) {
  input_dims_.UnsafeArenaSwap(&other->input_dims_);
  pool_dims_.UnsafeArenaSwap(&other->pool_dims_);
  pool_pads_.UnsafeArenaSwap(&other->pool_pads_);
  pool_strides_.UnsafeArenaSwap(&other->pool_strides_);
  pool_mode_.Swap(&other->pool_mode_);
  activation_type_.Swap(&other->activation_type_);
  std::swap(num_dims_, other->num_dims_);
  std::swap(num_channels_, other->num_channels_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pooling::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pooling

// int32 num_dims = 1;
void Pooling::clear_num_dims() {
  num_dims_ = 0;
}
::google::protobuf::int32 Pooling::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_dims)
  return num_dims_;
}
void Pooling::set_num_dims(::google::protobuf::int32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_dims)
}

// int32 num_channels = 2;
void Pooling::clear_num_channels() {
  num_channels_ = 0;
}
::google::protobuf::int32 Pooling::num_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_channels)
  return num_channels_;
}
void Pooling::set_num_channels(::google::protobuf::int32 value) {
  
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_channels)
}

// repeated int32 input_dims = 3;
int Pooling::input_dims_size() const {
  return input_dims_.size();
}
void Pooling::clear_input_dims() {
  input_dims_.Clear();
}
::google::protobuf::int32 Pooling::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.input_dims)
  return input_dims_.Get(index);
}
void Pooling::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.input_dims)
}
void Pooling::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.input_dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.input_dims)
  return input_dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.input_dims)
  return &input_dims_;
}

// repeated int32 pool_dims = 4;
int Pooling::pool_dims_size() const {
  return pool_dims_.size();
}
void Pooling::clear_pool_dims() {
  pool_dims_.Clear();
}
::google::protobuf::int32 Pooling::pool_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_dims)
  return pool_dims_.Get(index);
}
void Pooling::set_pool_dims(int index, ::google::protobuf::int32 value) {
  pool_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_dims)
}
void Pooling::add_pool_dims(::google::protobuf::int32 value) {
  pool_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_dims)
  return pool_dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_dims)
  return &pool_dims_;
}

// repeated int32 pool_pads = 5;
int Pooling::pool_pads_size() const {
  return pool_pads_.size();
}
void Pooling::clear_pool_pads() {
  pool_pads_.Clear();
}
::google::protobuf::int32 Pooling::pool_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_pads)
  return pool_pads_.Get(index);
}
void Pooling::set_pool_pads(int index, ::google::protobuf::int32 value) {
  pool_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_pads)
}
void Pooling::add_pool_pads(::google::protobuf::int32 value) {
  pool_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_pads)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_pads)
  return pool_pads_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_pads)
  return &pool_pads_;
}

// repeated int32 pool_strides = 6;
int Pooling::pool_strides_size() const {
  return pool_strides_.size();
}
void Pooling::clear_pool_strides() {
  pool_strides_.Clear();
}
::google::protobuf::int32 Pooling::pool_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_strides)
  return pool_strides_.Get(index);
}
void Pooling::set_pool_strides(int index, ::google::protobuf::int32 value) {
  pool_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_strides)
}
void Pooling::add_pool_strides(::google::protobuf::int32 value) {
  pool_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_strides)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_strides)
  return pool_strides_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_strides)
  return &pool_strides_;
}

// string pool_mode = 7;
void Pooling::clear_pool_mode() {
  pool_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Pooling::pool_mode() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_mode)
  return pool_mode_.GetNoArena();
}
void Pooling::set_pool_mode(const ::std::string& value) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_mode)
}
#if LANG_CXX11
void Pooling::set_pool_mode(::std::string&& value) {
  
  pool_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Pooling.pool_mode)
}
#endif
void Pooling::set_pool_mode(const char* value) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Pooling.pool_mode)
}
void Pooling::set_pool_mode(const char* value, size_t size) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Pooling.pool_mode)
}
::std::string* Pooling::mutable_pool_mode() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Pooling.pool_mode)
  return pool_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pooling::release_pool_mode() {
  // @@protoc_insertion_point(field_release:lbann_data.Pooling.pool_mode)
  
  return pool_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pooling::set_allocated_pool_mode(::std::string* pool_mode) {
  if (pool_mode != NULL) {
    
  } else {
    
  }
  pool_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_mode);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Pooling.pool_mode)
}

// string activation_type = 8;
void Pooling::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Pooling::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.activation_type)
  return activation_type_.GetNoArena();
}
void Pooling::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.activation_type)
}
#if LANG_CXX11
void Pooling::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Pooling.activation_type)
}
#endif
void Pooling::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Pooling.activation_type)
}
void Pooling::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Pooling.activation_type)
}
::std::string* Pooling::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Pooling.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pooling::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Pooling.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pooling::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Pooling.activation_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Convolution::kNumDimsFieldNumber;
const int Convolution::kNumInputChannelsFieldNumber;
const int Convolution::kInputDimsFieldNumber;
const int Convolution::kNumOutputChannelsFieldNumber;
const int Convolution::kFilterDimsFieldNumber;
const int Convolution::kConvPadsFieldNumber;
const int Convolution::kConvStridesFieldNumber;
const int Convolution::kMiniBatchSizeFieldNumber;
const int Convolution::kWeightInitializationFieldNumber;
const int Convolution::kActivationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Convolution::Convolution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Convolution)
}
Convolution::Convolution(const Convolution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      input_dims_(from.input_dims_),
      filter_dims_(from.filter_dims_),
      conv_pads_(from.conv_pads_),
      conv_strides_(from.conv_strides_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.weight_initialization().size() > 0) {
    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.activation_type().size() > 0) {
    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  ::memcpy(&num_dims_, &from.num_dims_,
    reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_dims_) + sizeof(mini_batch_size_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.Convolution)
}

void Convolution::SharedCtor() {
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_dims_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_dims_) + sizeof(mini_batch_size_));
  _cached_size_ = 0;
}

Convolution::~Convolution() {
  // @@protoc_insertion_point(destructor:lbann_data.Convolution)
  SharedDtor();
}

void Convolution::SharedDtor() {
  weight_initialization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Convolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Convolution::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[15].descriptor;
}

const Convolution& Convolution::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Convolution* Convolution::New(::google::protobuf::Arena* arena) const {
  Convolution* n = new Convolution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Convolution::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Convolution)
  input_dims_.Clear();
  filter_dims_.Clear();
  conv_pads_.Clear();
  conv_strides_.Clear();
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_dims_, 0, reinterpret_cast<char*>(&mini_batch_size_) -
    reinterpret_cast<char*>(&num_dims_) + sizeof(mini_batch_size_));
}

bool Convolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Convolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_dims = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_dims_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_input_channels = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_input_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 input_dims = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dims())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_input_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_output_channels = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_output_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 filter_dims = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_filter_dims())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_filter_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 conv_pads = 6;
      case 6: {
        if (tag == 50u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_conv_pads())));
        } else if (tag == 48u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_conv_pads())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 conv_strides = 7;
      case 7: {
        if (tag == 58u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_conv_strides())));
        } else if (tag == 56u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_conv_strides())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mini_batch_size = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string weight_initialization = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_initialization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weight_initialization().data(), this->weight_initialization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Convolution.weight_initialization"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string activation_type = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Convolution.activation_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Convolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Convolution)
  return false;
#undef DO_
}

void Convolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Convolution)
  // int32 num_dims = 1;
  if (this->num_dims() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_dims(), output);
  }

  // int32 num_input_channels = 2;
  if (this->num_input_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_input_channels(), output);
  }

  // repeated int32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_dims(i), output);
  }

  // int32 num_output_channels = 4;
  if (this->num_output_channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_output_channels(), output);
  }

  // repeated int32 filter_dims = 5;
  if (this->filter_dims_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_filter_dims_cached_byte_size_);
  }
  for (int i = 0; i < this->filter_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->filter_dims(i), output);
  }

  // repeated int32 conv_pads = 6;
  if (this->conv_pads_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_conv_pads_cached_byte_size_);
  }
  for (int i = 0; i < this->conv_pads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->conv_pads(i), output);
  }

  // repeated int32 conv_strides = 7;
  if (this->conv_strides_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_conv_strides_cached_byte_size_);
  }
  for (int i = 0; i < this->conv_strides_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->conv_strides(i), output);
  }

  // int32 mini_batch_size = 8;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mini_batch_size(), output);
  }

  // string weight_initialization = 9;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.weight_initialization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->weight_initialization(), output);
  }

  // string activation_type = 10;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->activation_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Convolution)
}

::google::protobuf::uint8* Convolution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Convolution)
  // int32 num_dims = 1;
  if (this->num_dims() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_dims(), target);
  }

  // int32 num_input_channels = 2;
  if (this->num_input_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_input_channels(), target);
  }

  // repeated int32 input_dims = 3;
  if (this->input_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _input_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->input_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_dims(i), target);
  }

  // int32 num_output_channels = 4;
  if (this->num_output_channels() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_output_channels(), target);
  }

  // repeated int32 filter_dims = 5;
  if (this->filter_dims_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _filter_dims_cached_byte_size_, target);
  }
  for (int i = 0; i < this->filter_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->filter_dims(i), target);
  }

  // repeated int32 conv_pads = 6;
  if (this->conv_pads_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _conv_pads_cached_byte_size_, target);
  }
  for (int i = 0; i < this->conv_pads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->conv_pads(i), target);
  }

  // repeated int32 conv_strides = 7;
  if (this->conv_strides_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _conv_strides_cached_byte_size_, target);
  }
  for (int i = 0; i < this->conv_strides_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->conv_strides(i), target);
  }

  // int32 mini_batch_size = 8;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mini_batch_size(), target);
  }

  // string weight_initialization = 9;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.weight_initialization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->weight_initialization(), target);
  }

  // string activation_type = 10;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Convolution.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->activation_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Convolution)
  return target;
}

size_t Convolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Convolution)
  size_t total_size = 0;

  // repeated int32 input_dims = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->input_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 filter_dims = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->filter_dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _filter_dims_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 conv_pads = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->conv_pads_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _conv_pads_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 conv_strides = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->conv_strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _conv_strides_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string weight_initialization = 9;
  if (this->weight_initialization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight_initialization());
  }

  // string activation_type = 10;
  if (this->activation_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // int32 num_dims = 1;
  if (this->num_dims() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_dims());
  }

  // int32 num_input_channels = 2;
  if (this->num_input_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_input_channels());
  }

  // int32 num_output_channels = 4;
  if (this->num_output_channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_output_channels());
  }

  // int32 mini_batch_size = 8;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Convolution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Convolution)
  GOOGLE_DCHECK_NE(&from, this);
  const Convolution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Convolution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Convolution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Convolution)
    MergeFrom(*source);
  }
}

void Convolution::MergeFrom(const Convolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Convolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_dims_.MergeFrom(from.input_dims_);
  filter_dims_.MergeFrom(from.filter_dims_);
  conv_pads_.MergeFrom(from.conv_pads_);
  conv_strides_.MergeFrom(from.conv_strides_);
  if (from.weight_initialization().size() > 0) {

    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  if (from.num_dims() != 0) {
    set_num_dims(from.num_dims());
  }
  if (from.num_input_channels() != 0) {
    set_num_input_channels(from.num_input_channels());
  }
  if (from.num_output_channels() != 0) {
    set_num_output_channels(from.num_output_channels());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
}

void Convolution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Convolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Convolution::CopyFrom(const Convolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Convolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Convolution::IsInitialized() const {
  return true;
}

void Convolution::Swap(Convolution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Convolution::InternalSwap(Convolution* other) {
  input_dims_.UnsafeArenaSwap(&other->input_dims_);
  filter_dims_.UnsafeArenaSwap(&other->filter_dims_);
  conv_pads_.UnsafeArenaSwap(&other->conv_pads_);
  conv_strides_.UnsafeArenaSwap(&other->conv_strides_);
  weight_initialization_.Swap(&other->weight_initialization_);
  activation_type_.Swap(&other->activation_type_);
  std::swap(num_dims_, other->num_dims_);
  std::swap(num_input_channels_, other->num_input_channels_);
  std::swap(num_output_channels_, other->num_output_channels_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Convolution::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Convolution

// int32 num_dims = 1;
void Convolution::clear_num_dims() {
  num_dims_ = 0;
}
::google::protobuf::int32 Convolution::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_dims)
  return num_dims_;
}
void Convolution::set_num_dims(::google::protobuf::int32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_dims)
}

// int32 num_input_channels = 2;
void Convolution::clear_num_input_channels() {
  num_input_channels_ = 0;
}
::google::protobuf::int32 Convolution::num_input_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_input_channels)
  return num_input_channels_;
}
void Convolution::set_num_input_channels(::google::protobuf::int32 value) {
  
  num_input_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_input_channels)
}

// repeated int32 input_dims = 3;
int Convolution::input_dims_size() const {
  return input_dims_.size();
}
void Convolution::clear_input_dims() {
  input_dims_.Clear();
}
::google::protobuf::int32 Convolution::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.input_dims)
  return input_dims_.Get(index);
}
void Convolution::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.input_dims)
}
void Convolution::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.input_dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.input_dims)
  return input_dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.input_dims)
  return &input_dims_;
}

// int32 num_output_channels = 4;
void Convolution::clear_num_output_channels() {
  num_output_channels_ = 0;
}
::google::protobuf::int32 Convolution::num_output_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_output_channels)
  return num_output_channels_;
}
void Convolution::set_num_output_channels(::google::protobuf::int32 value) {
  
  num_output_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_output_channels)
}

// repeated int32 filter_dims = 5;
int Convolution::filter_dims_size() const {
  return filter_dims_.size();
}
void Convolution::clear_filter_dims() {
  filter_dims_.Clear();
}
::google::protobuf::int32 Convolution::filter_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.filter_dims)
  return filter_dims_.Get(index);
}
void Convolution::set_filter_dims(int index, ::google::protobuf::int32 value) {
  filter_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.filter_dims)
}
void Convolution::add_filter_dims(::google::protobuf::int32 value) {
  filter_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.filter_dims)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::filter_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.filter_dims)
  return filter_dims_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_filter_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.filter_dims)
  return &filter_dims_;
}

// repeated int32 conv_pads = 6;
int Convolution::conv_pads_size() const {
  return conv_pads_.size();
}
void Convolution::clear_conv_pads() {
  conv_pads_.Clear();
}
::google::protobuf::int32 Convolution::conv_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_pads)
  return conv_pads_.Get(index);
}
void Convolution::set_conv_pads(int index, ::google::protobuf::int32 value) {
  conv_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_pads)
}
void Convolution::add_conv_pads(::google::protobuf::int32 value) {
  conv_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_pads)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::conv_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_pads)
  return conv_pads_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_conv_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_pads)
  return &conv_pads_;
}

// repeated int32 conv_strides = 7;
int Convolution::conv_strides_size() const {
  return conv_strides_.size();
}
void Convolution::clear_conv_strides() {
  conv_strides_.Clear();
}
::google::protobuf::int32 Convolution::conv_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_strides)
  return conv_strides_.Get(index);
}
void Convolution::set_conv_strides(int index, ::google::protobuf::int32 value) {
  conv_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_strides)
}
void Convolution::add_conv_strides(::google::protobuf::int32 value) {
  conv_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_strides)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::conv_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_strides)
  return conv_strides_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_conv_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_strides)
  return &conv_strides_;
}

// int32 mini_batch_size = 8;
void Convolution::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
::google::protobuf::int32 Convolution::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.mini_batch_size)
  return mini_batch_size_;
}
void Convolution::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.mini_batch_size)
}

// string weight_initialization = 9;
void Convolution::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Convolution::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.weight_initialization)
  return weight_initialization_.GetNoArena();
}
void Convolution::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.weight_initialization)
}
#if LANG_CXX11
void Convolution::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Convolution.weight_initialization)
}
#endif
void Convolution::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Convolution.weight_initialization)
}
void Convolution::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Convolution.weight_initialization)
}
::std::string* Convolution::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Convolution.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Convolution::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.Convolution.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Convolution::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Convolution.weight_initialization)
}

// string activation_type = 10;
void Convolution::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Convolution::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.activation_type)
  return activation_type_.GetNoArena();
}
void Convolution::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.activation_type)
}
#if LANG_CXX11
void Convolution::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Convolution.activation_type)
}
#endif
void Convolution::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Convolution.activation_type)
}
void Convolution::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Convolution.activation_type)
}
::std::string* Convolution::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Convolution.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Convolution::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Convolution.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Convolution::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Convolution.activation_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Softmax::kNumPrevNeuronsFieldNumber;
const int Softmax::kNumNeuronsFieldNumber;
const int Softmax::kWeightInitializationFieldNumber;
const int Softmax::kActivationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Softmax::Softmax()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Softmax)
}
Softmax::Softmax(const Softmax& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.weight_initialization().size() > 0) {
    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.activation_type().size() > 0) {
    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  ::memcpy(&num_prev_neurons_, &from.num_prev_neurons_,
    reinterpret_cast<char*>(&num_neurons_) -
    reinterpret_cast<char*>(&num_prev_neurons_) + sizeof(num_neurons_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.Softmax)
}

void Softmax::SharedCtor() {
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_prev_neurons_, 0, reinterpret_cast<char*>(&num_neurons_) -
    reinterpret_cast<char*>(&num_prev_neurons_) + sizeof(num_neurons_));
  _cached_size_ = 0;
}

Softmax::~Softmax() {
  // @@protoc_insertion_point(destructor:lbann_data.Softmax)
  SharedDtor();
}

void Softmax::SharedDtor() {
  weight_initialization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Softmax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Softmax::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[16].descriptor;
}

const Softmax& Softmax::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Softmax* Softmax::New(::google::protobuf::Arena* arena) const {
  Softmax* n = new Softmax;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Softmax::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Softmax)
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_prev_neurons_, 0, reinterpret_cast<char*>(&num_neurons_) -
    reinterpret_cast<char*>(&num_prev_neurons_) + sizeof(num_neurons_));
}

bool Softmax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Softmax)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_prev_neurons = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_prev_neurons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_neurons = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_neurons_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string weight_initialization = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_initialization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weight_initialization().data(), this->weight_initialization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Softmax.weight_initialization"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string activation_type = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.Softmax.activation_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Softmax)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Softmax)
  return false;
#undef DO_
}

void Softmax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Softmax)
  // int32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_prev_neurons(), output);
  }

  // int32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_neurons(), output);
  }

  // string weight_initialization = 3;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Softmax.weight_initialization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->weight_initialization(), output);
  }

  // string activation_type = 4;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Softmax.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->activation_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.Softmax)
}

::google::protobuf::uint8* Softmax::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Softmax)
  // int32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_prev_neurons(), target);
  }

  // int32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_neurons(), target);
  }

  // string weight_initialization = 3;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Softmax.weight_initialization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight_initialization(), target);
  }

  // string activation_type = 4;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.Softmax.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->activation_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Softmax)
  return target;
}

size_t Softmax::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Softmax)
  size_t total_size = 0;

  // string weight_initialization = 3;
  if (this->weight_initialization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight_initialization());
  }

  // string activation_type = 4;
  if (this->activation_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // int32 num_prev_neurons = 1;
  if (this->num_prev_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_prev_neurons());
  }

  // int32 num_neurons = 2;
  if (this->num_neurons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_neurons());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Softmax::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Softmax)
  GOOGLE_DCHECK_NE(&from, this);
  const Softmax* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Softmax>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Softmax)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Softmax)
    MergeFrom(*source);
  }
}

void Softmax::MergeFrom(const Softmax& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Softmax)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.weight_initialization().size() > 0) {

    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  if (from.num_prev_neurons() != 0) {
    set_num_prev_neurons(from.num_prev_neurons());
  }
  if (from.num_neurons() != 0) {
    set_num_neurons(from.num_neurons());
  }
}

void Softmax::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Softmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Softmax::CopyFrom(const Softmax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Softmax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Softmax::IsInitialized() const {
  return true;
}

void Softmax::Swap(Softmax* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Softmax::InternalSwap(Softmax* other) {
  weight_initialization_.Swap(&other->weight_initialization_);
  activation_type_.Swap(&other->activation_type_);
  std::swap(num_prev_neurons_, other->num_prev_neurons_);
  std::swap(num_neurons_, other->num_neurons_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Softmax::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Softmax

// int32 num_prev_neurons = 1;
void Softmax::clear_num_prev_neurons() {
  num_prev_neurons_ = 0;
}
::google::protobuf::int32 Softmax::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_prev_neurons)
  return num_prev_neurons_;
}
void Softmax::set_num_prev_neurons(::google::protobuf::int32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_prev_neurons)
}

// int32 num_neurons = 2;
void Softmax::clear_num_neurons() {
  num_neurons_ = 0;
}
::google::protobuf::int32 Softmax::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_neurons)
  return num_neurons_;
}
void Softmax::set_num_neurons(::google::protobuf::int32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_neurons)
}

// string weight_initialization = 3;
void Softmax::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Softmax::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.weight_initialization)
  return weight_initialization_.GetNoArena();
}
void Softmax::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.weight_initialization)
}
#if LANG_CXX11
void Softmax::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Softmax.weight_initialization)
}
#endif
void Softmax::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Softmax.weight_initialization)
}
void Softmax::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Softmax.weight_initialization)
}
::std::string* Softmax::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Softmax.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Softmax::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.Softmax.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Softmax::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Softmax.weight_initialization)
}

// string activation_type = 4;
void Softmax::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Softmax::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.activation_type)
  return activation_type_.GetNoArena();
}
void Softmax::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.activation_type)
}
#if LANG_CXX11
void Softmax::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Softmax.activation_type)
}
#endif
void Softmax::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Softmax.activation_type)
}
void Softmax::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Softmax.activation_type)
}
::std::string* Softmax::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Softmax.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Softmax::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Softmax.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Softmax::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Softmax.activation_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Target::Target()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.Target)
}
Target::Target(const Target& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.Target)
}

void Target::SharedCtor() {
  _cached_size_ = 0;
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:lbann_data.Target)
  SharedDtor();
}

void Target::SharedDtor() {
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Target::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[17].descriptor;
}

const Target& Target::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

Target* Target::New(::google::protobuf::Arena* arena) const {
  Target* n = new Target;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.Target)
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.Target)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.Target)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.Target)
  return false;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.Target)
  // @@protoc_insertion_point(serialize_end:lbann_data.Target)
}

::google::protobuf::uint8* Target::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.Target)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.Target)
  return target;
}

size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.Target)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.Target)
  GOOGLE_DCHECK_NE(&from, this);
  const Target* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Target>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.Target)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.Target)
    MergeFrom(*source);
  }
}

void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.Target)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Target::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  return true;
}

void Target::Swap(Target* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Target::InternalSwap(Target* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Target::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Target

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetParallel::TargetParallel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.TargetParallel)
}
TargetParallel::TargetParallel(const TargetParallel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.TargetParallel)
}

void TargetParallel::SharedCtor() {
  _cached_size_ = 0;
}

TargetParallel::~TargetParallel() {
  // @@protoc_insertion_point(destructor:lbann_data.TargetParallel)
  SharedDtor();
}

void TargetParallel::SharedDtor() {
}

void TargetParallel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetParallel::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[18].descriptor;
}

const TargetParallel& TargetParallel::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetParallel* TargetParallel::New(::google::protobuf::Arena* arena) const {
  TargetParallel* n = new TargetParallel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetParallel::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.TargetParallel)
}

bool TargetParallel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.TargetParallel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.TargetParallel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.TargetParallel)
  return false;
#undef DO_
}

void TargetParallel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.TargetParallel)
  // @@protoc_insertion_point(serialize_end:lbann_data.TargetParallel)
}

::google::protobuf::uint8* TargetParallel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.TargetParallel)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.TargetParallel)
  return target;
}

size_t TargetParallel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.TargetParallel)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetParallel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.TargetParallel)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetParallel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetParallel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.TargetParallel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.TargetParallel)
    MergeFrom(*source);
  }
}

void TargetParallel::MergeFrom(const TargetParallel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.TargetParallel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void TargetParallel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.TargetParallel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetParallel::CopyFrom(const TargetParallel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.TargetParallel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParallel::IsInitialized() const {
  return true;
}

void TargetParallel::Swap(TargetParallel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetParallel::InternalSwap(TargetParallel* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetParallel::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetParallel

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetDistributedMinibatch::TargetDistributedMinibatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.TargetDistributedMinibatch)
}
TargetDistributedMinibatch::TargetDistributedMinibatch(const TargetDistributedMinibatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lbann_data.TargetDistributedMinibatch)
}

void TargetDistributedMinibatch::SharedCtor() {
  _cached_size_ = 0;
}

TargetDistributedMinibatch::~TargetDistributedMinibatch() {
  // @@protoc_insertion_point(destructor:lbann_data.TargetDistributedMinibatch)
  SharedDtor();
}

void TargetDistributedMinibatch::SharedDtor() {
}

void TargetDistributedMinibatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetDistributedMinibatch::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[19].descriptor;
}

const TargetDistributedMinibatch& TargetDistributedMinibatch::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetDistributedMinibatch* TargetDistributedMinibatch::New(::google::protobuf::Arena* arena) const {
  TargetDistributedMinibatch* n = new TargetDistributedMinibatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetDistributedMinibatch::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.TargetDistributedMinibatch)
}

bool TargetDistributedMinibatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.TargetDistributedMinibatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.TargetDistributedMinibatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.TargetDistributedMinibatch)
  return false;
#undef DO_
}

void TargetDistributedMinibatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.TargetDistributedMinibatch)
  // @@protoc_insertion_point(serialize_end:lbann_data.TargetDistributedMinibatch)
}

::google::protobuf::uint8* TargetDistributedMinibatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.TargetDistributedMinibatch)
  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.TargetDistributedMinibatch)
  return target;
}

size_t TargetDistributedMinibatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.TargetDistributedMinibatch)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetDistributedMinibatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.TargetDistributedMinibatch)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetDistributedMinibatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetDistributedMinibatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.TargetDistributedMinibatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.TargetDistributedMinibatch)
    MergeFrom(*source);
  }
}

void TargetDistributedMinibatch::MergeFrom(const TargetDistributedMinibatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.TargetDistributedMinibatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void TargetDistributedMinibatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.TargetDistributedMinibatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDistributedMinibatch::CopyFrom(const TargetDistributedMinibatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.TargetDistributedMinibatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDistributedMinibatch::IsInitialized() const {
  return true;
}

void TargetDistributedMinibatch::Swap(TargetDistributedMinibatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetDistributedMinibatch::InternalSwap(TargetDistributedMinibatch* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetDistributedMinibatch::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetDistributedMinibatch

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetDistributedMinibatchParallelIO::kNumParallelReadersFieldNumber;
const int TargetDistributedMinibatchParallelIO::kMiniBatchSizeFieldNumber;
const int TargetDistributedMinibatchParallelIO::kSharedDataReaderFieldNumber;
const int TargetDistributedMinibatchParallelIO::kForRegressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetDistributedMinibatchParallelIO::TargetDistributedMinibatchParallelIO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.TargetDistributedMinibatchParallelIO)
}
TargetDistributedMinibatchParallelIO::TargetDistributedMinibatchParallelIO(const TargetDistributedMinibatchParallelIO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_parallel_readers_, &from.num_parallel_readers_,
    reinterpret_cast<char*>(&for_regression_) -
    reinterpret_cast<char*>(&num_parallel_readers_) + sizeof(for_regression_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.TargetDistributedMinibatchParallelIO)
}

void TargetDistributedMinibatchParallelIO::SharedCtor() {
  ::memset(&num_parallel_readers_, 0, reinterpret_cast<char*>(&for_regression_) -
    reinterpret_cast<char*>(&num_parallel_readers_) + sizeof(for_regression_));
  _cached_size_ = 0;
}

TargetDistributedMinibatchParallelIO::~TargetDistributedMinibatchParallelIO() {
  // @@protoc_insertion_point(destructor:lbann_data.TargetDistributedMinibatchParallelIO)
  SharedDtor();
}

void TargetDistributedMinibatchParallelIO::SharedDtor() {
}

void TargetDistributedMinibatchParallelIO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetDistributedMinibatchParallelIO::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[20].descriptor;
}

const TargetDistributedMinibatchParallelIO& TargetDistributedMinibatchParallelIO::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetDistributedMinibatchParallelIO* TargetDistributedMinibatchParallelIO::New(::google::protobuf::Arena* arena) const {
  TargetDistributedMinibatchParallelIO* n = new TargetDistributedMinibatchParallelIO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetDistributedMinibatchParallelIO::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.TargetDistributedMinibatchParallelIO)
  ::memset(&num_parallel_readers_, 0, reinterpret_cast<char*>(&for_regression_) -
    reinterpret_cast<char*>(&num_parallel_readers_) + sizeof(for_regression_));
}

bool TargetDistributedMinibatchParallelIO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.TargetDistributedMinibatchParallelIO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_parallel_readers = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_parallel_readers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mini_batch_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mini_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shared_data_reader = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_data_reader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool for_regression = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_regression_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.TargetDistributedMinibatchParallelIO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.TargetDistributedMinibatchParallelIO)
  return false;
#undef DO_
}

void TargetDistributedMinibatchParallelIO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.TargetDistributedMinibatchParallelIO)
  // int32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_parallel_readers(), output);
  }

  // int32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mini_batch_size(), output);
  }

  // bool shared_data_reader = 3;
  if (this->shared_data_reader() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shared_data_reader(), output);
  }

  // bool for_regression = 4;
  if (this->for_regression() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->for_regression(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.TargetDistributedMinibatchParallelIO)
}

::google::protobuf::uint8* TargetDistributedMinibatchParallelIO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.TargetDistributedMinibatchParallelIO)
  // int32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_parallel_readers(), target);
  }

  // int32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mini_batch_size(), target);
  }

  // bool shared_data_reader = 3;
  if (this->shared_data_reader() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shared_data_reader(), target);
  }

  // bool for_regression = 4;
  if (this->for_regression() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->for_regression(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.TargetDistributedMinibatchParallelIO)
  return target;
}

size_t TargetDistributedMinibatchParallelIO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.TargetDistributedMinibatchParallelIO)
  size_t total_size = 0;

  // int32 num_parallel_readers = 1;
  if (this->num_parallel_readers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_parallel_readers());
  }

  // int32 mini_batch_size = 2;
  if (this->mini_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mini_batch_size());
  }

  // bool shared_data_reader = 3;
  if (this->shared_data_reader() != 0) {
    total_size += 1 + 1;
  }

  // bool for_regression = 4;
  if (this->for_regression() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetDistributedMinibatchParallelIO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.TargetDistributedMinibatchParallelIO)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetDistributedMinibatchParallelIO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetDistributedMinibatchParallelIO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.TargetDistributedMinibatchParallelIO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.TargetDistributedMinibatchParallelIO)
    MergeFrom(*source);
  }
}

void TargetDistributedMinibatchParallelIO::MergeFrom(const TargetDistributedMinibatchParallelIO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.TargetDistributedMinibatchParallelIO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.num_parallel_readers() != 0) {
    set_num_parallel_readers(from.num_parallel_readers());
  }
  if (from.mini_batch_size() != 0) {
    set_mini_batch_size(from.mini_batch_size());
  }
  if (from.shared_data_reader() != 0) {
    set_shared_data_reader(from.shared_data_reader());
  }
  if (from.for_regression() != 0) {
    set_for_regression(from.for_regression());
  }
}

void TargetDistributedMinibatchParallelIO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.TargetDistributedMinibatchParallelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDistributedMinibatchParallelIO::CopyFrom(const TargetDistributedMinibatchParallelIO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.TargetDistributedMinibatchParallelIO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDistributedMinibatchParallelIO::IsInitialized() const {
  return true;
}

void TargetDistributedMinibatchParallelIO::Swap(TargetDistributedMinibatchParallelIO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetDistributedMinibatchParallelIO::InternalSwap(TargetDistributedMinibatchParallelIO* other) {
  std::swap(num_parallel_readers_, other->num_parallel_readers_);
  std::swap(mini_batch_size_, other->mini_batch_size_);
  std::swap(shared_data_reader_, other->shared_data_reader_);
  std::swap(for_regression_, other->for_regression_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetDistributedMinibatchParallelIO::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetDistributedMinibatchParallelIO

// int32 num_parallel_readers = 1;
void TargetDistributedMinibatchParallelIO::clear_num_parallel_readers() {
  num_parallel_readers_ = 0;
}
::google::protobuf::int32 TargetDistributedMinibatchParallelIO::num_parallel_readers() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.num_parallel_readers)
  return num_parallel_readers_;
}
void TargetDistributedMinibatchParallelIO::set_num_parallel_readers(::google::protobuf::int32 value) {
  
  num_parallel_readers_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.num_parallel_readers)
}

// int32 mini_batch_size = 2;
void TargetDistributedMinibatchParallelIO::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
::google::protobuf::int32 TargetDistributedMinibatchParallelIO::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.mini_batch_size)
  return mini_batch_size_;
}
void TargetDistributedMinibatchParallelIO::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.mini_batch_size)
}

// bool shared_data_reader = 3;
void TargetDistributedMinibatchParallelIO::clear_shared_data_reader() {
  shared_data_reader_ = false;
}
bool TargetDistributedMinibatchParallelIO::shared_data_reader() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.shared_data_reader)
  return shared_data_reader_;
}
void TargetDistributedMinibatchParallelIO::set_shared_data_reader(bool value) {
  
  shared_data_reader_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.shared_data_reader)
}

// bool for_regression = 4;
void TargetDistributedMinibatchParallelIO::clear_for_regression() {
  for_regression_ = false;
}
bool TargetDistributedMinibatchParallelIO::for_regression() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.for_regression)
  return for_regression_;
}
void TargetDistributedMinibatchParallelIO::set_for_regression(bool value) {
  
  for_regression_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.for_regression)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemParams::kHostNameFieldNumber;
const int SystemParams::kNumNodesFieldNumber;
const int SystemParams::kNumCoresFieldNumber;
const int SystemParams::kTasksPerNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemParams::SystemParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.SystemParams)
}
SystemParams::SystemParams(const SystemParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_name().size() > 0) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  ::memcpy(&num_nodes_, &from.num_nodes_,
    reinterpret_cast<char*>(&tasks_per_node_) -
    reinterpret_cast<char*>(&num_nodes_) + sizeof(tasks_per_node_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.SystemParams)
}

void SystemParams::SharedCtor() {
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_nodes_, 0, reinterpret_cast<char*>(&tasks_per_node_) -
    reinterpret_cast<char*>(&num_nodes_) + sizeof(tasks_per_node_));
  _cached_size_ = 0;
}

SystemParams::~SystemParams() {
  // @@protoc_insertion_point(destructor:lbann_data.SystemParams)
  SharedDtor();
}

void SystemParams::SharedDtor() {
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemParams::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[21].descriptor;
}

const SystemParams& SystemParams::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemParams* SystemParams::New(::google::protobuf::Arena* arena) const {
  SystemParams* n = new SystemParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemParams::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.SystemParams)
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_nodes_, 0, reinterpret_cast<char*>(&tasks_per_node_) -
    reinterpret_cast<char*>(&num_nodes_) + sizeof(tasks_per_node_));
}

bool SystemParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.SystemParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.SystemParams.host_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_nodes = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_cores = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tasks_per_node = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasks_per_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.SystemParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.SystemParams)
  return false;
#undef DO_
}

void SystemParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.SystemParams)
  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.SystemParams.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // int32 num_nodes = 2;
  if (this->num_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_nodes(), output);
  }

  // int32 num_cores = 3;
  if (this->num_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_cores(), output);
  }

  // int32 tasks_per_node = 4;
  if (this->tasks_per_node() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tasks_per_node(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.SystemParams)
}

::google::protobuf::uint8* SystemParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.SystemParams)
  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.SystemParams.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // int32 num_nodes = 2;
  if (this->num_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_nodes(), target);
  }

  // int32 num_cores = 3;
  if (this->num_cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_cores(), target);
  }

  // int32 tasks_per_node = 4;
  if (this->tasks_per_node() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tasks_per_node(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.SystemParams)
  return target;
}

size_t SystemParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.SystemParams)
  size_t total_size = 0;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // int32 num_nodes = 2;
  if (this->num_nodes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_nodes());
  }

  // int32 num_cores = 3;
  if (this->num_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_cores());
  }

  // int32 tasks_per_node = 4;
  if (this->tasks_per_node() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tasks_per_node());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.SystemParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.SystemParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.SystemParams)
    MergeFrom(*source);
  }
}

void SystemParams::MergeFrom(const SystemParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.SystemParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.num_nodes() != 0) {
    set_num_nodes(from.num_nodes());
  }
  if (from.num_cores() != 0) {
    set_num_cores(from.num_cores());
  }
  if (from.tasks_per_node() != 0) {
    set_tasks_per_node(from.tasks_per_node());
  }
}

void SystemParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.SystemParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemParams::CopyFrom(const SystemParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.SystemParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemParams::IsInitialized() const {
  return true;
}

void SystemParams::Swap(SystemParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemParams::InternalSwap(SystemParams* other) {
  host_name_.Swap(&other->host_name_);
  std::swap(num_nodes_, other->num_nodes_);
  std::swap(num_cores_, other->num_cores_);
  std::swap(tasks_per_node_, other->tasks_per_node_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemParams::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemParams

// string host_name = 1;
void SystemParams::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SystemParams::host_name() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.host_name)
  return host_name_.GetNoArena();
}
void SystemParams::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.host_name)
}
#if LANG_CXX11
void SystemParams::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.SystemParams.host_name)
}
#endif
void SystemParams::set_host_name(const char* value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.SystemParams.host_name)
}
void SystemParams::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.SystemParams.host_name)
}
::std::string* SystemParams::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.SystemParams.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemParams::release_host_name() {
  // @@protoc_insertion_point(field_release:lbann_data.SystemParams.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemParams::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.SystemParams.host_name)
}

// int32 num_nodes = 2;
void SystemParams::clear_num_nodes() {
  num_nodes_ = 0;
}
::google::protobuf::int32 SystemParams::num_nodes() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.num_nodes)
  return num_nodes_;
}
void SystemParams::set_num_nodes(::google::protobuf::int32 value) {
  
  num_nodes_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.num_nodes)
}

// int32 num_cores = 3;
void SystemParams::clear_num_cores() {
  num_cores_ = 0;
}
::google::protobuf::int32 SystemParams::num_cores() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.num_cores)
  return num_cores_;
}
void SystemParams::set_num_cores(::google::protobuf::int32 value) {
  
  num_cores_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.num_cores)
}

// int32 tasks_per_node = 4;
void SystemParams::clear_tasks_per_node() {
  tasks_per_node_ = 0;
}
::google::protobuf::int32 SystemParams::tasks_per_node() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.tasks_per_node)
  return tasks_per_node_;
}
void SystemParams::set_tasks_per_node(::google::protobuf::int32 value) {
  
  tasks_per_node_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.tasks_per_node)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkParams::kNetworkStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkParams::NetworkParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.NetworkParams)
}
NetworkParams::NetworkParams(const NetworkParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.network_str().size() > 0) {
    network_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_str_);
  }
  // @@protoc_insertion_point(copy_constructor:lbann_data.NetworkParams)
}

void NetworkParams::SharedCtor() {
  network_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetworkParams::~NetworkParams() {
  // @@protoc_insertion_point(destructor:lbann_data.NetworkParams)
  SharedDtor();
}

void NetworkParams::SharedDtor() {
  network_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkParams::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[22].descriptor;
}

const NetworkParams& NetworkParams::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkParams* NetworkParams::New(::google::protobuf::Arena* arena) const {
  NetworkParams* n = new NetworkParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkParams::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.NetworkParams)
  network_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetworkParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.NetworkParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string network_str = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network_str().data(), this->network_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.NetworkParams.network_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.NetworkParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.NetworkParams)
  return false;
#undef DO_
}

void NetworkParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.NetworkParams)
  // string network_str = 1;
  if (this->network_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_str().data(), this->network_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.NetworkParams.network_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network_str(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.NetworkParams)
}

::google::protobuf::uint8* NetworkParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.NetworkParams)
  // string network_str = 1;
  if (this->network_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_str().data(), this->network_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.NetworkParams.network_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->network_str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.NetworkParams)
  return target;
}

size_t NetworkParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.NetworkParams)
  size_t total_size = 0;

  // string network_str = 1;
  if (this->network_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.NetworkParams)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetworkParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.NetworkParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.NetworkParams)
    MergeFrom(*source);
  }
}

void NetworkParams::MergeFrom(const NetworkParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.NetworkParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.network_str().size() > 0) {

    network_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_str_);
  }
}

void NetworkParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.NetworkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkParams::CopyFrom(const NetworkParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.NetworkParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkParams::IsInitialized() const {
  return true;
}

void NetworkParams::Swap(NetworkParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkParams::InternalSwap(NetworkParams* other) {
  network_str_.Swap(&other->network_str_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetworkParams::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkParams

// string network_str = 1;
void NetworkParams::clear_network_str() {
  network_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkParams::network_str() const {
  // @@protoc_insertion_point(field_get:lbann_data.NetworkParams.network_str)
  return network_str_.GetNoArena();
}
void NetworkParams::set_network_str(const ::std::string& value) {
  
  network_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.NetworkParams.network_str)
}
#if LANG_CXX11
void NetworkParams::set_network_str(::std::string&& value) {
  
  network_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.NetworkParams.network_str)
}
#endif
void NetworkParams::set_network_str(const char* value) {
  
  network_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.NetworkParams.network_str)
}
void NetworkParams::set_network_str(const char* value, size_t size) {
  
  network_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.NetworkParams.network_str)
}
::std::string* NetworkParams::mutable_network_str() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.NetworkParams.network_str)
  return network_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkParams::release_network_str() {
  // @@protoc_insertion_point(field_release:lbann_data.NetworkParams.network_str)
  
  return network_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkParams::set_allocated_network_str(::std::string* network_str) {
  if (network_str != NULL) {
    
  } else {
    
  }
  network_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_str);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.NetworkParams.network_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerformanceParams::kBlockSizeFieldNumber;
const int PerformanceParams::kMaxParIoSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerformanceParams::PerformanceParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.PerformanceParams)
}
PerformanceParams::PerformanceParams(const PerformanceParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block_size_, &from.block_size_,
    reinterpret_cast<char*>(&max_par_io_size_) -
    reinterpret_cast<char*>(&block_size_) + sizeof(max_par_io_size_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.PerformanceParams)
}

void PerformanceParams::SharedCtor() {
  ::memset(&block_size_, 0, reinterpret_cast<char*>(&max_par_io_size_) -
    reinterpret_cast<char*>(&block_size_) + sizeof(max_par_io_size_));
  _cached_size_ = 0;
}

PerformanceParams::~PerformanceParams() {
  // @@protoc_insertion_point(destructor:lbann_data.PerformanceParams)
  SharedDtor();
}

void PerformanceParams::SharedDtor() {
}

void PerformanceParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerformanceParams::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[23].descriptor;
}

const PerformanceParams& PerformanceParams::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerformanceParams* PerformanceParams::New(::google::protobuf::Arena* arena) const {
  PerformanceParams* n = new PerformanceParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerformanceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.PerformanceParams)
  ::memset(&block_size_, 0, reinterpret_cast<char*>(&max_par_io_size_) -
    reinterpret_cast<char*>(&block_size_) + sizeof(max_par_io_size_));
}

bool PerformanceParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.PerformanceParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 block_size = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_par_io_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_par_io_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.PerformanceParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.PerformanceParams)
  return false;
#undef DO_
}

void PerformanceParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.PerformanceParams)
  // int32 block_size = 1;
  if (this->block_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->block_size(), output);
  }

  // int32 max_par_io_size = 2;
  if (this->max_par_io_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_par_io_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.PerformanceParams)
}

::google::protobuf::uint8* PerformanceParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.PerformanceParams)
  // int32 block_size = 1;
  if (this->block_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->block_size(), target);
  }

  // int32 max_par_io_size = 2;
  if (this->max_par_io_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_par_io_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.PerformanceParams)
  return target;
}

size_t PerformanceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.PerformanceParams)
  size_t total_size = 0;

  // int32 block_size = 1;
  if (this->block_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->block_size());
  }

  // int32 max_par_io_size = 2;
  if (this->max_par_io_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_par_io_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerformanceParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.PerformanceParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformanceParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerformanceParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.PerformanceParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.PerformanceParams)
    MergeFrom(*source);
  }
}

void PerformanceParams::MergeFrom(const PerformanceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.PerformanceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.block_size() != 0) {
    set_block_size(from.block_size());
  }
  if (from.max_par_io_size() != 0) {
    set_max_par_io_size(from.max_par_io_size());
  }
}

void PerformanceParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.PerformanceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformanceParams::CopyFrom(const PerformanceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.PerformanceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceParams::IsInitialized() const {
  return true;
}

void PerformanceParams::Swap(PerformanceParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerformanceParams::InternalSwap(PerformanceParams* other) {
  std::swap(block_size_, other->block_size_);
  std::swap(max_par_io_size_, other->max_par_io_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerformanceParams::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerformanceParams

// int32 block_size = 1;
void PerformanceParams::clear_block_size() {
  block_size_ = 0;
}
::google::protobuf::int32 PerformanceParams::block_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.PerformanceParams.block_size)
  return block_size_;
}
void PerformanceParams::set_block_size(::google::protobuf::int32 value) {
  
  block_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.PerformanceParams.block_size)
}

// int32 max_par_io_size = 2;
void PerformanceParams::clear_max_par_io_size() {
  max_par_io_size_ = 0;
}
::google::protobuf::int32 PerformanceParams::max_par_io_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.PerformanceParams.max_par_io_size)
  return max_par_io_size_;
}
void PerformanceParams::set_max_par_io_size(::google::protobuf::int32 value) {
  
  max_par_io_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.PerformanceParams.max_par_io_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrainingParams::kEnableProfilingFieldNumber;
const int TrainingParams::kRandomSeedFieldNumber;
const int TrainingParams::kShuffleTrainingDataFieldNumber;
const int TrainingParams::kPercentageTrainingSamplesFieldNumber;
const int TrainingParams::kPercentageValidationSamplesFieldNumber;
const int TrainingParams::kPercentageTestingSamplesFieldNumber;
const int TrainingParams::kTestWithTrainDataFieldNumber;
const int TrainingParams::kEpochStartFieldNumber;
const int TrainingParams::kEpochCountFieldNumber;
const int TrainingParams::kMbSizeFieldNumber;
const int TrainingParams::kLearnRateFieldNumber;
const int TrainingParams::kLearnRateMethodFieldNumber;
const int TrainingParams::kLrDecayRateFieldNumber;
const int TrainingParams::kLrDecayCyclesFieldNumber;
const int TrainingParams::kLrMomentumFieldNumber;
const int TrainingParams::kActivationTypeFieldNumber;
const int TrainingParams::kDropoutFieldNumber;
const int TrainingParams::kLambdaFieldNumber;
const int TrainingParams::kWeightInitializationFieldNumber;
const int TrainingParams::kDatasetRootDirFieldNumber;
const int TrainingParams::kSaveImageDirFieldNumber;
const int TrainingParams::kParameterDirFieldNumber;
const int TrainingParams::kSaveModelFieldNumber;
const int TrainingParams::kLoadModelFieldNumber;
const int TrainingParams::kCkptEpochsFieldNumber;
const int TrainingParams::kCkptStepsFieldNumber;
const int TrainingParams::kCkptSecsFieldNumber;
const int TrainingParams::kTrainFileFieldNumber;
const int TrainingParams::kTestFileFieldNumber;
const int TrainingParams::kSummaryDirFieldNumber;
const int TrainingParams::kDumpWeightsFieldNumber;
const int TrainingParams::kDumpActivationsFieldNumber;
const int TrainingParams::kDumpGradientsFieldNumber;
const int TrainingParams::kDumpDirFieldNumber;
const int TrainingParams::kIntermodelCommMethodFieldNumber;
const int TrainingParams::kProcsPerModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrainingParams::TrainingParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_lbann_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann_data.TrainingParams)
}
TrainingParams::TrainingParams(const TrainingParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.activation_type().size() > 0) {
    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.weight_initialization().size() > 0) {
    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  dataset_root_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dataset_root_dir().size() > 0) {
    dataset_root_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_root_dir_);
  }
  save_image_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.save_image_dir().size() > 0) {
    save_image_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_image_dir_);
  }
  parameter_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parameter_dir().size() > 0) {
    parameter_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameter_dir_);
  }
  train_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.train_file().size() > 0) {
    train_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_file_);
  }
  test_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.test_file().size() > 0) {
    test_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_file_);
  }
  summary_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.summary_dir().size() > 0) {
    summary_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_dir_);
  }
  dump_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dump_dir().size() > 0) {
    dump_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_dir_);
  }
  ::memcpy(&random_seed_, &from.random_seed_,
    reinterpret_cast<char*>(&procs_per_model_) -
    reinterpret_cast<char*>(&random_seed_) + sizeof(procs_per_model_));
  // @@protoc_insertion_point(copy_constructor:lbann_data.TrainingParams)
}

void TrainingParams::SharedCtor() {
  activation_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_root_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_image_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&random_seed_, 0, reinterpret_cast<char*>(&procs_per_model_) -
    reinterpret_cast<char*>(&random_seed_) + sizeof(procs_per_model_));
  _cached_size_ = 0;
}

TrainingParams::~TrainingParams() {
  // @@protoc_insertion_point(destructor:lbann_data.TrainingParams)
  SharedDtor();
}

void TrainingParams::SharedDtor() {
  activation_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_root_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_image_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrainingParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainingParams::descriptor() {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[24].descriptor;
}

const TrainingParams& TrainingParams::default_instance() {
  protobuf_lbann_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrainingParams* TrainingParams::New(::google::protobuf::Arena* arena) const {
  TrainingParams* n = new TrainingParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrainingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann_data.TrainingParams)
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_image_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameter_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  train_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dump_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&random_seed_, 0, reinterpret_cast<char*>(&procs_per_model_) -
    reinterpret_cast<char*>(&random_seed_) + sizeof(procs_per_model_));
}

bool TrainingParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann_data.TrainingParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable_profiling = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_profiling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 random_seed = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shuffle_training_data = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shuffle_training_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double percentage_training_samples = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_training_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double percentage_validation_samples = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_validation_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double percentage_testing_samples = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_testing_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 test_with_train_data = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_with_train_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epoch_start = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epoch_count = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mb_size = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mb_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double learn_rate = 11;
      case 11: {
        if (tag == 89u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &learn_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 learn_rate_method = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_rate_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lr_decay_rate = 13;
      case 13: {
        if (tag == 105u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lr_decay_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lr_decay_cycles = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lr_decay_cycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lr_momentum = 15;
      case 15: {
        if (tag == 121u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lr_momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string activation_type = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activation_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->activation_type().data(), this->activation_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.activation_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dropout = 17;
      case 17: {
        if (tag == 137u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lambda = 18;
      case 18: {
        if (tag == 145u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lambda_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string weight_initialization = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight_initialization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weight_initialization().data(), this->weight_initialization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.weight_initialization"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dataset_root_dir = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_root_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dataset_root_dir().data(), this->dataset_root_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.dataset_root_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string save_image_dir = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_image_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->save_image_dir().data(), this->save_image_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.save_image_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parameter_dir = 22;
      case 22: {
        if (tag == 178u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameter_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parameter_dir().data(), this->parameter_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.parameter_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool save_model = 23;
      case 23: {
        if (tag == 184u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool load_model = 24;
      case 24: {
        if (tag == 192u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &load_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ckpt_epochs = 25;
      case 25: {
        if (tag == 200u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ckpt_epochs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ckpt_steps = 26;
      case 26: {
        if (tag == 208u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ckpt_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ckpt_secs = 27;
      case 27: {
        if (tag == 216u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ckpt_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string train_file = 28;
      case 28: {
        if (tag == 226u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->train_file().data(), this->train_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.train_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string test_file = 29;
      case 29: {
        if (tag == 234u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->test_file().data(), this->test_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.test_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string summary_dir = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->summary_dir().data(), this->summary_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.summary_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dump_weights = 31;
      case 31: {
        if (tag == 248u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_weights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dump_activations = 32;
      case 32: {
        if (tag == 256u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_activations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dump_gradients = 33;
      case 33: {
        if (tag == 264u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dump_gradients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dump_dir = 34;
      case 34: {
        if (tag == 274u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dump_dir().data(), this->dump_dir().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann_data.TrainingParams.dump_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 intermodel_comm_method = 35;
      case 35: {
        if (tag == 280u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intermodel_comm_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 procs_per_model = 36;
      case 36: {
        if (tag == 288u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procs_per_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann_data.TrainingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann_data.TrainingParams)
  return false;
#undef DO_
}

void TrainingParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann_data.TrainingParams)
  // bool enable_profiling = 1;
  if (this->enable_profiling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_profiling(), output);
  }

  // int32 random_seed = 2;
  if (this->random_seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->random_seed(), output);
  }

  // int32 shuffle_training_data = 3;
  if (this->shuffle_training_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shuffle_training_data(), output);
  }

  // double percentage_training_samples = 4;
  if (this->percentage_training_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->percentage_training_samples(), output);
  }

  // double percentage_validation_samples = 5;
  if (this->percentage_validation_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->percentage_validation_samples(), output);
  }

  // double percentage_testing_samples = 6;
  if (this->percentage_testing_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->percentage_testing_samples(), output);
  }

  // int32 test_with_train_data = 7;
  if (this->test_with_train_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->test_with_train_data(), output);
  }

  // int32 epoch_start = 8;
  if (this->epoch_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->epoch_start(), output);
  }

  // int32 epoch_count = 9;
  if (this->epoch_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->epoch_count(), output);
  }

  // int32 mb_size = 10;
  if (this->mb_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mb_size(), output);
  }

  // double learn_rate = 11;
  if (this->learn_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->learn_rate(), output);
  }

  // int32 learn_rate_method = 12;
  if (this->learn_rate_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->learn_rate_method(), output);
  }

  // double lr_decay_rate = 13;
  if (this->lr_decay_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lr_decay_rate(), output);
  }

  // int32 lr_decay_cycles = 14;
  if (this->lr_decay_cycles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lr_decay_cycles(), output);
  }

  // double lr_momentum = 15;
  if (this->lr_momentum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lr_momentum(), output);
  }

  // string activation_type = 16;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.activation_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->activation_type(), output);
  }

  // double dropout = 17;
  if (this->dropout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->dropout(), output);
  }

  // double lambda = 18;
  if (this->lambda() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lambda(), output);
  }

  // string weight_initialization = 19;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.weight_initialization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->weight_initialization(), output);
  }

  // string dataset_root_dir = 20;
  if (this->dataset_root_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_root_dir().data(), this->dataset_root_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.dataset_root_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->dataset_root_dir(), output);
  }

  // string save_image_dir = 21;
  if (this->save_image_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->save_image_dir().data(), this->save_image_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.save_image_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->save_image_dir(), output);
  }

  // string parameter_dir = 22;
  if (this->parameter_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameter_dir().data(), this->parameter_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.parameter_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->parameter_dir(), output);
  }

  // bool save_model = 23;
  if (this->save_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->save_model(), output);
  }

  // bool load_model = 24;
  if (this->load_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->load_model(), output);
  }

  // int32 ckpt_epochs = 25;
  if (this->ckpt_epochs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ckpt_epochs(), output);
  }

  // int32 ckpt_steps = 26;
  if (this->ckpt_steps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->ckpt_steps(), output);
  }

  // int32 ckpt_secs = 27;
  if (this->ckpt_secs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ckpt_secs(), output);
  }

  // string train_file = 28;
  if (this->train_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->train_file().data(), this->train_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.train_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->train_file(), output);
  }

  // string test_file = 29;
  if (this->test_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test_file().data(), this->test_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.test_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->test_file(), output);
  }

  // string summary_dir = 30;
  if (this->summary_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->summary_dir().data(), this->summary_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.summary_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->summary_dir(), output);
  }

  // bool dump_weights = 31;
  if (this->dump_weights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->dump_weights(), output);
  }

  // bool dump_activations = 32;
  if (this->dump_activations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->dump_activations(), output);
  }

  // bool dump_gradients = 33;
  if (this->dump_gradients() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->dump_gradients(), output);
  }

  // string dump_dir = 34;
  if (this->dump_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dump_dir().data(), this->dump_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.dump_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->dump_dir(), output);
  }

  // int32 intermodel_comm_method = 35;
  if (this->intermodel_comm_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->intermodel_comm_method(), output);
  }

  // int32 procs_per_model = 36;
  if (this->procs_per_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->procs_per_model(), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann_data.TrainingParams)
}

::google::protobuf::uint8* TrainingParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lbann_data.TrainingParams)
  // bool enable_profiling = 1;
  if (this->enable_profiling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_profiling(), target);
  }

  // int32 random_seed = 2;
  if (this->random_seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->random_seed(), target);
  }

  // int32 shuffle_training_data = 3;
  if (this->shuffle_training_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shuffle_training_data(), target);
  }

  // double percentage_training_samples = 4;
  if (this->percentage_training_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->percentage_training_samples(), target);
  }

  // double percentage_validation_samples = 5;
  if (this->percentage_validation_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->percentage_validation_samples(), target);
  }

  // double percentage_testing_samples = 6;
  if (this->percentage_testing_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->percentage_testing_samples(), target);
  }

  // int32 test_with_train_data = 7;
  if (this->test_with_train_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->test_with_train_data(), target);
  }

  // int32 epoch_start = 8;
  if (this->epoch_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->epoch_start(), target);
  }

  // int32 epoch_count = 9;
  if (this->epoch_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->epoch_count(), target);
  }

  // int32 mb_size = 10;
  if (this->mb_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mb_size(), target);
  }

  // double learn_rate = 11;
  if (this->learn_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->learn_rate(), target);
  }

  // int32 learn_rate_method = 12;
  if (this->learn_rate_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->learn_rate_method(), target);
  }

  // double lr_decay_rate = 13;
  if (this->lr_decay_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lr_decay_rate(), target);
  }

  // int32 lr_decay_cycles = 14;
  if (this->lr_decay_cycles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lr_decay_cycles(), target);
  }

  // double lr_momentum = 15;
  if (this->lr_momentum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lr_momentum(), target);
  }

  // string activation_type = 16;
  if (this->activation_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->activation_type().data(), this->activation_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.activation_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->activation_type(), target);
  }

  // double dropout = 17;
  if (this->dropout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->dropout(), target);
  }

  // double lambda = 18;
  if (this->lambda() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lambda(), target);
  }

  // string weight_initialization = 19;
  if (this->weight_initialization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weight_initialization().data(), this->weight_initialization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.weight_initialization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->weight_initialization(), target);
  }

  // string dataset_root_dir = 20;
  if (this->dataset_root_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dataset_root_dir().data(), this->dataset_root_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.dataset_root_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->dataset_root_dir(), target);
  }

  // string save_image_dir = 21;
  if (this->save_image_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->save_image_dir().data(), this->save_image_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.save_image_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->save_image_dir(), target);
  }

  // string parameter_dir = 22;
  if (this->parameter_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameter_dir().data(), this->parameter_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.parameter_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->parameter_dir(), target);
  }

  // bool save_model = 23;
  if (this->save_model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->save_model(), target);
  }

  // bool load_model = 24;
  if (this->load_model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->load_model(), target);
  }

  // int32 ckpt_epochs = 25;
  if (this->ckpt_epochs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ckpt_epochs(), target);
  }

  // int32 ckpt_steps = 26;
  if (this->ckpt_steps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->ckpt_steps(), target);
  }

  // int32 ckpt_secs = 27;
  if (this->ckpt_secs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ckpt_secs(), target);
  }

  // string train_file = 28;
  if (this->train_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->train_file().data(), this->train_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.train_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->train_file(), target);
  }

  // string test_file = 29;
  if (this->test_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->test_file().data(), this->test_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.test_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->test_file(), target);
  }

  // string summary_dir = 30;
  if (this->summary_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->summary_dir().data(), this->summary_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.summary_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->summary_dir(), target);
  }

  // bool dump_weights = 31;
  if (this->dump_weights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->dump_weights(), target);
  }

  // bool dump_activations = 32;
  if (this->dump_activations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->dump_activations(), target);
  }

  // bool dump_gradients = 33;
  if (this->dump_gradients() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->dump_gradients(), target);
  }

  // string dump_dir = 34;
  if (this->dump_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dump_dir().data(), this->dump_dir().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann_data.TrainingParams.dump_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->dump_dir(), target);
  }

  // int32 intermodel_comm_method = 35;
  if (this->intermodel_comm_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->intermodel_comm_method(), target);
  }

  // int32 procs_per_model = 36;
  if (this->procs_per_model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->procs_per_model(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann_data.TrainingParams)
  return target;
}

size_t TrainingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lbann_data.TrainingParams)
  size_t total_size = 0;

  // string activation_type = 16;
  if (this->activation_type().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->activation_type());
  }

  // string weight_initialization = 19;
  if (this->weight_initialization().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weight_initialization());
  }

  // string dataset_root_dir = 20;
  if (this->dataset_root_dir().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dataset_root_dir());
  }

  // string save_image_dir = 21;
  if (this->save_image_dir().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->save_image_dir());
  }

  // string parameter_dir = 22;
  if (this->parameter_dir().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parameter_dir());
  }

  // string train_file = 28;
  if (this->train_file().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->train_file());
  }

  // string test_file = 29;
  if (this->test_file().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->test_file());
  }

  // string summary_dir = 30;
  if (this->summary_dir().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->summary_dir());
  }

  // string dump_dir = 34;
  if (this->dump_dir().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dump_dir());
  }

  // int32 random_seed = 2;
  if (this->random_seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->random_seed());
  }

  // int32 shuffle_training_data = 3;
  if (this->shuffle_training_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shuffle_training_data());
  }

  // double percentage_training_samples = 4;
  if (this->percentage_training_samples() != 0) {
    total_size += 1 + 8;
  }

  // double percentage_validation_samples = 5;
  if (this->percentage_validation_samples() != 0) {
    total_size += 1 + 8;
  }

  // double percentage_testing_samples = 6;
  if (this->percentage_testing_samples() != 0) {
    total_size += 1 + 8;
  }

  // int32 test_with_train_data = 7;
  if (this->test_with_train_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->test_with_train_data());
  }

  // int32 epoch_start = 8;
  if (this->epoch_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epoch_start());
  }

  // int32 epoch_count = 9;
  if (this->epoch_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epoch_count());
  }

  // int32 mb_size = 10;
  if (this->mb_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mb_size());
  }

  // double learn_rate = 11;
  if (this->learn_rate() != 0) {
    total_size += 1 + 8;
  }

  // double lr_decay_rate = 13;
  if (this->lr_decay_rate() != 0) {
    total_size += 1 + 8;
  }

  // int32 learn_rate_method = 12;
  if (this->learn_rate_method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->learn_rate_method());
  }

  // int32 lr_decay_cycles = 14;
  if (this->lr_decay_cycles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lr_decay_cycles());
  }

  // double lr_momentum = 15;
  if (this->lr_momentum() != 0) {
    total_size += 1 + 8;
  }

  // double dropout = 17;
  if (this->dropout() != 0) {
    total_size += 2 + 8;
  }

  // double lambda = 18;
  if (this->lambda() != 0) {
    total_size += 2 + 8;
  }

  // bool enable_profiling = 1;
  if (this->enable_profiling() != 0) {
    total_size += 1 + 1;
  }

  // bool save_model = 23;
  if (this->save_model() != 0) {
    total_size += 2 + 1;
  }

  // bool load_model = 24;
  if (this->load_model() != 0) {
    total_size += 2 + 1;
  }

  // bool dump_weights = 31;
  if (this->dump_weights() != 0) {
    total_size += 2 + 1;
  }

  // int32 ckpt_epochs = 25;
  if (this->ckpt_epochs() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ckpt_epochs());
  }

  // int32 ckpt_steps = 26;
  if (this->ckpt_steps() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ckpt_steps());
  }

  // int32 ckpt_secs = 27;
  if (this->ckpt_secs() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ckpt_secs());
  }

  // bool dump_activations = 32;
  if (this->dump_activations() != 0) {
    total_size += 2 + 1;
  }

  // bool dump_gradients = 33;
  if (this->dump_gradients() != 0) {
    total_size += 2 + 1;
  }

  // int32 intermodel_comm_method = 35;
  if (this->intermodel_comm_method() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->intermodel_comm_method());
  }

  // int32 procs_per_model = 36;
  if (this->procs_per_model() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procs_per_model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainingParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann_data.TrainingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainingParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrainingParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann_data.TrainingParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann_data.TrainingParams)
    MergeFrom(*source);
  }
}

void TrainingParams::MergeFrom(const TrainingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann_data.TrainingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.activation_type().size() > 0) {

    activation_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.activation_type_);
  }
  if (from.weight_initialization().size() > 0) {

    weight_initialization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weight_initialization_);
  }
  if (from.dataset_root_dir().size() > 0) {

    dataset_root_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_root_dir_);
  }
  if (from.save_image_dir().size() > 0) {

    save_image_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_image_dir_);
  }
  if (from.parameter_dir().size() > 0) {

    parameter_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameter_dir_);
  }
  if (from.train_file().size() > 0) {

    train_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.train_file_);
  }
  if (from.test_file().size() > 0) {

    test_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.test_file_);
  }
  if (from.summary_dir().size() > 0) {

    summary_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.summary_dir_);
  }
  if (from.dump_dir().size() > 0) {

    dump_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dump_dir_);
  }
  if (from.random_seed() != 0) {
    set_random_seed(from.random_seed());
  }
  if (from.shuffle_training_data() != 0) {
    set_shuffle_training_data(from.shuffle_training_data());
  }
  if (from.percentage_training_samples() != 0) {
    set_percentage_training_samples(from.percentage_training_samples());
  }
  if (from.percentage_validation_samples() != 0) {
    set_percentage_validation_samples(from.percentage_validation_samples());
  }
  if (from.percentage_testing_samples() != 0) {
    set_percentage_testing_samples(from.percentage_testing_samples());
  }
  if (from.test_with_train_data() != 0) {
    set_test_with_train_data(from.test_with_train_data());
  }
  if (from.epoch_start() != 0) {
    set_epoch_start(from.epoch_start());
  }
  if (from.epoch_count() != 0) {
    set_epoch_count(from.epoch_count());
  }
  if (from.mb_size() != 0) {
    set_mb_size(from.mb_size());
  }
  if (from.learn_rate() != 0) {
    set_learn_rate(from.learn_rate());
  }
  if (from.lr_decay_rate() != 0) {
    set_lr_decay_rate(from.lr_decay_rate());
  }
  if (from.learn_rate_method() != 0) {
    set_learn_rate_method(from.learn_rate_method());
  }
  if (from.lr_decay_cycles() != 0) {
    set_lr_decay_cycles(from.lr_decay_cycles());
  }
  if (from.lr_momentum() != 0) {
    set_lr_momentum(from.lr_momentum());
  }
  if (from.dropout() != 0) {
    set_dropout(from.dropout());
  }
  if (from.lambda() != 0) {
    set_lambda(from.lambda());
  }
  if (from.enable_profiling() != 0) {
    set_enable_profiling(from.enable_profiling());
  }
  if (from.save_model() != 0) {
    set_save_model(from.save_model());
  }
  if (from.load_model() != 0) {
    set_load_model(from.load_model());
  }
  if (from.dump_weights() != 0) {
    set_dump_weights(from.dump_weights());
  }
  if (from.ckpt_epochs() != 0) {
    set_ckpt_epochs(from.ckpt_epochs());
  }
  if (from.ckpt_steps() != 0) {
    set_ckpt_steps(from.ckpt_steps());
  }
  if (from.ckpt_secs() != 0) {
    set_ckpt_secs(from.ckpt_secs());
  }
  if (from.dump_activations() != 0) {
    set_dump_activations(from.dump_activations());
  }
  if (from.dump_gradients() != 0) {
    set_dump_gradients(from.dump_gradients());
  }
  if (from.intermodel_comm_method() != 0) {
    set_intermodel_comm_method(from.intermodel_comm_method());
  }
  if (from.procs_per_model() != 0) {
    set_procs_per_model(from.procs_per_model());
  }
}

void TrainingParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann_data.TrainingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainingParams::CopyFrom(const TrainingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann_data.TrainingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingParams::IsInitialized() const {
  return true;
}

void TrainingParams::Swap(TrainingParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrainingParams::InternalSwap(TrainingParams* other) {
  activation_type_.Swap(&other->activation_type_);
  weight_initialization_.Swap(&other->weight_initialization_);
  dataset_root_dir_.Swap(&other->dataset_root_dir_);
  save_image_dir_.Swap(&other->save_image_dir_);
  parameter_dir_.Swap(&other->parameter_dir_);
  train_file_.Swap(&other->train_file_);
  test_file_.Swap(&other->test_file_);
  summary_dir_.Swap(&other->summary_dir_);
  dump_dir_.Swap(&other->dump_dir_);
  std::swap(random_seed_, other->random_seed_);
  std::swap(shuffle_training_data_, other->shuffle_training_data_);
  std::swap(percentage_training_samples_, other->percentage_training_samples_);
  std::swap(percentage_validation_samples_, other->percentage_validation_samples_);
  std::swap(percentage_testing_samples_, other->percentage_testing_samples_);
  std::swap(test_with_train_data_, other->test_with_train_data_);
  std::swap(epoch_start_, other->epoch_start_);
  std::swap(epoch_count_, other->epoch_count_);
  std::swap(mb_size_, other->mb_size_);
  std::swap(learn_rate_, other->learn_rate_);
  std::swap(lr_decay_rate_, other->lr_decay_rate_);
  std::swap(learn_rate_method_, other->learn_rate_method_);
  std::swap(lr_decay_cycles_, other->lr_decay_cycles_);
  std::swap(lr_momentum_, other->lr_momentum_);
  std::swap(dropout_, other->dropout_);
  std::swap(lambda_, other->lambda_);
  std::swap(enable_profiling_, other->enable_profiling_);
  std::swap(save_model_, other->save_model_);
  std::swap(load_model_, other->load_model_);
  std::swap(dump_weights_, other->dump_weights_);
  std::swap(ckpt_epochs_, other->ckpt_epochs_);
  std::swap(ckpt_steps_, other->ckpt_steps_);
  std::swap(ckpt_secs_, other->ckpt_secs_);
  std::swap(dump_activations_, other->dump_activations_);
  std::swap(dump_gradients_, other->dump_gradients_);
  std::swap(intermodel_comm_method_, other->intermodel_comm_method_);
  std::swap(procs_per_model_, other->procs_per_model_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrainingParams::GetMetadata() const {
  protobuf_lbann_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lbann_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrainingParams

// bool enable_profiling = 1;
void TrainingParams::clear_enable_profiling() {
  enable_profiling_ = false;
}
bool TrainingParams::enable_profiling() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.enable_profiling)
  return enable_profiling_;
}
void TrainingParams::set_enable_profiling(bool value) {
  
  enable_profiling_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.enable_profiling)
}

// int32 random_seed = 2;
void TrainingParams::clear_random_seed() {
  random_seed_ = 0;
}
::google::protobuf::int32 TrainingParams::random_seed() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.random_seed)
  return random_seed_;
}
void TrainingParams::set_random_seed(::google::protobuf::int32 value) {
  
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.random_seed)
}

// int32 shuffle_training_data = 3;
void TrainingParams::clear_shuffle_training_data() {
  shuffle_training_data_ = 0;
}
::google::protobuf::int32 TrainingParams::shuffle_training_data() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.shuffle_training_data)
  return shuffle_training_data_;
}
void TrainingParams::set_shuffle_training_data(::google::protobuf::int32 value) {
  
  shuffle_training_data_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.shuffle_training_data)
}

// double percentage_training_samples = 4;
void TrainingParams::clear_percentage_training_samples() {
  percentage_training_samples_ = 0;
}
double TrainingParams::percentage_training_samples() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.percentage_training_samples)
  return percentage_training_samples_;
}
void TrainingParams::set_percentage_training_samples(double value) {
  
  percentage_training_samples_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.percentage_training_samples)
}

// double percentage_validation_samples = 5;
void TrainingParams::clear_percentage_validation_samples() {
  percentage_validation_samples_ = 0;
}
double TrainingParams::percentage_validation_samples() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.percentage_validation_samples)
  return percentage_validation_samples_;
}
void TrainingParams::set_percentage_validation_samples(double value) {
  
  percentage_validation_samples_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.percentage_validation_samples)
}

// double percentage_testing_samples = 6;
void TrainingParams::clear_percentage_testing_samples() {
  percentage_testing_samples_ = 0;
}
double TrainingParams::percentage_testing_samples() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.percentage_testing_samples)
  return percentage_testing_samples_;
}
void TrainingParams::set_percentage_testing_samples(double value) {
  
  percentage_testing_samples_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.percentage_testing_samples)
}

// int32 test_with_train_data = 7;
void TrainingParams::clear_test_with_train_data() {
  test_with_train_data_ = 0;
}
::google::protobuf::int32 TrainingParams::test_with_train_data() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.test_with_train_data)
  return test_with_train_data_;
}
void TrainingParams::set_test_with_train_data(::google::protobuf::int32 value) {
  
  test_with_train_data_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.test_with_train_data)
}

// int32 epoch_start = 8;
void TrainingParams::clear_epoch_start() {
  epoch_start_ = 0;
}
::google::protobuf::int32 TrainingParams::epoch_start() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.epoch_start)
  return epoch_start_;
}
void TrainingParams::set_epoch_start(::google::protobuf::int32 value) {
  
  epoch_start_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.epoch_start)
}

// int32 epoch_count = 9;
void TrainingParams::clear_epoch_count() {
  epoch_count_ = 0;
}
::google::protobuf::int32 TrainingParams::epoch_count() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.epoch_count)
  return epoch_count_;
}
void TrainingParams::set_epoch_count(::google::protobuf::int32 value) {
  
  epoch_count_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.epoch_count)
}

// int32 mb_size = 10;
void TrainingParams::clear_mb_size() {
  mb_size_ = 0;
}
::google::protobuf::int32 TrainingParams::mb_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.mb_size)
  return mb_size_;
}
void TrainingParams::set_mb_size(::google::protobuf::int32 value) {
  
  mb_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.mb_size)
}

// double learn_rate = 11;
void TrainingParams::clear_learn_rate() {
  learn_rate_ = 0;
}
double TrainingParams::learn_rate() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.learn_rate)
  return learn_rate_;
}
void TrainingParams::set_learn_rate(double value) {
  
  learn_rate_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.learn_rate)
}

// int32 learn_rate_method = 12;
void TrainingParams::clear_learn_rate_method() {
  learn_rate_method_ = 0;
}
::google::protobuf::int32 TrainingParams::learn_rate_method() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.learn_rate_method)
  return learn_rate_method_;
}
void TrainingParams::set_learn_rate_method(::google::protobuf::int32 value) {
  
  learn_rate_method_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.learn_rate_method)
}

// double lr_decay_rate = 13;
void TrainingParams::clear_lr_decay_rate() {
  lr_decay_rate_ = 0;
}
double TrainingParams::lr_decay_rate() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lr_decay_rate)
  return lr_decay_rate_;
}
void TrainingParams::set_lr_decay_rate(double value) {
  
  lr_decay_rate_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lr_decay_rate)
}

// int32 lr_decay_cycles = 14;
void TrainingParams::clear_lr_decay_cycles() {
  lr_decay_cycles_ = 0;
}
::google::protobuf::int32 TrainingParams::lr_decay_cycles() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lr_decay_cycles)
  return lr_decay_cycles_;
}
void TrainingParams::set_lr_decay_cycles(::google::protobuf::int32 value) {
  
  lr_decay_cycles_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lr_decay_cycles)
}

// double lr_momentum = 15;
void TrainingParams::clear_lr_momentum() {
  lr_momentum_ = 0;
}
double TrainingParams::lr_momentum() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lr_momentum)
  return lr_momentum_;
}
void TrainingParams::set_lr_momentum(double value) {
  
  lr_momentum_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lr_momentum)
}

// string activation_type = 16;
void TrainingParams::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.activation_type)
  return activation_type_.GetNoArena();
}
void TrainingParams::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.activation_type)
}
#if LANG_CXX11
void TrainingParams::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.activation_type)
}
#endif
void TrainingParams::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.activation_type)
}
void TrainingParams::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.activation_type)
}
::std::string* TrainingParams::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.activation_type)
}

// double dropout = 17;
void TrainingParams::clear_dropout() {
  dropout_ = 0;
}
double TrainingParams::dropout() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dropout)
  return dropout_;
}
void TrainingParams::set_dropout(double value) {
  
  dropout_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dropout)
}

// double lambda = 18;
void TrainingParams::clear_lambda() {
  lambda_ = 0;
}
double TrainingParams::lambda() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lambda)
  return lambda_;
}
void TrainingParams::set_lambda(double value) {
  
  lambda_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lambda)
}

// string weight_initialization = 19;
void TrainingParams::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.weight_initialization)
  return weight_initialization_.GetNoArena();
}
void TrainingParams::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.weight_initialization)
}
#if LANG_CXX11
void TrainingParams::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.weight_initialization)
}
#endif
void TrainingParams::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.weight_initialization)
}
void TrainingParams::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.weight_initialization)
}
::std::string* TrainingParams::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.weight_initialization)
}

// string dataset_root_dir = 20;
void TrainingParams::clear_dataset_root_dir() {
  dataset_root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::dataset_root_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dataset_root_dir)
  return dataset_root_dir_.GetNoArena();
}
void TrainingParams::set_dataset_root_dir(const ::std::string& value) {
  
  dataset_root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dataset_root_dir)
}
#if LANG_CXX11
void TrainingParams::set_dataset_root_dir(::std::string&& value) {
  
  dataset_root_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.dataset_root_dir)
}
#endif
void TrainingParams::set_dataset_root_dir(const char* value) {
  
  dataset_root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.dataset_root_dir)
}
void TrainingParams::set_dataset_root_dir(const char* value, size_t size) {
  
  dataset_root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.dataset_root_dir)
}
::std::string* TrainingParams::mutable_dataset_root_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.dataset_root_dir)
  return dataset_root_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_dataset_root_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.dataset_root_dir)
  
  return dataset_root_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_dataset_root_dir(::std::string* dataset_root_dir) {
  if (dataset_root_dir != NULL) {
    
  } else {
    
  }
  dataset_root_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_root_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.dataset_root_dir)
}

// string save_image_dir = 21;
void TrainingParams::clear_save_image_dir() {
  save_image_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::save_image_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.save_image_dir)
  return save_image_dir_.GetNoArena();
}
void TrainingParams::set_save_image_dir(const ::std::string& value) {
  
  save_image_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.save_image_dir)
}
#if LANG_CXX11
void TrainingParams::set_save_image_dir(::std::string&& value) {
  
  save_image_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.save_image_dir)
}
#endif
void TrainingParams::set_save_image_dir(const char* value) {
  
  save_image_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.save_image_dir)
}
void TrainingParams::set_save_image_dir(const char* value, size_t size) {
  
  save_image_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.save_image_dir)
}
::std::string* TrainingParams::mutable_save_image_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.save_image_dir)
  return save_image_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_save_image_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.save_image_dir)
  
  return save_image_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_save_image_dir(::std::string* save_image_dir) {
  if (save_image_dir != NULL) {
    
  } else {
    
  }
  save_image_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_image_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.save_image_dir)
}

// string parameter_dir = 22;
void TrainingParams::clear_parameter_dir() {
  parameter_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::parameter_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.parameter_dir)
  return parameter_dir_.GetNoArena();
}
void TrainingParams::set_parameter_dir(const ::std::string& value) {
  
  parameter_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.parameter_dir)
}
#if LANG_CXX11
void TrainingParams::set_parameter_dir(::std::string&& value) {
  
  parameter_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.parameter_dir)
}
#endif
void TrainingParams::set_parameter_dir(const char* value) {
  
  parameter_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.parameter_dir)
}
void TrainingParams::set_parameter_dir(const char* value, size_t size) {
  
  parameter_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.parameter_dir)
}
::std::string* TrainingParams::mutable_parameter_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.parameter_dir)
  return parameter_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_parameter_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.parameter_dir)
  
  return parameter_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_parameter_dir(::std::string* parameter_dir) {
  if (parameter_dir != NULL) {
    
  } else {
    
  }
  parameter_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.parameter_dir)
}

// bool save_model = 23;
void TrainingParams::clear_save_model() {
  save_model_ = false;
}
bool TrainingParams::save_model() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.save_model)
  return save_model_;
}
void TrainingParams::set_save_model(bool value) {
  
  save_model_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.save_model)
}

// bool load_model = 24;
void TrainingParams::clear_load_model() {
  load_model_ = false;
}
bool TrainingParams::load_model() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.load_model)
  return load_model_;
}
void TrainingParams::set_load_model(bool value) {
  
  load_model_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.load_model)
}

// int32 ckpt_epochs = 25;
void TrainingParams::clear_ckpt_epochs() {
  ckpt_epochs_ = 0;
}
::google::protobuf::int32 TrainingParams::ckpt_epochs() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.ckpt_epochs)
  return ckpt_epochs_;
}
void TrainingParams::set_ckpt_epochs(::google::protobuf::int32 value) {
  
  ckpt_epochs_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.ckpt_epochs)
}

// int32 ckpt_steps = 26;
void TrainingParams::clear_ckpt_steps() {
  ckpt_steps_ = 0;
}
::google::protobuf::int32 TrainingParams::ckpt_steps() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.ckpt_steps)
  return ckpt_steps_;
}
void TrainingParams::set_ckpt_steps(::google::protobuf::int32 value) {
  
  ckpt_steps_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.ckpt_steps)
}

// int32 ckpt_secs = 27;
void TrainingParams::clear_ckpt_secs() {
  ckpt_secs_ = 0;
}
::google::protobuf::int32 TrainingParams::ckpt_secs() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.ckpt_secs)
  return ckpt_secs_;
}
void TrainingParams::set_ckpt_secs(::google::protobuf::int32 value) {
  
  ckpt_secs_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.ckpt_secs)
}

// string train_file = 28;
void TrainingParams::clear_train_file() {
  train_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::train_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.train_file)
  return train_file_.GetNoArena();
}
void TrainingParams::set_train_file(const ::std::string& value) {
  
  train_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.train_file)
}
#if LANG_CXX11
void TrainingParams::set_train_file(::std::string&& value) {
  
  train_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.train_file)
}
#endif
void TrainingParams::set_train_file(const char* value) {
  
  train_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.train_file)
}
void TrainingParams::set_train_file(const char* value, size_t size) {
  
  train_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.train_file)
}
::std::string* TrainingParams::mutable_train_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.train_file)
  return train_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_train_file() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.train_file)
  
  return train_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_train_file(::std::string* train_file) {
  if (train_file != NULL) {
    
  } else {
    
  }
  train_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.train_file)
}

// string test_file = 29;
void TrainingParams::clear_test_file() {
  test_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::test_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.test_file)
  return test_file_.GetNoArena();
}
void TrainingParams::set_test_file(const ::std::string& value) {
  
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.test_file)
}
#if LANG_CXX11
void TrainingParams::set_test_file(::std::string&& value) {
  
  test_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.test_file)
}
#endif
void TrainingParams::set_test_file(const char* value) {
  
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.test_file)
}
void TrainingParams::set_test_file(const char* value, size_t size) {
  
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.test_file)
}
::std::string* TrainingParams::mutable_test_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.test_file)
  return test_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_test_file() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.test_file)
  
  return test_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_test_file(::std::string* test_file) {
  if (test_file != NULL) {
    
  } else {
    
  }
  test_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.test_file)
}

// string summary_dir = 30;
void TrainingParams::clear_summary_dir() {
  summary_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::summary_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.summary_dir)
  return summary_dir_.GetNoArena();
}
void TrainingParams::set_summary_dir(const ::std::string& value) {
  
  summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.summary_dir)
}
#if LANG_CXX11
void TrainingParams::set_summary_dir(::std::string&& value) {
  
  summary_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.summary_dir)
}
#endif
void TrainingParams::set_summary_dir(const char* value) {
  
  summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.summary_dir)
}
void TrainingParams::set_summary_dir(const char* value, size_t size) {
  
  summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.summary_dir)
}
::std::string* TrainingParams::mutable_summary_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.summary_dir)
  return summary_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_summary_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.summary_dir)
  
  return summary_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_summary_dir(::std::string* summary_dir) {
  if (summary_dir != NULL) {
    
  } else {
    
  }
  summary_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summary_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.summary_dir)
}

// bool dump_weights = 31;
void TrainingParams::clear_dump_weights() {
  dump_weights_ = false;
}
bool TrainingParams::dump_weights() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_weights)
  return dump_weights_;
}
void TrainingParams::set_dump_weights(bool value) {
  
  dump_weights_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_weights)
}

// bool dump_activations = 32;
void TrainingParams::clear_dump_activations() {
  dump_activations_ = false;
}
bool TrainingParams::dump_activations() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_activations)
  return dump_activations_;
}
void TrainingParams::set_dump_activations(bool value) {
  
  dump_activations_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_activations)
}

// bool dump_gradients = 33;
void TrainingParams::clear_dump_gradients() {
  dump_gradients_ = false;
}
bool TrainingParams::dump_gradients() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_gradients)
  return dump_gradients_;
}
void TrainingParams::set_dump_gradients(bool value) {
  
  dump_gradients_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_gradients)
}

// string dump_dir = 34;
void TrainingParams::clear_dump_dir() {
  dump_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TrainingParams::dump_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_dir)
  return dump_dir_.GetNoArena();
}
void TrainingParams::set_dump_dir(const ::std::string& value) {
  
  dump_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_dir)
}
#if LANG_CXX11
void TrainingParams::set_dump_dir(::std::string&& value) {
  
  dump_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.dump_dir)
}
#endif
void TrainingParams::set_dump_dir(const char* value) {
  
  dump_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.dump_dir)
}
void TrainingParams::set_dump_dir(const char* value, size_t size) {
  
  dump_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.dump_dir)
}
::std::string* TrainingParams::mutable_dump_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.dump_dir)
  return dump_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrainingParams::release_dump_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.dump_dir)
  
  return dump_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrainingParams::set_allocated_dump_dir(::std::string* dump_dir) {
  if (dump_dir != NULL) {
    
  } else {
    
  }
  dump_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.dump_dir)
}

// int32 intermodel_comm_method = 35;
void TrainingParams::clear_intermodel_comm_method() {
  intermodel_comm_method_ = 0;
}
::google::protobuf::int32 TrainingParams::intermodel_comm_method() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.intermodel_comm_method)
  return intermodel_comm_method_;
}
void TrainingParams::set_intermodel_comm_method(::google::protobuf::int32 value) {
  
  intermodel_comm_method_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.intermodel_comm_method)
}

// int32 procs_per_model = 36;
void TrainingParams::clear_procs_per_model() {
  procs_per_model_ = 0;
}
::google::protobuf::int32 TrainingParams::procs_per_model() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.procs_per_model)
  return procs_per_model_;
}
void TrainingParams::set_procs_per_model(::google::protobuf::int32 value) {
  
  procs_per_model_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.procs_per_model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lbann_data

// @@protoc_insertion_point(global_scope)
