// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbann.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lbann.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbann {

namespace {

const ::google::protobuf::Descriptor* LbannModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LbannModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FullyConnectedParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FullyConnectedParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoolingParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoolingParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvolutionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvolutionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftmaxParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftmaxParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetParallelParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetParallelParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lbann_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_lbann_2eproto() {
  protobuf_AddDesc_lbann_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lbann.proto");
  GOOGLE_CHECK(file != NULL);
  LbannModel_descriptor_ = file->message_type(0);
  static const int LbannModel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannModel, train_net_),
  };
  LbannModel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LbannModel_descriptor_,
      LbannModel::default_instance_,
      LbannModel_offsets_,
      -1,
      -1,
      -1,
      sizeof(LbannModel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannModel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LbannModel, _is_default_instance_));
  NetParameter_descriptor_ = file->message_type(1);
  static const int NetParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, layer_),
  };
  NetParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NetParameter_descriptor_,
      NetParameter::default_instance_,
      NetParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(NetParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetParameter, _is_default_instance_));
  LayerParameter_descriptor_ = file->message_type(2);
  static const int LayerParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, input_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, fully_connected_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pooling_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, convolution_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, softmax_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, target_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, target_parallel_param_),
  };
  LayerParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::default_instance_,
      LayerParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(LayerParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _is_default_instance_));
  InputParameter_descriptor_ = file->message_type(3);
  static const int InputParameter_offsets_[1] = {
  };
  InputParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputParameter_descriptor_,
      InputParameter::default_instance_,
      InputParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(InputParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputParameter, _is_default_instance_));
  FullyConnectedParameter_descriptor_ = file->message_type(4);
  static const int FullyConnectedParameter_offsets_[1] = {
  };
  FullyConnectedParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FullyConnectedParameter_descriptor_,
      FullyConnectedParameter::default_instance_,
      FullyConnectedParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(FullyConnectedParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FullyConnectedParameter, _is_default_instance_));
  PoolingParameter_descriptor_ = file->message_type(5);
  static const int PoolingParameter_offsets_[1] = {
  };
  PoolingParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PoolingParameter_descriptor_,
      PoolingParameter::default_instance_,
      PoolingParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(PoolingParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoolingParameter, _is_default_instance_));
  ConvolutionParameter_descriptor_ = file->message_type(6);
  static const int ConvolutionParameter_offsets_[1] = {
  };
  ConvolutionParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConvolutionParameter_descriptor_,
      ConvolutionParameter::default_instance_,
      ConvolutionParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConvolutionParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvolutionParameter, _is_default_instance_));
  SoftmaxParameter_descriptor_ = file->message_type(7);
  static const int SoftmaxParameter_offsets_[1] = {
  };
  SoftmaxParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftmaxParameter_descriptor_,
      SoftmaxParameter::default_instance_,
      SoftmaxParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(SoftmaxParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftmaxParameter, _is_default_instance_));
  TargetParameter_descriptor_ = file->message_type(8);
  static const int TargetParameter_offsets_[1] = {
  };
  TargetParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetParameter_descriptor_,
      TargetParameter::default_instance_,
      TargetParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParameter, _is_default_instance_));
  TargetParallelParameter_descriptor_ = file->message_type(9);
  static const int TargetParallelParameter_offsets_[1] = {
  };
  TargetParallelParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetParallelParameter_descriptor_,
      TargetParallelParameter::default_instance_,
      TargetParallelParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetParallelParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParallelParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetParallelParameter, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lbann_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LbannModel_descriptor_, &LbannModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NetParameter_descriptor_, &NetParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LayerParameter_descriptor_, &LayerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputParameter_descriptor_, &InputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FullyConnectedParameter_descriptor_, &FullyConnectedParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PoolingParameter_descriptor_, &PoolingParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConvolutionParameter_descriptor_, &ConvolutionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftmaxParameter_descriptor_, &SoftmaxParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetParameter_descriptor_, &TargetParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetParallelParameter_descriptor_, &TargetParallelParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lbann_2eproto() {
  delete LbannModel::default_instance_;
  delete LbannModel_reflection_;
  delete NetParameter::default_instance_;
  delete NetParameter_reflection_;
  delete LayerParameter::default_instance_;
  delete LayerParameter_reflection_;
  delete InputParameter::default_instance_;
  delete InputParameter_reflection_;
  delete FullyConnectedParameter::default_instance_;
  delete FullyConnectedParameter_reflection_;
  delete PoolingParameter::default_instance_;
  delete PoolingParameter_reflection_;
  delete ConvolutionParameter::default_instance_;
  delete ConvolutionParameter_reflection_;
  delete SoftmaxParameter::default_instance_;
  delete SoftmaxParameter_reflection_;
  delete TargetParameter::default_instance_;
  delete TargetParameter_reflection_;
  delete TargetParallelParameter::default_instance_;
  delete TargetParallelParameter_reflection_;
}

void protobuf_AddDesc_lbann_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_lbann_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013lbann.proto\022\005lbann\"4\n\nLbannModel\022&\n\ttr"
    "ain_net\030\001 \001(\0132\023.lbann.NetParameter\"4\n\014Ne"
    "tParameter\022$\n\005layer\030\001 \003(\0132\025.lbann.LayerP"
    "arameter\"\216\003\n\016LayerParameter\022\014\n\004type\030\001 \001("
    "\t\022*\n\013input_param\030\002 \001(\0132\025.lbann.InputPara"
    "meter\022=\n\025fully_connected_param\030\003 \001(\0132\036.l"
    "bann.FullyConnectedParameter\022.\n\rpooling_"
    "param\030\004 \001(\0132\027.lbann.PoolingParameter\0226\n\021"
    "convolution_param\030\005 \001(\0132\033.lbann.Convolut"
    "ionParameter\022.\n\rsoftmax_param\030\006 \001(\0132\027.lb"
    "ann.SoftmaxParameter\022,\n\014target_param\030\007 \001"
    "(\0132\026.lbann.TargetParameter\022=\n\025target_par"
    "allel_param\030\010 \001(\0132\036.lbann.TargetParallel"
    "Parameter\"\020\n\016InputParameter\"\031\n\027FullyConn"
    "ectedParameter\"\022\n\020PoolingParameter\"\026\n\024Co"
    "nvolutionParameter\"\022\n\020SoftmaxParameter\"\021"
    "\n\017TargetParameter\"\031\n\027TargetParallelParam"
    "eterb\006proto3", 692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lbann.proto", &protobuf_RegisterTypes);
  LbannModel::default_instance_ = new LbannModel();
  NetParameter::default_instance_ = new NetParameter();
  LayerParameter::default_instance_ = new LayerParameter();
  InputParameter::default_instance_ = new InputParameter();
  FullyConnectedParameter::default_instance_ = new FullyConnectedParameter();
  PoolingParameter::default_instance_ = new PoolingParameter();
  ConvolutionParameter::default_instance_ = new ConvolutionParameter();
  SoftmaxParameter::default_instance_ = new SoftmaxParameter();
  TargetParameter::default_instance_ = new TargetParameter();
  TargetParallelParameter::default_instance_ = new TargetParallelParameter();
  LbannModel::default_instance_->InitAsDefaultInstance();
  NetParameter::default_instance_->InitAsDefaultInstance();
  LayerParameter::default_instance_->InitAsDefaultInstance();
  InputParameter::default_instance_->InitAsDefaultInstance();
  FullyConnectedParameter::default_instance_->InitAsDefaultInstance();
  PoolingParameter::default_instance_->InitAsDefaultInstance();
  ConvolutionParameter::default_instance_->InitAsDefaultInstance();
  SoftmaxParameter::default_instance_->InitAsDefaultInstance();
  TargetParameter::default_instance_->InitAsDefaultInstance();
  TargetParallelParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lbann_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lbann_2eproto {
  StaticDescriptorInitializer_lbann_2eproto() {
    protobuf_AddDesc_lbann_2eproto();
  }
} static_descriptor_initializer_lbann_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LbannModel::kTrainNetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LbannModel::LbannModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.LbannModel)
}

void LbannModel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  train_net_ = const_cast< ::lbann::NetParameter*>(&::lbann::NetParameter::default_instance());
}

LbannModel::LbannModel(const LbannModel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.LbannModel)
}

void LbannModel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  train_net_ = NULL;
}

LbannModel::~LbannModel() {
  // @@protoc_insertion_point(destructor:lbann.LbannModel)
  SharedDtor();
}

void LbannModel::SharedDtor() {
  if (this != default_instance_) {
    delete train_net_;
  }
}

void LbannModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LbannModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LbannModel_descriptor_;
}

const LbannModel& LbannModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

LbannModel* LbannModel::default_instance_ = NULL;

LbannModel* LbannModel::New(::google::protobuf::Arena* arena) const {
  LbannModel* n = new LbannModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LbannModel::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.LbannModel)
  if (GetArenaNoVirtual() == NULL && train_net_ != NULL) delete train_net_;
  train_net_ = NULL;
}

bool LbannModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.LbannModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lbann.NetParameter train_net = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_net()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.LbannModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.LbannModel)
  return false;
#undef DO_
}

void LbannModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.LbannModel)
  // optional .lbann.NetParameter train_net = 1;
  if (this->has_train_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->train_net_, output);
  }

  // @@protoc_insertion_point(serialize_end:lbann.LbannModel)
}

::google::protobuf::uint8* LbannModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.LbannModel)
  // optional .lbann.NetParameter train_net = 1;
  if (this->has_train_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->train_net_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann.LbannModel)
  return target;
}

int LbannModel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.LbannModel)
  int total_size = 0;

  // optional .lbann.NetParameter train_net = 1;
  if (this->has_train_net()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->train_net_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LbannModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.LbannModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LbannModel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LbannModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.LbannModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.LbannModel)
    MergeFrom(*source);
  }
}

void LbannModel::MergeFrom(const LbannModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.LbannModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_train_net()) {
    mutable_train_net()->::lbann::NetParameter::MergeFrom(from.train_net());
  }
}

void LbannModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.LbannModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LbannModel::CopyFrom(const LbannModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.LbannModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LbannModel::IsInitialized() const {

  return true;
}

void LbannModel::Swap(LbannModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LbannModel::InternalSwap(LbannModel* other) {
  std::swap(train_net_, other->train_net_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LbannModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LbannModel_descriptor_;
  metadata.reflection = LbannModel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LbannModel

// optional .lbann.NetParameter train_net = 1;
bool LbannModel::has_train_net() const {
  return !_is_default_instance_ && train_net_ != NULL;
}
void LbannModel::clear_train_net() {
  if (GetArenaNoVirtual() == NULL && train_net_ != NULL) delete train_net_;
  train_net_ = NULL;
}
const ::lbann::NetParameter& LbannModel::train_net() const {
  // @@protoc_insertion_point(field_get:lbann.LbannModel.train_net)
  return train_net_ != NULL ? *train_net_ : *default_instance_->train_net_;
}
::lbann::NetParameter* LbannModel::mutable_train_net() {
  
  if (train_net_ == NULL) {
    train_net_ = new ::lbann::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LbannModel.train_net)
  return train_net_;
}
::lbann::NetParameter* LbannModel::release_train_net() {
  // @@protoc_insertion_point(field_release:lbann.LbannModel.train_net)
  
  ::lbann::NetParameter* temp = train_net_;
  train_net_ = NULL;
  return temp;
}
void LbannModel::set_allocated_train_net(::lbann::NetParameter* train_net) {
  delete train_net_;
  train_net_ = train_net;
  if (train_net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LbannModel.train_net)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetParameter::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetParameter::NetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.NetParameter)
}

void NetParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NetParameter::NetParameter(const NetParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.NetParameter)
}

void NetParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NetParameter::~NetParameter() {
  // @@protoc_insertion_point(destructor:lbann.NetParameter)
  SharedDtor();
}

void NetParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetParameter_descriptor_;
}

const NetParameter& NetParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

NetParameter* NetParameter::default_instance_ = NULL;

NetParameter* NetParameter::New(::google::protobuf::Arena* arena) const {
  NetParameter* n = new NetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.NetParameter)
  layer_.Clear();
}

bool NetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.NetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbann.LayerParameter layer = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_layer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.NetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.NetParameter)
  return false;
#undef DO_
}

void NetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.NetParameter)
  // repeated .lbann.LayerParameter layer = 1;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->layer(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lbann.NetParameter)
}

::google::protobuf::uint8* NetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.NetParameter)
  // repeated .lbann.LayerParameter layer = 1;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->layer(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann.NetParameter)
  return target;
}

int NetParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.NetParameter)
  int total_size = 0;

  // repeated .lbann.LayerParameter layer = 1;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.NetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NetParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.NetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.NetParameter)
    MergeFrom(*source);
  }
}

void NetParameter::MergeFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.NetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  layer_.MergeFrom(from.layer_);
}

void NetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetParameter::CopyFrom(const NetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.NetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetParameter::IsInitialized() const {

  return true;
}

void NetParameter::Swap(NetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetParameter::InternalSwap(NetParameter* other) {
  layer_.UnsafeArenaSwap(&other->layer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetParameter_descriptor_;
  metadata.reflection = NetParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetParameter

// repeated .lbann.LayerParameter layer = 1;
int NetParameter::layer_size() const {
  return layer_.size();
}
void NetParameter::clear_layer() {
  layer_.Clear();
}
const ::lbann::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:lbann.NetParameter.layer)
  return layer_.Get(index);
}
::lbann::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann.NetParameter.layer)
  return layer_.Mutable(index);
}
::lbann::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:lbann.NetParameter.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::lbann::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lbann.NetParameter.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::lbann::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:lbann.NetParameter.layer)
  return layer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kInputParamFieldNumber;
const int LayerParameter::kFullyConnectedParamFieldNumber;
const int LayerParameter::kPoolingParamFieldNumber;
const int LayerParameter::kConvolutionParamFieldNumber;
const int LayerParameter::kSoftmaxParamFieldNumber;
const int LayerParameter::kTargetParamFieldNumber;
const int LayerParameter::kTargetParallelParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LayerParameter::LayerParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.LayerParameter)
}

void LayerParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  input_param_ = const_cast< ::lbann::InputParameter*>(&::lbann::InputParameter::default_instance());
  fully_connected_param_ = const_cast< ::lbann::FullyConnectedParameter*>(&::lbann::FullyConnectedParameter::default_instance());
  pooling_param_ = const_cast< ::lbann::PoolingParameter*>(&::lbann::PoolingParameter::default_instance());
  convolution_param_ = const_cast< ::lbann::ConvolutionParameter*>(&::lbann::ConvolutionParameter::default_instance());
  softmax_param_ = const_cast< ::lbann::SoftmaxParameter*>(&::lbann::SoftmaxParameter::default_instance());
  target_param_ = const_cast< ::lbann::TargetParameter*>(&::lbann::TargetParameter::default_instance());
  target_parallel_param_ = const_cast< ::lbann::TargetParallelParameter*>(&::lbann::TargetParallelParameter::default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.LayerParameter)
}

void LayerParameter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_param_ = NULL;
  fully_connected_param_ = NULL;
  pooling_param_ = NULL;
  convolution_param_ = NULL;
  softmax_param_ = NULL;
  target_param_ = NULL;
  target_parallel_param_ = NULL;
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:lbann.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete input_param_;
    delete fully_connected_param_;
    delete pooling_param_;
    delete convolution_param_;
    delete softmax_param_;
    delete target_param_;
    delete target_parallel_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

LayerParameter* LayerParameter::default_instance_ = NULL;

LayerParameter* LayerParameter::New(::google::protobuf::Arena* arena) const {
  LayerParameter* n = new LayerParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LayerParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.LayerParameter)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && input_param_ != NULL) delete input_param_;
  input_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && fully_connected_param_ != NULL) delete fully_connected_param_;
  fully_connected_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && pooling_param_ != NULL) delete pooling_param_;
  pooling_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && convolution_param_ != NULL) delete convolution_param_;
  convolution_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_param_ != NULL) delete target_param_;
  target_param_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_parallel_param_ != NULL) delete target_parallel_param_;
  target_parallel_param_ = NULL;
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lbann.LayerParameter.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_input_param;
        break;
      }

      // optional .lbann.InputParameter input_param = 2;
      case 2: {
        if (tag == 18) {
         parse_input_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fully_connected_param;
        break;
      }

      // optional .lbann.FullyConnectedParameter fully_connected_param = 3;
      case 3: {
        if (tag == 26) {
         parse_fully_connected_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fully_connected_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pooling_param;
        break;
      }

      // optional .lbann.PoolingParameter pooling_param = 4;
      case 4: {
        if (tag == 34) {
         parse_pooling_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pooling_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_convolution_param;
        break;
      }

      // optional .lbann.ConvolutionParameter convolution_param = 5;
      case 5: {
        if (tag == 42) {
         parse_convolution_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convolution_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_softmax_param;
        break;
      }

      // optional .lbann.SoftmaxParameter softmax_param = 6;
      case 6: {
        if (tag == 50) {
         parse_softmax_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_softmax_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_target_param;
        break;
      }

      // optional .lbann.TargetParameter target_param = 7;
      case 7: {
        if (tag == 58) {
         parse_target_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_target_parallel_param;
        break;
      }

      // optional .lbann.TargetParallelParameter target_parallel_param = 8;
      case 8: {
        if (tag == 66) {
         parse_target_parallel_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_parallel_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.LayerParameter)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann.LayerParameter.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional .lbann.InputParameter input_param = 2;
  if (this->has_input_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->input_param_, output);
  }

  // optional .lbann.FullyConnectedParameter fully_connected_param = 3;
  if (this->has_fully_connected_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fully_connected_param_, output);
  }

  // optional .lbann.PoolingParameter pooling_param = 4;
  if (this->has_pooling_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pooling_param_, output);
  }

  // optional .lbann.ConvolutionParameter convolution_param = 5;
  if (this->has_convolution_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->convolution_param_, output);
  }

  // optional .lbann.SoftmaxParameter softmax_param = 6;
  if (this->has_softmax_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->softmax_param_, output);
  }

  // optional .lbann.TargetParameter target_param = 7;
  if (this->has_target_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->target_param_, output);
  }

  // optional .lbann.TargetParallelParameter target_parallel_param = 8;
  if (this->has_target_parallel_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->target_parallel_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:lbann.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.LayerParameter)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lbann.LayerParameter.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional .lbann.InputParameter input_param = 2;
  if (this->has_input_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->input_param_, false, target);
  }

  // optional .lbann.FullyConnectedParameter fully_connected_param = 3;
  if (this->has_fully_connected_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fully_connected_param_, false, target);
  }

  // optional .lbann.PoolingParameter pooling_param = 4;
  if (this->has_pooling_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pooling_param_, false, target);
  }

  // optional .lbann.ConvolutionParameter convolution_param = 5;
  if (this->has_convolution_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->convolution_param_, false, target);
  }

  // optional .lbann.SoftmaxParameter softmax_param = 6;
  if (this->has_softmax_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->softmax_param_, false, target);
  }

  // optional .lbann.TargetParameter target_param = 7;
  if (this->has_target_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->target_param_, false, target);
  }

  // optional .lbann.TargetParallelParameter target_parallel_param = 8;
  if (this->has_target_parallel_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->target_parallel_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lbann.LayerParameter)
  return target;
}

int LayerParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.LayerParameter)
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional .lbann.InputParameter input_param = 2;
  if (this->has_input_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_param_);
  }

  // optional .lbann.FullyConnectedParameter fully_connected_param = 3;
  if (this->has_fully_connected_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fully_connected_param_);
  }

  // optional .lbann.PoolingParameter pooling_param = 4;
  if (this->has_pooling_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pooling_param_);
  }

  // optional .lbann.ConvolutionParameter convolution_param = 5;
  if (this->has_convolution_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->convolution_param_);
  }

  // optional .lbann.SoftmaxParameter softmax_param = 6;
  if (this->has_softmax_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->softmax_param_);
  }

  // optional .lbann.TargetParameter target_param = 7;
  if (this->has_target_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_param_);
  }

  // optional .lbann.TargetParallelParameter target_parallel_param = 8;
  if (this->has_target_parallel_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_parallel_param_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LayerParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LayerParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.LayerParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.LayerParameter)
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.LayerParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_input_param()) {
    mutable_input_param()->::lbann::InputParameter::MergeFrom(from.input_param());
  }
  if (from.has_fully_connected_param()) {
    mutable_fully_connected_param()->::lbann::FullyConnectedParameter::MergeFrom(from.fully_connected_param());
  }
  if (from.has_pooling_param()) {
    mutable_pooling_param()->::lbann::PoolingParameter::MergeFrom(from.pooling_param());
  }
  if (from.has_convolution_param()) {
    mutable_convolution_param()->::lbann::ConvolutionParameter::MergeFrom(from.convolution_param());
  }
  if (from.has_softmax_param()) {
    mutable_softmax_param()->::lbann::SoftmaxParameter::MergeFrom(from.softmax_param());
  }
  if (from.has_target_param()) {
    mutable_target_param()->::lbann::TargetParameter::MergeFrom(from.target_param());
  }
  if (from.has_target_parallel_param()) {
    mutable_target_parallel_param()->::lbann::TargetParallelParameter::MergeFrom(from.target_parallel_param());
  }
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.LayerParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {

  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LayerParameter::InternalSwap(LayerParameter* other) {
  type_.Swap(&other->type_);
  std::swap(input_param_, other->input_param_);
  std::swap(fully_connected_param_, other->fully_connected_param_);
  std::swap(pooling_param_, other->pooling_param_);
  std::swap(convolution_param_, other->convolution_param_);
  std::swap(softmax_param_, other->softmax_param_);
  std::swap(target_param_, other->target_param_);
  std::swap(target_parallel_param_, other->target_parallel_param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LayerParameter

// optional string type = 1;
void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann.LayerParameter.type)
}
 void LayerParameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann.LayerParameter.type)
}
 void LayerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann.LayerParameter.type)
}
 ::std::string* LayerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.type)
}

// optional .lbann.InputParameter input_param = 2;
bool LayerParameter::has_input_param() const {
  return !_is_default_instance_ && input_param_ != NULL;
}
void LayerParameter::clear_input_param() {
  if (GetArenaNoVirtual() == NULL && input_param_ != NULL) delete input_param_;
  input_param_ = NULL;
}
const ::lbann::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
::lbann::InputParameter* LayerParameter::mutable_input_param() {
  
  if (input_param_ == NULL) {
    input_param_ = new ::lbann::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.input_param)
  return input_param_;
}
::lbann::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.input_param)
  
  ::lbann::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_input_param(::lbann::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.input_param)
}

// optional .lbann.FullyConnectedParameter fully_connected_param = 3;
bool LayerParameter::has_fully_connected_param() const {
  return !_is_default_instance_ && fully_connected_param_ != NULL;
}
void LayerParameter::clear_fully_connected_param() {
  if (GetArenaNoVirtual() == NULL && fully_connected_param_ != NULL) delete fully_connected_param_;
  fully_connected_param_ = NULL;
}
const ::lbann::FullyConnectedParameter& LayerParameter::fully_connected_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.fully_connected_param)
  return fully_connected_param_ != NULL ? *fully_connected_param_ : *default_instance_->fully_connected_param_;
}
::lbann::FullyConnectedParameter* LayerParameter::mutable_fully_connected_param() {
  
  if (fully_connected_param_ == NULL) {
    fully_connected_param_ = new ::lbann::FullyConnectedParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.fully_connected_param)
  return fully_connected_param_;
}
::lbann::FullyConnectedParameter* LayerParameter::release_fully_connected_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.fully_connected_param)
  
  ::lbann::FullyConnectedParameter* temp = fully_connected_param_;
  fully_connected_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_fully_connected_param(::lbann::FullyConnectedParameter* fully_connected_param) {
  delete fully_connected_param_;
  fully_connected_param_ = fully_connected_param;
  if (fully_connected_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.fully_connected_param)
}

// optional .lbann.PoolingParameter pooling_param = 4;
bool LayerParameter::has_pooling_param() const {
  return !_is_default_instance_ && pooling_param_ != NULL;
}
void LayerParameter::clear_pooling_param() {
  if (GetArenaNoVirtual() == NULL && pooling_param_ != NULL) delete pooling_param_;
  pooling_param_ = NULL;
}
const ::lbann::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
::lbann::PoolingParameter* LayerParameter::mutable_pooling_param() {
  
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::lbann::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.pooling_param)
  return pooling_param_;
}
::lbann::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.pooling_param)
  
  ::lbann::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_pooling_param(::lbann::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.pooling_param)
}

// optional .lbann.ConvolutionParameter convolution_param = 5;
bool LayerParameter::has_convolution_param() const {
  return !_is_default_instance_ && convolution_param_ != NULL;
}
void LayerParameter::clear_convolution_param() {
  if (GetArenaNoVirtual() == NULL && convolution_param_ != NULL) delete convolution_param_;
  convolution_param_ = NULL;
}
const ::lbann::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
::lbann::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::lbann::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.convolution_param)
  return convolution_param_;
}
::lbann::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.convolution_param)
  
  ::lbann::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_convolution_param(::lbann::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.convolution_param)
}

// optional .lbann.SoftmaxParameter softmax_param = 6;
bool LayerParameter::has_softmax_param() const {
  return !_is_default_instance_ && softmax_param_ != NULL;
}
void LayerParameter::clear_softmax_param() {
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
}
const ::lbann::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
::lbann::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::lbann::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.softmax_param)
  return softmax_param_;
}
::lbann::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.softmax_param)
  
  ::lbann::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_softmax_param(::lbann::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.softmax_param)
}

// optional .lbann.TargetParameter target_param = 7;
bool LayerParameter::has_target_param() const {
  return !_is_default_instance_ && target_param_ != NULL;
}
void LayerParameter::clear_target_param() {
  if (GetArenaNoVirtual() == NULL && target_param_ != NULL) delete target_param_;
  target_param_ = NULL;
}
const ::lbann::TargetParameter& LayerParameter::target_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.target_param)
  return target_param_ != NULL ? *target_param_ : *default_instance_->target_param_;
}
::lbann::TargetParameter* LayerParameter::mutable_target_param() {
  
  if (target_param_ == NULL) {
    target_param_ = new ::lbann::TargetParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.target_param)
  return target_param_;
}
::lbann::TargetParameter* LayerParameter::release_target_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.target_param)
  
  ::lbann::TargetParameter* temp = target_param_;
  target_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_target_param(::lbann::TargetParameter* target_param) {
  delete target_param_;
  target_param_ = target_param;
  if (target_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.target_param)
}

// optional .lbann.TargetParallelParameter target_parallel_param = 8;
bool LayerParameter::has_target_parallel_param() const {
  return !_is_default_instance_ && target_parallel_param_ != NULL;
}
void LayerParameter::clear_target_parallel_param() {
  if (GetArenaNoVirtual() == NULL && target_parallel_param_ != NULL) delete target_parallel_param_;
  target_parallel_param_ = NULL;
}
const ::lbann::TargetParallelParameter& LayerParameter::target_parallel_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.target_parallel_param)
  return target_parallel_param_ != NULL ? *target_parallel_param_ : *default_instance_->target_parallel_param_;
}
::lbann::TargetParallelParameter* LayerParameter::mutable_target_parallel_param() {
  
  if (target_parallel_param_ == NULL) {
    target_parallel_param_ = new ::lbann::TargetParallelParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.target_parallel_param)
  return target_parallel_param_;
}
::lbann::TargetParallelParameter* LayerParameter::release_target_parallel_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.target_parallel_param)
  
  ::lbann::TargetParallelParameter* temp = target_parallel_param_;
  target_parallel_param_ = NULL;
  return temp;
}
void LayerParameter::set_allocated_target_parallel_param(::lbann::TargetParallelParameter* target_parallel_param) {
  delete target_parallel_param_;
  target_parallel_param_ = target_parallel_param;
  if (target_parallel_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.target_parallel_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputParameter::InputParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.InputParameter)
}

void InputParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InputParameter::InputParameter(const InputParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.InputParameter)
}

void InputParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

InputParameter::~InputParameter() {
  // @@protoc_insertion_point(destructor:lbann.InputParameter)
  SharedDtor();
}

void InputParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputParameter_descriptor_;
}

const InputParameter& InputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

InputParameter* InputParameter::default_instance_ = NULL;

InputParameter* InputParameter::New(::google::protobuf::Arena* arena) const {
  InputParameter* n = new InputParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.InputParameter)
}

bool InputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.InputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.InputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.InputParameter)
  return false;
#undef DO_
}

void InputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.InputParameter)
  // @@protoc_insertion_point(serialize_end:lbann.InputParameter)
}

::google::protobuf::uint8* InputParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.InputParameter)
  // @@protoc_insertion_point(serialize_to_array_end:lbann.InputParameter)
  return target;
}

int InputParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.InputParameter)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.InputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InputParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InputParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.InputParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.InputParameter)
    MergeFrom(*source);
  }
}

void InputParameter::MergeFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.InputParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void InputParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputParameter::CopyFrom(const InputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.InputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputParameter::IsInitialized() const {

  return true;
}

void InputParameter::Swap(InputParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputParameter::InternalSwap(InputParameter* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputParameter_descriptor_;
  metadata.reflection = InputParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullyConnectedParameter::FullyConnectedParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.FullyConnectedParameter)
}

void FullyConnectedParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FullyConnectedParameter::FullyConnectedParameter(const FullyConnectedParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.FullyConnectedParameter)
}

void FullyConnectedParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FullyConnectedParameter::~FullyConnectedParameter() {
  // @@protoc_insertion_point(destructor:lbann.FullyConnectedParameter)
  SharedDtor();
}

void FullyConnectedParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FullyConnectedParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FullyConnectedParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FullyConnectedParameter_descriptor_;
}

const FullyConnectedParameter& FullyConnectedParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

FullyConnectedParameter* FullyConnectedParameter::default_instance_ = NULL;

FullyConnectedParameter* FullyConnectedParameter::New(::google::protobuf::Arena* arena) const {
  FullyConnectedParameter* n = new FullyConnectedParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FullyConnectedParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.FullyConnectedParameter)
}

bool FullyConnectedParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.FullyConnectedParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.FullyConnectedParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.FullyConnectedParameter)
  return false;
#undef DO_
}

void FullyConnectedParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.FullyConnectedParameter)
  // @@protoc_insertion_point(serialize_end:lbann.FullyConnectedParameter)
}

::google::protobuf::uint8* FullyConnectedParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.FullyConnectedParameter)
  // @@protoc_insertion_point(serialize_to_array_end:lbann.FullyConnectedParameter)
  return target;
}

int FullyConnectedParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.FullyConnectedParameter)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FullyConnectedParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.FullyConnectedParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FullyConnectedParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FullyConnectedParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.FullyConnectedParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.FullyConnectedParameter)
    MergeFrom(*source);
  }
}

void FullyConnectedParameter::MergeFrom(const FullyConnectedParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.FullyConnectedParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void FullyConnectedParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.FullyConnectedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullyConnectedParameter::CopyFrom(const FullyConnectedParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.FullyConnectedParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullyConnectedParameter::IsInitialized() const {

  return true;
}

void FullyConnectedParameter::Swap(FullyConnectedParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullyConnectedParameter::InternalSwap(FullyConnectedParameter* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FullyConnectedParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FullyConnectedParameter_descriptor_;
  metadata.reflection = FullyConnectedParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FullyConnectedParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoolingParameter::PoolingParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.PoolingParameter)
}

void PoolingParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PoolingParameter::PoolingParameter(const PoolingParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.PoolingParameter)
}

void PoolingParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PoolingParameter::~PoolingParameter() {
  // @@protoc_insertion_point(destructor:lbann.PoolingParameter)
  SharedDtor();
}

void PoolingParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PoolingParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoolingParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolingParameter_descriptor_;
}

const PoolingParameter& PoolingParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

PoolingParameter* PoolingParameter::default_instance_ = NULL;

PoolingParameter* PoolingParameter::New(::google::protobuf::Arena* arena) const {
  PoolingParameter* n = new PoolingParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoolingParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.PoolingParameter)
}

bool PoolingParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.PoolingParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.PoolingParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.PoolingParameter)
  return false;
#undef DO_
}

void PoolingParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.PoolingParameter)
  // @@protoc_insertion_point(serialize_end:lbann.PoolingParameter)
}

::google::protobuf::uint8* PoolingParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.PoolingParameter)
  // @@protoc_insertion_point(serialize_to_array_end:lbann.PoolingParameter)
  return target;
}

int PoolingParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.PoolingParameter)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoolingParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.PoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PoolingParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PoolingParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.PoolingParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.PoolingParameter)
    MergeFrom(*source);
  }
}

void PoolingParameter::MergeFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.PoolingParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void PoolingParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoolingParameter::CopyFrom(const PoolingParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.PoolingParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoolingParameter::IsInitialized() const {

  return true;
}

void PoolingParameter::Swap(PoolingParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoolingParameter::InternalSwap(PoolingParameter* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoolingParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoolingParameter_descriptor_;
  metadata.reflection = PoolingParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoolingParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConvolutionParameter::ConvolutionParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.ConvolutionParameter)
}

void ConvolutionParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConvolutionParameter::ConvolutionParameter(const ConvolutionParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.ConvolutionParameter)
}

void ConvolutionParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ConvolutionParameter::~ConvolutionParameter() {
  // @@protoc_insertion_point(destructor:lbann.ConvolutionParameter)
  SharedDtor();
}

void ConvolutionParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvolutionParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvolutionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvolutionParameter_descriptor_;
}

const ConvolutionParameter& ConvolutionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

ConvolutionParameter* ConvolutionParameter::default_instance_ = NULL;

ConvolutionParameter* ConvolutionParameter::New(::google::protobuf::Arena* arena) const {
  ConvolutionParameter* n = new ConvolutionParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConvolutionParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.ConvolutionParameter)
}

bool ConvolutionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.ConvolutionParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.ConvolutionParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.ConvolutionParameter)
  return false;
#undef DO_
}

void ConvolutionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.ConvolutionParameter)
  // @@protoc_insertion_point(serialize_end:lbann.ConvolutionParameter)
}

::google::protobuf::uint8* ConvolutionParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.ConvolutionParameter)
  // @@protoc_insertion_point(serialize_to_array_end:lbann.ConvolutionParameter)
  return target;
}

int ConvolutionParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.ConvolutionParameter)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvolutionParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.ConvolutionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConvolutionParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConvolutionParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.ConvolutionParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.ConvolutionParameter)
    MergeFrom(*source);
  }
}

void ConvolutionParameter::MergeFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.ConvolutionParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ConvolutionParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvolutionParameter::CopyFrom(const ConvolutionParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.ConvolutionParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionParameter::IsInitialized() const {

  return true;
}

void ConvolutionParameter::Swap(ConvolutionParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConvolutionParameter::InternalSwap(ConvolutionParameter* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConvolutionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvolutionParameter_descriptor_;
  metadata.reflection = ConvolutionParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConvolutionParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftmaxParameter::SoftmaxParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.SoftmaxParameter)
}

void SoftmaxParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SoftmaxParameter::SoftmaxParameter(const SoftmaxParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.SoftmaxParameter)
}

void SoftmaxParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SoftmaxParameter::~SoftmaxParameter() {
  // @@protoc_insertion_point(destructor:lbann.SoftmaxParameter)
  SharedDtor();
}

void SoftmaxParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftmaxParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftmaxParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftmaxParameter_descriptor_;
}

const SoftmaxParameter& SoftmaxParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

SoftmaxParameter* SoftmaxParameter::default_instance_ = NULL;

SoftmaxParameter* SoftmaxParameter::New(::google::protobuf::Arena* arena) const {
  SoftmaxParameter* n = new SoftmaxParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftmaxParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.SoftmaxParameter)
}

bool SoftmaxParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.SoftmaxParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.SoftmaxParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.SoftmaxParameter)
  return false;
#undef DO_
}

void SoftmaxParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.SoftmaxParameter)
  // @@protoc_insertion_point(serialize_end:lbann.SoftmaxParameter)
}

::google::protobuf::uint8* SoftmaxParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.SoftmaxParameter)
  // @@protoc_insertion_point(serialize_to_array_end:lbann.SoftmaxParameter)
  return target;
}

int SoftmaxParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.SoftmaxParameter)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftmaxParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.SoftmaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SoftmaxParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftmaxParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.SoftmaxParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.SoftmaxParameter)
    MergeFrom(*source);
  }
}

void SoftmaxParameter::MergeFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.SoftmaxParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SoftmaxParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftmaxParameter::CopyFrom(const SoftmaxParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.SoftmaxParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftmaxParameter::IsInitialized() const {

  return true;
}

void SoftmaxParameter::Swap(SoftmaxParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftmaxParameter::InternalSwap(SoftmaxParameter* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftmaxParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftmaxParameter_descriptor_;
  metadata.reflection = SoftmaxParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftmaxParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetParameter::TargetParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.TargetParameter)
}

void TargetParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TargetParameter::TargetParameter(const TargetParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.TargetParameter)
}

void TargetParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TargetParameter::~TargetParameter() {
  // @@protoc_insertion_point(destructor:lbann.TargetParameter)
  SharedDtor();
}

void TargetParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetParameter_descriptor_;
}

const TargetParameter& TargetParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

TargetParameter* TargetParameter::default_instance_ = NULL;

TargetParameter* TargetParameter::New(::google::protobuf::Arena* arena) const {
  TargetParameter* n = new TargetParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.TargetParameter)
}

bool TargetParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.TargetParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.TargetParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.TargetParameter)
  return false;
#undef DO_
}

void TargetParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.TargetParameter)
  // @@protoc_insertion_point(serialize_end:lbann.TargetParameter)
}

::google::protobuf::uint8* TargetParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.TargetParameter)
  // @@protoc_insertion_point(serialize_to_array_end:lbann.TargetParameter)
  return target;
}

int TargetParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.TargetParameter)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.TargetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.TargetParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.TargetParameter)
    MergeFrom(*source);
  }
}

void TargetParameter::MergeFrom(const TargetParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.TargetParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TargetParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.TargetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetParameter::CopyFrom(const TargetParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.TargetParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParameter::IsInitialized() const {

  return true;
}

void TargetParameter::Swap(TargetParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetParameter::InternalSwap(TargetParameter* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetParameter_descriptor_;
  metadata.reflection = TargetParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetParallelParameter::TargetParallelParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lbann.TargetParallelParameter)
}

void TargetParallelParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TargetParallelParameter::TargetParallelParameter(const TargetParallelParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lbann.TargetParallelParameter)
}

void TargetParallelParameter::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TargetParallelParameter::~TargetParallelParameter() {
  // @@protoc_insertion_point(destructor:lbann.TargetParallelParameter)
  SharedDtor();
}

void TargetParallelParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetParallelParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetParallelParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetParallelParameter_descriptor_;
}

const TargetParallelParameter& TargetParallelParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lbann_2eproto();
  return *default_instance_;
}

TargetParallelParameter* TargetParallelParameter::default_instance_ = NULL;

TargetParallelParameter* TargetParallelParameter::New(::google::protobuf::Arena* arena) const {
  TargetParallelParameter* n = new TargetParallelParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetParallelParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:lbann.TargetParallelParameter)
}

bool TargetParallelParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lbann.TargetParallelParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:lbann.TargetParallelParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lbann.TargetParallelParameter)
  return false;
#undef DO_
}

void TargetParallelParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lbann.TargetParallelParameter)
  // @@protoc_insertion_point(serialize_end:lbann.TargetParallelParameter)
}

::google::protobuf::uint8* TargetParallelParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lbann.TargetParallelParameter)
  // @@protoc_insertion_point(serialize_to_array_end:lbann.TargetParallelParameter)
  return target;
}

int TargetParallelParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:lbann.TargetParallelParameter)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetParallelParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lbann.TargetParallelParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetParallelParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetParallelParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lbann.TargetParallelParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lbann.TargetParallelParameter)
    MergeFrom(*source);
  }
}

void TargetParallelParameter::MergeFrom(const TargetParallelParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lbann.TargetParallelParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void TargetParallelParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lbann.TargetParallelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetParallelParameter::CopyFrom(const TargetParallelParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lbann.TargetParallelParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetParallelParameter::IsInitialized() const {

  return true;
}

void TargetParallelParameter::Swap(TargetParallelParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetParallelParameter::InternalSwap(TargetParallelParameter* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetParallelParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetParallelParameter_descriptor_;
  metadata.reflection = TargetParallelParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetParallelParameter

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lbann

// @@protoc_insertion_point(global_scope)
