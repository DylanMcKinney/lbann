#!/bin/bash

# Experiment parameters
EXPERIMENT_NAME=lbann_alexnet
LBANN_DIR=$(git rev-parse --show-toplevel)
MODEL_ARGS="--model=${LBANN_DIR}/model_zoo/prototext/model_alexnet.prototext --num_epochs=10"
OPTIMIZER_ARGS="--optimizer=${LBANN_DIR}/model_zoo/prototext/opt_adam.prototext"
DATASET_CLASSES=10 # default: 1000 (options: 10, 100, 300, 1000)

# Hardware configuration
CLUSTER=
PARTITION=
BANK=
NUM_NODES=4 # default: 1
PROCS_PER_NODE= # default: 2 (1 if NUM_NODES=1)
USE_GPU= # YES or NO
OMP_NUM_THREADS= # default: (number of cores) / PROCS_PER_NODE
TIME_LIMIT= # default: 12:00:00

# Additional parameters
HOME_DIR=${LBANN_DIR}/experiments
EXPERIMENT_SCRIPT=$(readlink -f "$0")
CACHE_DATASET= # default: YES
CACHE_DIR= 
LUSTRE_DIR=/p/lscratchf/brainusr
DATASET_DIR=datasets/ILSVRC2012
USE_VTUNE= # default: NO
VTUNE_EXE=amplxe-cl-mpi
VTUNE_ARGS="-collect hotspots "

# Set defaults
EXPERIMENT_NAME="${EXPERIMENT_NAME:-test}"
DATASET_CLASSES="${DATASET_CLASSES:-1000}"
NUM_NODES="${NUM_NODES:-1}"
if [ -z ${PROCS_PER_NODE} ]; then
    if [ "${NUM_NODES}" -eq "1" ]; then
        PROCS_PER_NODE=1
    else
        PROCS_PER_NODE=2
    fi
fi
TIME_LIMIT="${TIME_LIMIT:-12:00:00}"
CACHE_DATASET="${CACHE_DATASET:-YES}"
USE_VTUNE="${USE_VTUNE:-NO}"

# Set cluster-specific defaults
CLUSTER="${CLUSTER:-$(hostname | sed 's/\([a-zA-Z][a-zA-Z]*\)[0-9]*/\1/g')}"
case ${CLUSTER} in
    "catalyst")
        BANK="${BANK:-brain}"
        PARTITION="${PARTITION:-pbatch}"
        USE_GPU="${USE_GPU:-NO}"
        OMP_NUM_THREADS="${OMP_NUM_THREADS:-$((24 / ${PROCS_PER_NODE}))}"
        CACHE_DIR="${CACHE_DIR:-/l/ssd/${USER}}"
        ;;
    "quartz")
        BANK="${BANK:-brain}"
        PARTITION="${PARTITION:-pbatch}"
        USE_GPU="${USE_GPU:-NO}"
        OMP_NUM_THREADS="${OMP_NUM_THREADS:-$((36 / ${PROCS_PER_NODE}))}"
        CACHE_DIR="${CACHE_DIR:-/tmp/${USER}}"
        ;;
    "surface")
        BANK="${BANK:-hpclearn}"
        PARTITION="${PARTITION:-gpgpu}"
        USE_GPU="${USE_GPU:-YES}"
        if [ -z "${OMP_NUM_THREADS}" ]; then
            if [ "${PARTITION}" == "pbatch" ]; then
                OMP_NUM_THREADS=$((16 / ${PROCS_PER_NODE}))
            elif [ "${PARTITION}" == "gpgpu" ]; then
                OMP_NUM_THREADS=$((36 / ${PROCS_PER_NODE}))
            else
                echo "Error: unrecognized partition (${PARTITION} on ${CLUSTER})"
                exit 1
            fi
        fi
        CACHE_DIR="${CACHE_DIR:-/tmp/${USER}}"
        ;;
    *)
        echo "Error: unrecognized system (${CLUSTER})"
        exit 1
        ;;
esac

# Initialize dataset
case ${DATASET_CLASSES} in
    "10")
        DATASET_SUFFIX=_c0-9
        ;;
    "100")
        DATASET_SUFFIX=_c0-99
        ;;
    "300")
        DATASET_SUFFIX=_c0-299
        ;;
    *)
        DATASET_SUFFIX=
        ;;
esac
case ${CACHE_DATASET} in
    YES|yes|TRUE|true|ON|on|1)
        ;;
    *)
        CACHE_DIR=${LUSTRE_DIR}
        ;;
esac

# Initialize experiment command
READER_ARGS="--reader=${LBANN_DIR}/model_zoo/prototext/data_reader_imagenet.prototext --data_filedir_train=${CACHE_DIR}/${DATASET_DIR}/resized_256x256/train/ --data_filename_train=${CACHE_DIR}/${DATASET_DIR}/labels/train${DATASET_SUFFIX}.txt --data_filedir_test=${CACHE_DIR}/${DATASET_DIR}/resized_256x256/val/ --data_filename_test=${CACHE_DIR}/${DATASET_DIR}/labels/val${DATASET_SUFFIX}.txt"
EXPERIMENT_COMMAND="${LBANN_DIR}/build/${CLUSTER}.llnl.gov/model_zoo/lbann ${MODEL_ARGS} ${OPTIMIZER_ARGS} ${READER_ARGS}"

# Make directories
EXPERIMENT_DIR=${HOME_DIR}/$(date +%Y%m%d_%H%M%S)_${EXPERIMENT_NAME}_${CLUSTER}_N${NUM_NODES}
mkdir -p ${EXPERIMENT_DIR}
case ${USE_VTUNE} in
    YES|yes|TRUE|true|ON|on|1)
        VTUNE_DIR=${EXPERIMENT_DIR}/vtune
        mkdir ${VTUNE_DIR}
        ;;
esac

# Move to experiment directory
pushd ${EXPERIMENT_DIR}

# Copy experiment script to directory
cp ${EXPERIMENT_SCRIPT} ${EXPERIMENT_DIR}

# Output parameters and set Moab settings
MOAB_SCRIPT=${EXPERIMENT_DIR}/moab_script.sh
echo "#!/bin/bash"                                      > ${MOAB_SCRIPT}
echo ""                                                >> ${MOAB_SCRIPT}
echo "# ======== Experiment parameters ========"       >> ${MOAB_SCRIPT}
echo "# Moab script generated by ${EXPERIMENT_SCRIPT}" >> ${MOAB_SCRIPT}
echo "# Directory: ${EXPERIMENT_DIR}"                  >> ${MOAB_SCRIPT}
echo "# Time: $(date "+%Y-%m-%d %H:%M:%S")"            >> ${MOAB_SCRIPT}
echo "# EXPERIMENT_NAME: ${EXPERIMENT_NAME}"           >> ${MOAB_SCRIPT}
echo "# LBANN_DIR: ${LBANN_DIR}"                       >> ${MOAB_SCRIPT}
echo "# EXPERIMENT_COMMAND: ${EXPERIMENT_COMMAND}"     >> ${MOAB_SCRIPT}
echo "# CLUSTER: ${CLUSTER}"                           >> ${MOAB_SCRIPT}
echo "# PARTITION: ${PARTITION}"                       >> ${MOAB_SCRIPT}
echo "# BANK: ${BANK}"                                 >> ${MOAB_SCRIPT}
echo "# NUM_NODES: ${NUM_NODES}"                       >> ${MOAB_SCRIPT}
echo "# PROCS_PER_NODE: ${PROCS_PER_NODE}"             >> ${MOAB_SCRIPT}
echo "# USE_GPU: ${USE_GPU}"                           >> ${MOAB_SCRIPT}
echo "# TIME_LIMIT: ${TIME_LIMIT}"                     >> ${MOAB_SCRIPT}
echo "# CACHE_DATASET: ${CACHE_DATASET}"               >> ${MOAB_SCRIPT}
echo "# LUSTRE_DIR: ${LUSTRE_DIR}"                     >> ${MOAB_SCRIPT}
echo "# DATASET_DIR: ${DATASET_DIR}"                   >> ${MOAB_SCRIPT}
echo "# CACHE_DIR: ${CACHE_DIR}"                       >> ${MOAB_SCRIPT}
echo "# USE_VTUNE: ${USE_VTUNE}"                       >> ${MOAB_SCRIPT}
echo ""                                                >> ${MOAB_SCRIPT}
echo "# ======== Moab settings ========"               >> ${MOAB_SCRIPT}
echo "#MSUB -A ${BANK}"                                >> ${MOAB_SCRIPT}
echo "#MSUB -d ${EXPERIMENT_DIR}"                      >> ${MOAB_SCRIPT}
echo "#MSUB -j oe"                                     >> ${MOAB_SCRIPT}
echo "#MSUB -l nodes=${NUM_NODES}"                     >> ${MOAB_SCRIPT}
echo "#MSUB -l partition=${CLUSTER}"                   >> ${MOAB_SCRIPT}
echo "#MSUB -l walltime=${TIME_LIMIT}"                 >> ${MOAB_SCRIPT}
echo "#MSUB -N ${EXPERIMENT_NAME}"                     >> ${MOAB_SCRIPT}
echo "#MSUB -o ${EXPERIMENT_DIR}/output.txt"           >> ${MOAB_SCRIPT}
echo "#MSUB -q ${PARTITION}"                           >> ${MOAB_SCRIPT}
echo "#MSUB -S /bin/bash"                              >> ${MOAB_SCRIPT}
echo ""                                                >> ${MOAB_SCRIPT}
echo "# ======== Environment variables ========"       >> ${MOAB_SCRIPT}
echo "export OMP_NUM_THREADS=${OMP_NUM_THREADS}"       >> ${MOAB_SCRIPT}
echo ""                                                >> ${MOAB_SCRIPT}
echo "# ======== Print node name ========"             >> ${MOAB_SCRIPT}
echo "pdsh hostname"                                   >> ${MOAB_SCRIPT}
echo ""                                                >> ${MOAB_SCRIPT}

case ${CACHE_DATASET} in
    YES|yes|TRUE|true|ON|on|1)
        # Cache dataset in node-local memory
        echo "# ======== Cache dataset ========" >> ${MOAB_SCRIPT}
        echo "echo \"Caching dataset...\"" >> ${MOAB_SCRIPT}
        BCAST="/collab/usr/global/tools/stat/file_bcast/${SYS_TYPE}/fbcast/file_bcast_par13 1MB"
        COPY_COMMAND="srun --nodes=${NUM_NODES} --ntasks-per-node=${OMP_NUM_THREADS} ${BCAST}"
        echo "pdsh mkdir -p ${CACHE_DIR}/${DATASET_DIR}/resized_256x256" >> ${MOAB_SCRIPT}
        echo "pdsh mkdir -p ${CACHE_DIR}/${DATASET_DIR}/labels" >> ${MOAB_SCRIPT}
        for TARBALL in labels.tar
        do
            LUSTRE_FILE=${LUSTRE_DIR}/${DATASET_DIR}/${TARBALL}
            CACHE_FILE=${CACHE_DIR}/${DATASET_DIR}/$(basename ${TARBALL})
            OUTPUT_FILE=${CACHE_DIR}/${DATASET_DIR}/labels/train.txt
            echo "[ -e ${CACHE_FILE} ] || \\" >> ${MOAB_SCRIPT}
            echo "  ${COPY_COMMAND} ${LUSTRE_FILE} ${CACHE_FILE} > /dev/null && \\" >> ${MOAB_SCRIPT}
            echo "[ -e ${OUTPUT_FILE} ] || \\" >> ${MOAB_SCRIPT}
            echo "  pdsh tar xf ${CACHE_FILE} -C ${CACHE_DIR}/${DATASET_DIR} &" >> ${MOAB_SCRIPT}
        done
        for TARBALL in resized_256x256/train.tar resized_256x256/val.tar
        do
            LUSTRE_FILE=${LUSTRE_DIR}/${DATASET_DIR}/${TARBALL}
            CACHE_FILE=${CACHE_DIR}/${DATASET_DIR}/$(basename ${TARBALL})
            OUTPUT_DIR=${CACHE_DIR}/${DATASET_DIR}/resized_256x256/$(basename ${TARBALL} .tar)
            echo "[ -e ${CACHE_FILE} ] || \\" >> ${MOAB_SCRIPT}
            echo "  ${COPY_COMMAND} ${LUSTRE_FILE} ${CACHE_FILE} > /dev/null && \\" >> ${MOAB_SCRIPT}
            echo "[ -d ${OUTPUT_DIR} ] || \\" >> ${MOAB_SCRIPT}
            echo "  pdsh tar xf ${CACHE_FILE} -C ${CACHE_DIR}/${DATASET_DIR}/resized_256x256 &" >> ${MOAB_SCRIPT}
        done
        echo "wait" >> ${MOAB_SCRIPT}
        echo "echo \"Done caching dataset...\"" >> ${MOAB_SCRIPT}
        echo "" >> ${MOAB_SCRIPT}
        ;;
esac

# Set experiment
echo "# ======== Experiment ========" >> ${MOAB_SCRIPT}
SRUN_COMMAND="srun --nodes=${NUM_NODES} --ntasks-per-node=${PROCS_PER_NODE}"
case ${USE_GPU} in
    YES|yes|TRUE|true|ON|on|1)
        SRUN_COMMAND="${SRUN_COMMAND} --nvidia_compute_mode=default"
        ;;
esac
case ${USE_VTUNE} in
    YES|yes|TRUE|true|ON|on|1)
        VTUNE_COMMAND="${VTUNE_EXE} -r ${VTUNE_DIR} -app-working-dir ${EXPERIMENT_DIR} ${VTUNE_ARGS} --"
        ;;
esac
echo "${SRUN_COMMAND} ${VTUNE_COMMAND} ${EXPERIMENT_COMMAND}" >> ${MOAB_SCRIPT}

# Submit script to Moab
msub ${MOAB_SCRIPT}

# Return to original directory
dirs -c
