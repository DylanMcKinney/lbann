// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbann.proto

#ifndef PROTOBUF_lbann_2eproto__INCLUDED
#define PROTOBUF_lbann_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lbann_data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lbann_2eproto();
void protobuf_AssignDesc_lbann_2eproto();
void protobuf_ShutdownFile_lbann_2eproto();

class Convolution;
class FullyConnected;
class Input;
class InputDistributedMiniBatch;
class InputDistributedMiniBatchParallelIO;
class Layer;
class LbannPB;
class Model;
class Pooling;
class Softmax;
class Target;
class TargetDistributedMinibatch;
class TargetParallel;

enum WeightInitialization {
  ZERO = 0,
  UNIFORM = 1,
  NORMAL = 2,
  GLOROT_NORMAL = 3,
  HE_NORMAL = 4,
  HE_UNIFORM = 5,
  WeightInitialization_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WeightInitialization_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WeightInitialization_IsValid(int value);
const WeightInitialization WeightInitialization_MIN = ZERO;
const WeightInitialization WeightInitialization_MAX = HE_UNIFORM;
const int WeightInitialization_ARRAYSIZE = WeightInitialization_MAX + 1;

const ::google::protobuf::EnumDescriptor* WeightInitialization_descriptor();
inline const ::std::string& WeightInitialization_Name(WeightInitialization value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeightInitialization_descriptor(), value);
}
inline bool WeightInitialization_Parse(
    const ::std::string& name, WeightInitialization* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeightInitialization>(
    WeightInitialization_descriptor(), name, value);
}
enum ActivationType {
  SIGMOID = 0,
  TANH = 1,
  RELU = 2,
  ID = 3,
  LEAKY_RELU = 4,
  SMOOTH_RELU = 5,
  ELU = 6,
  ActivationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActivationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActivationType_IsValid(int value);
const ActivationType ActivationType_MIN = SIGMOID;
const ActivationType ActivationType_MAX = ELU;
const int ActivationType_ARRAYSIZE = ActivationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivationType_descriptor();
inline const ::std::string& ActivationType_Name(ActivationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivationType_descriptor(), value);
}
inline bool ActivationType_Parse(
    const ::std::string& name, ActivationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivationType>(
    ActivationType_descriptor(), name, value);
}
enum PoolMode {
  MAX = 0,
  AVERAGE = 1,
  AVERAGE_NO_PAD = 2,
  PoolMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PoolMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PoolMode_IsValid(int value);
const PoolMode PoolMode_MIN = MAX;
const PoolMode PoolMode_MAX = AVERAGE_NO_PAD;
const int PoolMode_ARRAYSIZE = PoolMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolMode_descriptor();
inline const ::std::string& PoolMode_Name(PoolMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolMode_descriptor(), value);
}
inline bool PoolMode_Parse(
    const ::std::string& name, PoolMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolMode>(
    PoolMode_descriptor(), name, value);
}
// ===================================================================

class LbannPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.LbannPB) */ {
 public:
  LbannPB();
  virtual ~LbannPB();

  LbannPB(const LbannPB& from);

  inline LbannPB& operator=(const LbannPB& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LbannPB& default_instance();

  void Swap(LbannPB* other);

  // implements Message ----------------------------------------------

  inline LbannPB* New() const { return New(NULL); }

  LbannPB* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LbannPB& from);
  void MergeFrom(const LbannPB& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LbannPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lbann_data.Model train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::lbann_data::Model& train_net() const;
  ::lbann_data::Model* mutable_train_net();
  ::lbann_data::Model* release_train_net();
  void set_allocated_train_net(::lbann_data::Model* train_net);

  // optional string optimizer = 10;
  void clear_optimizer();
  static const int kOptimizerFieldNumber = 10;
  const ::std::string& optimizer() const;
  void set_optimizer(const ::std::string& value);
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  ::std::string* mutable_optimizer();
  ::std::string* release_optimizer();
  void set_allocated_optimizer(::std::string* optimizer);

  // optional string objective_fn = 11;
  void clear_objective_fn();
  static const int kObjectiveFnFieldNumber = 11;
  const ::std::string& objective_fn() const;
  void set_objective_fn(const ::std::string& value);
  void set_objective_fn(const char* value);
  void set_objective_fn(const char* value, size_t size);
  ::std::string* mutable_objective_fn();
  ::std::string* release_objective_fn();
  void set_allocated_objective_fn(::std::string* objective_fn);

  // optional uint32 mini_batch_size = 12;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 12;
  ::google::protobuf::uint32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.LbannPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::lbann_data::Model* train_net_;
  ::google::protobuf::internal::ArenaStringPtr optimizer_;
  ::google::protobuf::internal::ArenaStringPtr objective_fn_;
  ::google::protobuf::uint32 mini_batch_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static LbannPB* default_instance_;
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  void Swap(Model* other);

  // implements Message ----------------------------------------------

  inline Model* New() const { return New(NULL); }

  Model* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .lbann_data.Layer layer = 2;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::lbann_data::Layer& layer(int index) const;
  ::lbann_data::Layer* mutable_layer(int index);
  ::lbann_data::Layer* add_layer();
  ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >&
      layer() const;

  // repeated string callback = 3;
  int callback_size() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 3;
  const ::std::string& callback(int index) const;
  ::std::string* mutable_callback(int index);
  void set_callback(int index, const ::std::string& value);
  void set_callback(int index, const char* value);
  void set_callback(int index, const char* value, size_t size);
  ::std::string* add_callback();
  void add_callback(const ::std::string& value);
  void add_callback(const char* value);
  void add_callback(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& callback() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_callback();

  // @@protoc_insertion_point(class_scope:lbann_data.Model)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer > layer_;
  ::google::protobuf::RepeatedPtrField< ::std::string> callback_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static Model* default_instance_;
};
// -------------------------------------------------------------------

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  void Swap(Layer* other);

  // implements Message ----------------------------------------------

  inline Layer* New() const { return New(NULL); }

  Layer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  bool has_input_distributed_minibatch_parallel_io() const;
  void clear_input_distributed_minibatch_parallel_io();
  static const int kInputDistributedMinibatchParallelIoFieldNumber = 8;
  const ::lbann_data::InputDistributedMiniBatchParallelIO& input_distributed_minibatch_parallel_io() const;
  ::lbann_data::InputDistributedMiniBatchParallelIO* mutable_input_distributed_minibatch_parallel_io();
  ::lbann_data::InputDistributedMiniBatchParallelIO* release_input_distributed_minibatch_parallel_io();
  void set_allocated_input_distributed_minibatch_parallel_io(::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io);

  // optional .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  bool has_input_distributed_minibatch() const;
  void clear_input_distributed_minibatch();
  static const int kInputDistributedMinibatchFieldNumber = 9;
  const ::lbann_data::InputDistributedMiniBatch& input_distributed_minibatch() const;
  ::lbann_data::InputDistributedMiniBatch* mutable_input_distributed_minibatch();
  ::lbann_data::InputDistributedMiniBatch* release_input_distributed_minibatch();
  void set_allocated_input_distributed_minibatch(::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch);

  // optional .lbann_data.Input input = 10;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 10;
  const ::lbann_data::Input& input() const;
  ::lbann_data::Input* mutable_input();
  ::lbann_data::Input* release_input();
  void set_allocated_input(::lbann_data::Input* input);

  // optional .lbann_data.FullyConnected fully_connected = 11;
  bool has_fully_connected() const;
  void clear_fully_connected();
  static const int kFullyConnectedFieldNumber = 11;
  const ::lbann_data::FullyConnected& fully_connected() const;
  ::lbann_data::FullyConnected* mutable_fully_connected();
  ::lbann_data::FullyConnected* release_fully_connected();
  void set_allocated_fully_connected(::lbann_data::FullyConnected* fully_connected);

  // optional .lbann_data.Pooling pooling = 12;
  bool has_pooling() const;
  void clear_pooling();
  static const int kPoolingFieldNumber = 12;
  const ::lbann_data::Pooling& pooling() const;
  ::lbann_data::Pooling* mutable_pooling();
  ::lbann_data::Pooling* release_pooling();
  void set_allocated_pooling(::lbann_data::Pooling* pooling);

  // optional .lbann_data.Convolution convolution = 13;
  bool has_convolution() const;
  void clear_convolution();
  static const int kConvolutionFieldNumber = 13;
  const ::lbann_data::Convolution& convolution() const;
  ::lbann_data::Convolution* mutable_convolution();
  ::lbann_data::Convolution* release_convolution();
  void set_allocated_convolution(::lbann_data::Convolution* convolution);

  // optional .lbann_data.Softmax softmax = 14;
  bool has_softmax() const;
  void clear_softmax();
  static const int kSoftmaxFieldNumber = 14;
  const ::lbann_data::Softmax& softmax() const;
  ::lbann_data::Softmax* mutable_softmax();
  ::lbann_data::Softmax* release_softmax();
  void set_allocated_softmax(::lbann_data::Softmax* softmax);

  // optional .lbann_data.Target target = 15;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 15;
  const ::lbann_data::Target& target() const;
  ::lbann_data::Target* mutable_target();
  ::lbann_data::Target* release_target();
  void set_allocated_target(::lbann_data::Target* target);

  // optional .lbann_data.TargetParallel target_parallel = 16;
  bool has_target_parallel() const;
  void clear_target_parallel();
  static const int kTargetParallelFieldNumber = 16;
  const ::lbann_data::TargetParallel& target_parallel() const;
  ::lbann_data::TargetParallel* mutable_target_parallel();
  ::lbann_data::TargetParallel* release_target_parallel();
  void set_allocated_target_parallel(::lbann_data::TargetParallel* target_parallel);

  // optional .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  bool has_target_distributed_minibatch() const;
  void clear_target_distributed_minibatch();
  static const int kTargetDistributedMinibatchFieldNumber = 17;
  const ::lbann_data::TargetDistributedMinibatch& target_distributed_minibatch() const;
  ::lbann_data::TargetDistributedMinibatch* mutable_target_distributed_minibatch();
  ::lbann_data::TargetDistributedMinibatch* release_target_distributed_minibatch();
  void set_allocated_target_distributed_minibatch(::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch);

  // @@protoc_insertion_point(class_scope:lbann_data.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io_;
  ::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch_;
  ::lbann_data::Input* input_;
  ::lbann_data::FullyConnected* fully_connected_;
  ::lbann_data::Pooling* pooling_;
  ::lbann_data::Convolution* convolution_;
  ::lbann_data::Softmax* softmax_;
  ::lbann_data::Target* target_;
  ::lbann_data::TargetParallel* target_parallel_;
  ::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch_;
  ::google::protobuf::uint32 index_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static Layer* default_instance_;
};
// -------------------------------------------------------------------

class Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Input& default_instance();

  void Swap(Input* other);

  // implements Message ----------------------------------------------

  inline Input* New() const { return New(NULL); }

  Input* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mini_batch_size = 1;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 1;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 mini_batch_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static Input* default_instance_;
};
// -------------------------------------------------------------------

class InputDistributedMiniBatchParallelIO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.InputDistributedMiniBatchParallelIO) */ {
 public:
  InputDistributedMiniBatchParallelIO();
  virtual ~InputDistributedMiniBatchParallelIO();

  InputDistributedMiniBatchParallelIO(const InputDistributedMiniBatchParallelIO& from);

  inline InputDistributedMiniBatchParallelIO& operator=(const InputDistributedMiniBatchParallelIO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputDistributedMiniBatchParallelIO& default_instance();

  void Swap(InputDistributedMiniBatchParallelIO* other);

  // implements Message ----------------------------------------------

  inline InputDistributedMiniBatchParallelIO* New() const { return New(NULL); }

  InputDistributedMiniBatchParallelIO* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputDistributedMiniBatchParallelIO& from);
  void MergeFrom(const InputDistributedMiniBatchParallelIO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputDistributedMiniBatchParallelIO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_parallel_readers = 1;
  void clear_num_parallel_readers();
  static const int kNumParallelReadersFieldNumber = 1;
  ::google::protobuf::uint32 num_parallel_readers() const;
  void set_num_parallel_readers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.InputDistributedMiniBatchParallelIO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_parallel_readers_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static InputDistributedMiniBatchParallelIO* default_instance_;
};
// -------------------------------------------------------------------

class InputDistributedMiniBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.InputDistributedMiniBatch) */ {
 public:
  InputDistributedMiniBatch();
  virtual ~InputDistributedMiniBatch();

  InputDistributedMiniBatch(const InputDistributedMiniBatch& from);

  inline InputDistributedMiniBatch& operator=(const InputDistributedMiniBatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputDistributedMiniBatch& default_instance();

  void Swap(InputDistributedMiniBatch* other);

  // implements Message ----------------------------------------------

  inline InputDistributedMiniBatch* New() const { return New(NULL); }

  InputDistributedMiniBatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputDistributedMiniBatch& from);
  void MergeFrom(const InputDistributedMiniBatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputDistributedMiniBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.InputDistributedMiniBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static InputDistributedMiniBatch* default_instance_;
};
// -------------------------------------------------------------------

class FullyConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.FullyConnected) */ {
 public:
  FullyConnected();
  virtual ~FullyConnected();

  FullyConnected(const FullyConnected& from);

  inline FullyConnected& operator=(const FullyConnected& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullyConnected& default_instance();

  void Swap(FullyConnected* other);

  // implements Message ----------------------------------------------

  inline FullyConnected* New() const { return New(NULL); }

  FullyConnected* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullyConnected& from);
  void MergeFrom(const FullyConnected& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullyConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_prev_neurons = 1;
  void clear_num_prev_neurons();
  static const int kNumPrevNeuronsFieldNumber = 1;
  ::google::protobuf::uint32 num_prev_neurons() const;
  void set_num_prev_neurons(::google::protobuf::uint32 value);

  // optional uint32 num_neurons = 2;
  void clear_num_neurons();
  static const int kNumNeuronsFieldNumber = 2;
  ::google::protobuf::uint32 num_neurons() const;
  void set_num_neurons(::google::protobuf::uint32 value);

  // optional .lbann_data.WeightInitialization weight_initialization = 3;
  void clear_weight_initialization();
  static const int kWeightInitializationFieldNumber = 3;
  ::lbann_data::WeightInitialization weight_initialization() const;
  void set_weight_initialization(::lbann_data::WeightInitialization value);

  // optional .lbann_data.ActivationType activation_type = 4;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 4;
  ::lbann_data::ActivationType activation_type() const;
  void set_activation_type(::lbann_data::ActivationType value);

  // @@protoc_insertion_point(class_scope:lbann_data.FullyConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_prev_neurons_;
  ::google::protobuf::uint32 num_neurons_;
  int weight_initialization_;
  int activation_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static FullyConnected* default_instance_;
};
// -------------------------------------------------------------------

class Pooling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Pooling) */ {
 public:
  Pooling();
  virtual ~Pooling();

  Pooling(const Pooling& from);

  inline Pooling& operator=(const Pooling& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pooling& default_instance();

  void Swap(Pooling* other);

  // implements Message ----------------------------------------------

  inline Pooling* New() const { return New(NULL); }

  Pooling* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pooling& from);
  void MergeFrom(const Pooling& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pooling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_dims = 1;
  void clear_num_dims();
  static const int kNumDimsFieldNumber = 1;
  ::google::protobuf::int32 num_dims() const;
  void set_num_dims(::google::protobuf::int32 value);

  // optional int32 num_channels = 2;
  void clear_num_channels();
  static const int kNumChannelsFieldNumber = 2;
  ::google::protobuf::int32 num_channels() const;
  void set_num_channels(::google::protobuf::int32 value);

  // repeated int32 input_dims = 3;
  int input_dims_size() const;
  void clear_input_dims();
  static const int kInputDimsFieldNumber = 3;
  ::google::protobuf::int32 input_dims(int index) const;
  void set_input_dims(int index, ::google::protobuf::int32 value);
  void add_input_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dims();

  // repeated int32 pool_dims = 4;
  int pool_dims_size() const;
  void clear_pool_dims();
  static const int kPoolDimsFieldNumber = 4;
  ::google::protobuf::int32 pool_dims(int index) const;
  void set_pool_dims(int index, ::google::protobuf::int32 value);
  void add_pool_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pool_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pool_dims();

  // repeated int32 pool_pads = 5;
  int pool_pads_size() const;
  void clear_pool_pads();
  static const int kPoolPadsFieldNumber = 5;
  ::google::protobuf::int32 pool_pads(int index) const;
  void set_pool_pads(int index, ::google::protobuf::int32 value);
  void add_pool_pads(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pool_pads() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pool_pads();

  // repeated int32 pool_strides = 6;
  int pool_strides_size() const;
  void clear_pool_strides();
  static const int kPoolStridesFieldNumber = 6;
  ::google::protobuf::int32 pool_strides(int index) const;
  void set_pool_strides(int index, ::google::protobuf::int32 value);
  void add_pool_strides(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pool_strides() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pool_strides();

  // optional .lbann_data.PoolMode pool_mode = 7;
  void clear_pool_mode();
  static const int kPoolModeFieldNumber = 7;
  ::lbann_data::PoolMode pool_mode() const;
  void set_pool_mode(::lbann_data::PoolMode value);

  // optional .lbann_data.ActivationType activation_type = 8;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 8;
  ::lbann_data::ActivationType activation_type() const;
  void set_activation_type(::lbann_data::ActivationType value);

  // @@protoc_insertion_point(class_scope:lbann_data.Pooling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 num_dims_;
  ::google::protobuf::int32 num_channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dims_;
  mutable int _input_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pool_dims_;
  mutable int _pool_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pool_pads_;
  mutable int _pool_pads_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pool_strides_;
  mutable int _pool_strides_cached_byte_size_;
  int pool_mode_;
  int activation_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static Pooling* default_instance_;
};
// -------------------------------------------------------------------

class Convolution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Convolution) */ {
 public:
  Convolution();
  virtual ~Convolution();

  Convolution(const Convolution& from);

  inline Convolution& operator=(const Convolution& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Convolution& default_instance();

  void Swap(Convolution* other);

  // implements Message ----------------------------------------------

  inline Convolution* New() const { return New(NULL); }

  Convolution* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Convolution& from);
  void MergeFrom(const Convolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Convolution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_dims = 1;
  void clear_num_dims();
  static const int kNumDimsFieldNumber = 1;
  ::google::protobuf::uint32 num_dims() const;
  void set_num_dims(::google::protobuf::uint32 value);

  // optional uint32 num_input_channels = 2;
  void clear_num_input_channels();
  static const int kNumInputChannelsFieldNumber = 2;
  ::google::protobuf::uint32 num_input_channels() const;
  void set_num_input_channels(::google::protobuf::uint32 value);

  // repeated uint32 input_dims = 3;
  int input_dims_size() const;
  void clear_input_dims();
  static const int kInputDimsFieldNumber = 3;
  ::google::protobuf::uint32 input_dims(int index) const;
  void set_input_dims(int index, ::google::protobuf::uint32 value);
  void add_input_dims(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      input_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_input_dims();

  // optional uint32 num_output_channels = 4;
  void clear_num_output_channels();
  static const int kNumOutputChannelsFieldNumber = 4;
  ::google::protobuf::uint32 num_output_channels() const;
  void set_num_output_channels(::google::protobuf::uint32 value);

  // repeated uint32 filter_dims = 5;
  int filter_dims_size() const;
  void clear_filter_dims();
  static const int kFilterDimsFieldNumber = 5;
  ::google::protobuf::uint32 filter_dims(int index) const;
  void set_filter_dims(int index, ::google::protobuf::uint32 value);
  void add_filter_dims(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      filter_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_filter_dims();

  // repeated uint32 conv_pads = 6;
  int conv_pads_size() const;
  void clear_conv_pads();
  static const int kConvPadsFieldNumber = 6;
  ::google::protobuf::uint32 conv_pads(int index) const;
  void set_conv_pads(int index, ::google::protobuf::uint32 value);
  void add_conv_pads(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      conv_pads() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_conv_pads();

  // repeated uint32 conv_strides = 7;
  int conv_strides_size() const;
  void clear_conv_strides();
  static const int kConvStridesFieldNumber = 7;
  ::google::protobuf::uint32 conv_strides(int index) const;
  void set_conv_strides(int index, ::google::protobuf::uint32 value);
  void add_conv_strides(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      conv_strides() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_conv_strides();

  // optional uint32 mini_batch_size = 8;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 8;
  ::google::protobuf::uint32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::uint32 value);

  // optional .lbann_data.WeightInitialization weight_initialization = 9;
  void clear_weight_initialization();
  static const int kWeightInitializationFieldNumber = 9;
  ::lbann_data::WeightInitialization weight_initialization() const;
  void set_weight_initialization(::lbann_data::WeightInitialization value);

  // optional .lbann_data.ActivationType activation_type = 10;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 10;
  ::lbann_data::ActivationType activation_type() const;
  void set_activation_type(::lbann_data::ActivationType value);

  // @@protoc_insertion_point(class_scope:lbann_data.Convolution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_dims_;
  ::google::protobuf::uint32 num_input_channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > input_dims_;
  mutable int _input_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > filter_dims_;
  mutable int _filter_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > conv_pads_;
  mutable int _conv_pads_cached_byte_size_;
  ::google::protobuf::uint32 num_output_channels_;
  ::google::protobuf::uint32 mini_batch_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > conv_strides_;
  mutable int _conv_strides_cached_byte_size_;
  int weight_initialization_;
  int activation_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static Convolution* default_instance_;
};
// -------------------------------------------------------------------

class Softmax : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Softmax) */ {
 public:
  Softmax();
  virtual ~Softmax();

  Softmax(const Softmax& from);

  inline Softmax& operator=(const Softmax& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Softmax& default_instance();

  void Swap(Softmax* other);

  // implements Message ----------------------------------------------

  inline Softmax* New() const { return New(NULL); }

  Softmax* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Softmax& from);
  void MergeFrom(const Softmax& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Softmax* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_prev_neurons = 1;
  void clear_num_prev_neurons();
  static const int kNumPrevNeuronsFieldNumber = 1;
  ::google::protobuf::uint32 num_prev_neurons() const;
  void set_num_prev_neurons(::google::protobuf::uint32 value);

  // optional uint32 num_neurons = 2;
  void clear_num_neurons();
  static const int kNumNeuronsFieldNumber = 2;
  ::google::protobuf::uint32 num_neurons() const;
  void set_num_neurons(::google::protobuf::uint32 value);

  // optional .lbann_data.WeightInitialization weight_initialization = 3;
  void clear_weight_initialization();
  static const int kWeightInitializationFieldNumber = 3;
  ::lbann_data::WeightInitialization weight_initialization() const;
  void set_weight_initialization(::lbann_data::WeightInitialization value);

  // @@protoc_insertion_point(class_scope:lbann_data.Softmax)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 num_prev_neurons_;
  ::google::protobuf::uint32 num_neurons_;
  int weight_initialization_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static Softmax* default_instance_;
};
// -------------------------------------------------------------------

class Target : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Target& default_instance();

  void Swap(Target* other);

  // implements Message ----------------------------------------------

  inline Target* New() const { return New(NULL); }

  Target* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Target* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.Target)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static Target* default_instance_;
};
// -------------------------------------------------------------------

class TargetParallel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.TargetParallel) */ {
 public:
  TargetParallel();
  virtual ~TargetParallel();

  TargetParallel(const TargetParallel& from);

  inline TargetParallel& operator=(const TargetParallel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetParallel& default_instance();

  void Swap(TargetParallel* other);

  // implements Message ----------------------------------------------

  inline TargetParallel* New() const { return New(NULL); }

  TargetParallel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetParallel& from);
  void MergeFrom(const TargetParallel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetParallel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.TargetParallel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static TargetParallel* default_instance_;
};
// -------------------------------------------------------------------

class TargetDistributedMinibatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.TargetDistributedMinibatch) */ {
 public:
  TargetDistributedMinibatch();
  virtual ~TargetDistributedMinibatch();

  TargetDistributedMinibatch(const TargetDistributedMinibatch& from);

  inline TargetDistributedMinibatch& operator=(const TargetDistributedMinibatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetDistributedMinibatch& default_instance();

  void Swap(TargetDistributedMinibatch* other);

  // implements Message ----------------------------------------------

  inline TargetDistributedMinibatch* New() const { return New(NULL); }

  TargetDistributedMinibatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetDistributedMinibatch& from);
  void MergeFrom(const TargetDistributedMinibatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetDistributedMinibatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.TargetDistributedMinibatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static TargetDistributedMinibatch* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LbannPB

// optional .lbann_data.Model train_net = 1;
inline bool LbannPB::has_train_net() const {
  return !_is_default_instance_ && train_net_ != NULL;
}
inline void LbannPB::clear_train_net() {
  if (GetArenaNoVirtual() == NULL && train_net_ != NULL) delete train_net_;
  train_net_ = NULL;
}
inline const ::lbann_data::Model& LbannPB::train_net() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.train_net)
  return train_net_ != NULL ? *train_net_ : *default_instance_->train_net_;
}
inline ::lbann_data::Model* LbannPB::mutable_train_net() {
  
  if (train_net_ == NULL) {
    train_net_ = new ::lbann_data::Model;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.train_net)
  return train_net_;
}
inline ::lbann_data::Model* LbannPB::release_train_net() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.train_net)
  
  ::lbann_data::Model* temp = train_net_;
  train_net_ = NULL;
  return temp;
}
inline void LbannPB::set_allocated_train_net(::lbann_data::Model* train_net) {
  delete train_net_;
  train_net_ = train_net;
  if (train_net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.train_net)
}

// optional string optimizer = 10;
inline void LbannPB::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LbannPB::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.optimizer)
  return optimizer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LbannPB::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.optimizer)
}
inline void LbannPB::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.optimizer)
}
inline void LbannPB::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.optimizer)
}
inline ::std::string* LbannPB::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LbannPB::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LbannPB::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.optimizer)
}

// optional string objective_fn = 11;
inline void LbannPB::clear_objective_fn() {
  objective_fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LbannPB::objective_fn() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.objective_fn)
  return objective_fn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LbannPB::set_objective_fn(const ::std::string& value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.objective_fn)
}
inline void LbannPB::set_objective_fn(const char* value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.objective_fn)
}
inline void LbannPB::set_objective_fn(const char* value, size_t size) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.objective_fn)
}
inline ::std::string* LbannPB::mutable_objective_fn() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.objective_fn)
  return objective_fn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LbannPB::release_objective_fn() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.objective_fn)
  
  return objective_fn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LbannPB::set_allocated_objective_fn(::std::string* objective_fn) {
  if (objective_fn != NULL) {
    
  } else {
    
  }
  objective_fn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objective_fn);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.objective_fn)
}

// optional uint32 mini_batch_size = 12;
inline void LbannPB::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
}
inline ::google::protobuf::uint32 LbannPB::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.mini_batch_size)
  return mini_batch_size_;
}
inline void LbannPB::set_mini_batch_size(::google::protobuf::uint32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.mini_batch_size)
}

// -------------------------------------------------------------------

// Model

// optional string name = 1;
inline void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.name)
}
inline void Model::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.name)
}
inline void Model::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.name)
}
inline ::std::string* Model::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.name)
}

// repeated .lbann_data.Layer layer = 2;
inline int Model::layer_size() const {
  return layer_.size();
}
inline void Model::clear_layer() {
  layer_.Clear();
}
inline const ::lbann_data::Layer& Model::layer(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.layer)
  return layer_.Get(index);
}
inline ::lbann_data::Layer* Model::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.layer)
  return layer_.Mutable(index);
}
inline ::lbann_data::Layer* Model::add_layer() {
  // @@protoc_insertion_point(field_add:lbann_data.Model.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >*
Model::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >&
Model::layer() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.layer)
  return layer_;
}

// repeated string callback = 3;
inline int Model::callback_size() const {
  return callback_.size();
}
inline void Model::clear_callback() {
  callback_.Clear();
}
inline const ::std::string& Model::callback(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.callback)
  return callback_.Get(index);
}
inline ::std::string* Model::mutable_callback(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.callback)
  return callback_.Mutable(index);
}
inline void Model::set_callback(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.Model.callback)
  callback_.Mutable(index)->assign(value);
}
inline void Model::set_callback(int index, const char* value) {
  callback_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.callback)
}
inline void Model::set_callback(int index, const char* value, size_t size) {
  callback_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.callback)
}
inline ::std::string* Model::add_callback() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.Model.callback)
  return callback_.Add();
}
inline void Model::add_callback(const ::std::string& value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.Model.callback)
}
inline void Model::add_callback(const char* value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.Model.callback)
}
inline void Model::add_callback(const char* value, size_t size) {
  callback_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.Model.callback)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::callback() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.callback)
  return callback_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_callback() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.callback)
  return &callback_;
}

// -------------------------------------------------------------------

// Layer

// optional uint32 index = 2;
inline void Layer::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 Layer::index() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.index)
  return index_;
}
inline void Layer::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Layer.index)
}

// optional .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
inline bool Layer::has_input_distributed_minibatch_parallel_io() const {
  return !_is_default_instance_ && input_distributed_minibatch_parallel_io_ != NULL;
}
inline void Layer::clear_input_distributed_minibatch_parallel_io() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_parallel_io_ != NULL) delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
}
inline const ::lbann_data::InputDistributedMiniBatchParallelIO& Layer::input_distributed_minibatch_parallel_io() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_ != NULL ? *input_distributed_minibatch_parallel_io_ : *default_instance_->input_distributed_minibatch_parallel_io_;
}
inline ::lbann_data::InputDistributedMiniBatchParallelIO* Layer::mutable_input_distributed_minibatch_parallel_io() {
  
  if (input_distributed_minibatch_parallel_io_ == NULL) {
    input_distributed_minibatch_parallel_io_ = new ::lbann_data::InputDistributedMiniBatchParallelIO;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_;
}
inline ::lbann_data::InputDistributedMiniBatchParallelIO* Layer::release_input_distributed_minibatch_parallel_io() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  
  ::lbann_data::InputDistributedMiniBatchParallelIO* temp = input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
  return temp;
}
inline void Layer::set_allocated_input_distributed_minibatch_parallel_io(::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io) {
  delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = input_distributed_minibatch_parallel_io;
  if (input_distributed_minibatch_parallel_io) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch_parallel_io)
}

// optional .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
inline bool Layer::has_input_distributed_minibatch() const {
  return !_is_default_instance_ && input_distributed_minibatch_ != NULL;
}
inline void Layer::clear_input_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_ != NULL) delete input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
}
inline const ::lbann_data::InputDistributedMiniBatch& Layer::input_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_ != NULL ? *input_distributed_minibatch_ : *default_instance_->input_distributed_minibatch_;
}
inline ::lbann_data::InputDistributedMiniBatch* Layer::mutable_input_distributed_minibatch() {
  
  if (input_distributed_minibatch_ == NULL) {
    input_distributed_minibatch_ = new ::lbann_data::InputDistributedMiniBatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_;
}
inline ::lbann_data::InputDistributedMiniBatch* Layer::release_input_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch)
  
  ::lbann_data::InputDistributedMiniBatch* temp = input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
  return temp;
}
inline void Layer::set_allocated_input_distributed_minibatch(::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch) {
  delete input_distributed_minibatch_;
  input_distributed_minibatch_ = input_distributed_minibatch;
  if (input_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch)
}

// optional .lbann_data.Input input = 10;
inline bool Layer::has_input() const {
  return !_is_default_instance_ && input_ != NULL;
}
inline void Layer::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
inline const ::lbann_data::Input& Layer::input() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input)
  return input_ != NULL ? *input_ : *default_instance_->input_;
}
inline ::lbann_data::Input* Layer::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::lbann_data::Input;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input)
  return input_;
}
inline ::lbann_data::Input* Layer::release_input() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input)
  
  ::lbann_data::Input* temp = input_;
  input_ = NULL;
  return temp;
}
inline void Layer::set_allocated_input(::lbann_data::Input* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input)
}

// optional .lbann_data.FullyConnected fully_connected = 11;
inline bool Layer::has_fully_connected() const {
  return !_is_default_instance_ && fully_connected_ != NULL;
}
inline void Layer::clear_fully_connected() {
  if (GetArenaNoVirtual() == NULL && fully_connected_ != NULL) delete fully_connected_;
  fully_connected_ = NULL;
}
inline const ::lbann_data::FullyConnected& Layer::fully_connected() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.fully_connected)
  return fully_connected_ != NULL ? *fully_connected_ : *default_instance_->fully_connected_;
}
inline ::lbann_data::FullyConnected* Layer::mutable_fully_connected() {
  
  if (fully_connected_ == NULL) {
    fully_connected_ = new ::lbann_data::FullyConnected;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.fully_connected)
  return fully_connected_;
}
inline ::lbann_data::FullyConnected* Layer::release_fully_connected() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.fully_connected)
  
  ::lbann_data::FullyConnected* temp = fully_connected_;
  fully_connected_ = NULL;
  return temp;
}
inline void Layer::set_allocated_fully_connected(::lbann_data::FullyConnected* fully_connected) {
  delete fully_connected_;
  fully_connected_ = fully_connected;
  if (fully_connected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.fully_connected)
}

// optional .lbann_data.Pooling pooling = 12;
inline bool Layer::has_pooling() const {
  return !_is_default_instance_ && pooling_ != NULL;
}
inline void Layer::clear_pooling() {
  if (GetArenaNoVirtual() == NULL && pooling_ != NULL) delete pooling_;
  pooling_ = NULL;
}
inline const ::lbann_data::Pooling& Layer::pooling() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.pooling)
  return pooling_ != NULL ? *pooling_ : *default_instance_->pooling_;
}
inline ::lbann_data::Pooling* Layer::mutable_pooling() {
  
  if (pooling_ == NULL) {
    pooling_ = new ::lbann_data::Pooling;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.pooling)
  return pooling_;
}
inline ::lbann_data::Pooling* Layer::release_pooling() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.pooling)
  
  ::lbann_data::Pooling* temp = pooling_;
  pooling_ = NULL;
  return temp;
}
inline void Layer::set_allocated_pooling(::lbann_data::Pooling* pooling) {
  delete pooling_;
  pooling_ = pooling;
  if (pooling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.pooling)
}

// optional .lbann_data.Convolution convolution = 13;
inline bool Layer::has_convolution() const {
  return !_is_default_instance_ && convolution_ != NULL;
}
inline void Layer::clear_convolution() {
  if (GetArenaNoVirtual() == NULL && convolution_ != NULL) delete convolution_;
  convolution_ = NULL;
}
inline const ::lbann_data::Convolution& Layer::convolution() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.convolution)
  return convolution_ != NULL ? *convolution_ : *default_instance_->convolution_;
}
inline ::lbann_data::Convolution* Layer::mutable_convolution() {
  
  if (convolution_ == NULL) {
    convolution_ = new ::lbann_data::Convolution;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.convolution)
  return convolution_;
}
inline ::lbann_data::Convolution* Layer::release_convolution() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.convolution)
  
  ::lbann_data::Convolution* temp = convolution_;
  convolution_ = NULL;
  return temp;
}
inline void Layer::set_allocated_convolution(::lbann_data::Convolution* convolution) {
  delete convolution_;
  convolution_ = convolution;
  if (convolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.convolution)
}

// optional .lbann_data.Softmax softmax = 14;
inline bool Layer::has_softmax() const {
  return !_is_default_instance_ && softmax_ != NULL;
}
inline void Layer::clear_softmax() {
  if (GetArenaNoVirtual() == NULL && softmax_ != NULL) delete softmax_;
  softmax_ = NULL;
}
inline const ::lbann_data::Softmax& Layer::softmax() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.softmax)
  return softmax_ != NULL ? *softmax_ : *default_instance_->softmax_;
}
inline ::lbann_data::Softmax* Layer::mutable_softmax() {
  
  if (softmax_ == NULL) {
    softmax_ = new ::lbann_data::Softmax;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.softmax)
  return softmax_;
}
inline ::lbann_data::Softmax* Layer::release_softmax() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.softmax)
  
  ::lbann_data::Softmax* temp = softmax_;
  softmax_ = NULL;
  return temp;
}
inline void Layer::set_allocated_softmax(::lbann_data::Softmax* softmax) {
  delete softmax_;
  softmax_ = softmax;
  if (softmax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.softmax)
}

// optional .lbann_data.Target target = 15;
inline bool Layer::has_target() const {
  return !_is_default_instance_ && target_ != NULL;
}
inline void Layer::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
inline const ::lbann_data::Target& Layer::target() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::lbann_data::Target* Layer::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::lbann_data::Target;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target)
  return target_;
}
inline ::lbann_data::Target* Layer::release_target() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target)
  
  ::lbann_data::Target* temp = target_;
  target_ = NULL;
  return temp;
}
inline void Layer::set_allocated_target(::lbann_data::Target* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target)
}

// optional .lbann_data.TargetParallel target_parallel = 16;
inline bool Layer::has_target_parallel() const {
  return !_is_default_instance_ && target_parallel_ != NULL;
}
inline void Layer::clear_target_parallel() {
  if (GetArenaNoVirtual() == NULL && target_parallel_ != NULL) delete target_parallel_;
  target_parallel_ = NULL;
}
inline const ::lbann_data::TargetParallel& Layer::target_parallel() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_parallel)
  return target_parallel_ != NULL ? *target_parallel_ : *default_instance_->target_parallel_;
}
inline ::lbann_data::TargetParallel* Layer::mutable_target_parallel() {
  
  if (target_parallel_ == NULL) {
    target_parallel_ = new ::lbann_data::TargetParallel;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_parallel)
  return target_parallel_;
}
inline ::lbann_data::TargetParallel* Layer::release_target_parallel() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_parallel)
  
  ::lbann_data::TargetParallel* temp = target_parallel_;
  target_parallel_ = NULL;
  return temp;
}
inline void Layer::set_allocated_target_parallel(::lbann_data::TargetParallel* target_parallel) {
  delete target_parallel_;
  target_parallel_ = target_parallel;
  if (target_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_parallel)
}

// optional .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
inline bool Layer::has_target_distributed_minibatch() const {
  return !_is_default_instance_ && target_distributed_minibatch_ != NULL;
}
inline void Layer::clear_target_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_ != NULL) delete target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
}
inline const ::lbann_data::TargetDistributedMinibatch& Layer::target_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_ != NULL ? *target_distributed_minibatch_ : *default_instance_->target_distributed_minibatch_;
}
inline ::lbann_data::TargetDistributedMinibatch* Layer::mutable_target_distributed_minibatch() {
  
  if (target_distributed_minibatch_ == NULL) {
    target_distributed_minibatch_ = new ::lbann_data::TargetDistributedMinibatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_;
}
inline ::lbann_data::TargetDistributedMinibatch* Layer::release_target_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_distributed_minibatch)
  
  ::lbann_data::TargetDistributedMinibatch* temp = target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
  return temp;
}
inline void Layer::set_allocated_target_distributed_minibatch(::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch) {
  delete target_distributed_minibatch_;
  target_distributed_minibatch_ = target_distributed_minibatch;
  if (target_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_distributed_minibatch)
}

// -------------------------------------------------------------------

// Input

// optional int32 mini_batch_size = 1;
inline void Input::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 Input::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Input.mini_batch_size)
  return mini_batch_size_;
}
inline void Input::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Input.mini_batch_size)
}

// -------------------------------------------------------------------

// InputDistributedMiniBatchParallelIO

// optional uint32 num_parallel_readers = 1;
inline void InputDistributedMiniBatchParallelIO::clear_num_parallel_readers() {
  num_parallel_readers_ = 0u;
}
inline ::google::protobuf::uint32 InputDistributedMiniBatchParallelIO::num_parallel_readers() const {
  // @@protoc_insertion_point(field_get:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
  return num_parallel_readers_;
}
inline void InputDistributedMiniBatchParallelIO::set_num_parallel_readers(::google::protobuf::uint32 value) {
  
  num_parallel_readers_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
}

// -------------------------------------------------------------------

// InputDistributedMiniBatch

// -------------------------------------------------------------------

// FullyConnected

// optional uint32 num_prev_neurons = 1;
inline void FullyConnected::clear_num_prev_neurons() {
  num_prev_neurons_ = 0u;
}
inline ::google::protobuf::uint32 FullyConnected::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_prev_neurons)
  return num_prev_neurons_;
}
inline void FullyConnected::set_num_prev_neurons(::google::protobuf::uint32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_prev_neurons)
}

// optional uint32 num_neurons = 2;
inline void FullyConnected::clear_num_neurons() {
  num_neurons_ = 0u;
}
inline ::google::protobuf::uint32 FullyConnected::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_neurons)
  return num_neurons_;
}
inline void FullyConnected::set_num_neurons(::google::protobuf::uint32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_neurons)
}

// optional .lbann_data.WeightInitialization weight_initialization = 3;
inline void FullyConnected::clear_weight_initialization() {
  weight_initialization_ = 0;
}
inline ::lbann_data::WeightInitialization FullyConnected::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.weight_initialization)
  return static_cast< ::lbann_data::WeightInitialization >(weight_initialization_);
}
inline void FullyConnected::set_weight_initialization(::lbann_data::WeightInitialization value) {
  
  weight_initialization_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.weight_initialization)
}

// optional .lbann_data.ActivationType activation_type = 4;
inline void FullyConnected::clear_activation_type() {
  activation_type_ = 0;
}
inline ::lbann_data::ActivationType FullyConnected::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.activation_type)
  return static_cast< ::lbann_data::ActivationType >(activation_type_);
}
inline void FullyConnected::set_activation_type(::lbann_data::ActivationType value) {
  
  activation_type_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.activation_type)
}

// -------------------------------------------------------------------

// Pooling

// optional int32 num_dims = 1;
inline void Pooling::clear_num_dims() {
  num_dims_ = 0;
}
inline ::google::protobuf::int32 Pooling::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_dims)
  return num_dims_;
}
inline void Pooling::set_num_dims(::google::protobuf::int32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_dims)
}

// optional int32 num_channels = 2;
inline void Pooling::clear_num_channels() {
  num_channels_ = 0;
}
inline ::google::protobuf::int32 Pooling::num_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_channels)
  return num_channels_;
}
inline void Pooling::set_num_channels(::google::protobuf::int32 value) {
  
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_channels)
}

// repeated int32 input_dims = 3;
inline int Pooling::input_dims_size() const {
  return input_dims_.size();
}
inline void Pooling::clear_input_dims() {
  input_dims_.Clear();
}
inline ::google::protobuf::int32 Pooling::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.input_dims)
  return input_dims_.Get(index);
}
inline void Pooling::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.input_dims)
}
inline void Pooling::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.input_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.input_dims)
  return input_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.input_dims)
  return &input_dims_;
}

// repeated int32 pool_dims = 4;
inline int Pooling::pool_dims_size() const {
  return pool_dims_.size();
}
inline void Pooling::clear_pool_dims() {
  pool_dims_.Clear();
}
inline ::google::protobuf::int32 Pooling::pool_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_dims)
  return pool_dims_.Get(index);
}
inline void Pooling::set_pool_dims(int index, ::google::protobuf::int32 value) {
  pool_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_dims)
}
inline void Pooling::add_pool_dims(::google::protobuf::int32 value) {
  pool_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_dims)
  return pool_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_dims)
  return &pool_dims_;
}

// repeated int32 pool_pads = 5;
inline int Pooling::pool_pads_size() const {
  return pool_pads_.size();
}
inline void Pooling::clear_pool_pads() {
  pool_pads_.Clear();
}
inline ::google::protobuf::int32 Pooling::pool_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_pads)
  return pool_pads_.Get(index);
}
inline void Pooling::set_pool_pads(int index, ::google::protobuf::int32 value) {
  pool_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_pads)
}
inline void Pooling::add_pool_pads(::google::protobuf::int32 value) {
  pool_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_pads)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_pads)
  return pool_pads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_pads)
  return &pool_pads_;
}

// repeated int32 pool_strides = 6;
inline int Pooling::pool_strides_size() const {
  return pool_strides_.size();
}
inline void Pooling::clear_pool_strides() {
  pool_strides_.Clear();
}
inline ::google::protobuf::int32 Pooling::pool_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_strides)
  return pool_strides_.Get(index);
}
inline void Pooling::set_pool_strides(int index, ::google::protobuf::int32 value) {
  pool_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_strides)
}
inline void Pooling::add_pool_strides(::google::protobuf::int32 value) {
  pool_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_strides)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_strides)
  return pool_strides_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_strides)
  return &pool_strides_;
}

// optional .lbann_data.PoolMode pool_mode = 7;
inline void Pooling::clear_pool_mode() {
  pool_mode_ = 0;
}
inline ::lbann_data::PoolMode Pooling::pool_mode() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_mode)
  return static_cast< ::lbann_data::PoolMode >(pool_mode_);
}
inline void Pooling::set_pool_mode(::lbann_data::PoolMode value) {
  
  pool_mode_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_mode)
}

// optional .lbann_data.ActivationType activation_type = 8;
inline void Pooling::clear_activation_type() {
  activation_type_ = 0;
}
inline ::lbann_data::ActivationType Pooling::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.activation_type)
  return static_cast< ::lbann_data::ActivationType >(activation_type_);
}
inline void Pooling::set_activation_type(::lbann_data::ActivationType value) {
  
  activation_type_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.activation_type)
}

// -------------------------------------------------------------------

// Convolution

// optional uint32 num_dims = 1;
inline void Convolution::clear_num_dims() {
  num_dims_ = 0u;
}
inline ::google::protobuf::uint32 Convolution::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_dims)
  return num_dims_;
}
inline void Convolution::set_num_dims(::google::protobuf::uint32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_dims)
}

// optional uint32 num_input_channels = 2;
inline void Convolution::clear_num_input_channels() {
  num_input_channels_ = 0u;
}
inline ::google::protobuf::uint32 Convolution::num_input_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_input_channels)
  return num_input_channels_;
}
inline void Convolution::set_num_input_channels(::google::protobuf::uint32 value) {
  
  num_input_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_input_channels)
}

// repeated uint32 input_dims = 3;
inline int Convolution::input_dims_size() const {
  return input_dims_.size();
}
inline void Convolution::clear_input_dims() {
  input_dims_.Clear();
}
inline ::google::protobuf::uint32 Convolution::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.input_dims)
  return input_dims_.Get(index);
}
inline void Convolution::set_input_dims(int index, ::google::protobuf::uint32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.input_dims)
}
inline void Convolution::add_input_dims(::google::protobuf::uint32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.input_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.input_dims)
  return input_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.input_dims)
  return &input_dims_;
}

// optional uint32 num_output_channels = 4;
inline void Convolution::clear_num_output_channels() {
  num_output_channels_ = 0u;
}
inline ::google::protobuf::uint32 Convolution::num_output_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_output_channels)
  return num_output_channels_;
}
inline void Convolution::set_num_output_channels(::google::protobuf::uint32 value) {
  
  num_output_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_output_channels)
}

// repeated uint32 filter_dims = 5;
inline int Convolution::filter_dims_size() const {
  return filter_dims_.size();
}
inline void Convolution::clear_filter_dims() {
  filter_dims_.Clear();
}
inline ::google::protobuf::uint32 Convolution::filter_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.filter_dims)
  return filter_dims_.Get(index);
}
inline void Convolution::set_filter_dims(int index, ::google::protobuf::uint32 value) {
  filter_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.filter_dims)
}
inline void Convolution::add_filter_dims(::google::protobuf::uint32 value) {
  filter_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.filter_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::filter_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.filter_dims)
  return filter_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_filter_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.filter_dims)
  return &filter_dims_;
}

// repeated uint32 conv_pads = 6;
inline int Convolution::conv_pads_size() const {
  return conv_pads_.size();
}
inline void Convolution::clear_conv_pads() {
  conv_pads_.Clear();
}
inline ::google::protobuf::uint32 Convolution::conv_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_pads)
  return conv_pads_.Get(index);
}
inline void Convolution::set_conv_pads(int index, ::google::protobuf::uint32 value) {
  conv_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_pads)
}
inline void Convolution::add_conv_pads(::google::protobuf::uint32 value) {
  conv_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_pads)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::conv_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_pads)
  return conv_pads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_conv_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_pads)
  return &conv_pads_;
}

// repeated uint32 conv_strides = 7;
inline int Convolution::conv_strides_size() const {
  return conv_strides_.size();
}
inline void Convolution::clear_conv_strides() {
  conv_strides_.Clear();
}
inline ::google::protobuf::uint32 Convolution::conv_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_strides)
  return conv_strides_.Get(index);
}
inline void Convolution::set_conv_strides(int index, ::google::protobuf::uint32 value) {
  conv_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_strides)
}
inline void Convolution::add_conv_strides(::google::protobuf::uint32 value) {
  conv_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_strides)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Convolution::conv_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_strides)
  return conv_strides_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Convolution::mutable_conv_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_strides)
  return &conv_strides_;
}

// optional uint32 mini_batch_size = 8;
inline void Convolution::clear_mini_batch_size() {
  mini_batch_size_ = 0u;
}
inline ::google::protobuf::uint32 Convolution::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.mini_batch_size)
  return mini_batch_size_;
}
inline void Convolution::set_mini_batch_size(::google::protobuf::uint32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.mini_batch_size)
}

// optional .lbann_data.WeightInitialization weight_initialization = 9;
inline void Convolution::clear_weight_initialization() {
  weight_initialization_ = 0;
}
inline ::lbann_data::WeightInitialization Convolution::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.weight_initialization)
  return static_cast< ::lbann_data::WeightInitialization >(weight_initialization_);
}
inline void Convolution::set_weight_initialization(::lbann_data::WeightInitialization value) {
  
  weight_initialization_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.weight_initialization)
}

// optional .lbann_data.ActivationType activation_type = 10;
inline void Convolution::clear_activation_type() {
  activation_type_ = 0;
}
inline ::lbann_data::ActivationType Convolution::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.activation_type)
  return static_cast< ::lbann_data::ActivationType >(activation_type_);
}
inline void Convolution::set_activation_type(::lbann_data::ActivationType value) {
  
  activation_type_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.activation_type)
}

// -------------------------------------------------------------------

// Softmax

// optional uint32 num_prev_neurons = 1;
inline void Softmax::clear_num_prev_neurons() {
  num_prev_neurons_ = 0u;
}
inline ::google::protobuf::uint32 Softmax::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_prev_neurons)
  return num_prev_neurons_;
}
inline void Softmax::set_num_prev_neurons(::google::protobuf::uint32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_prev_neurons)
}

// optional uint32 num_neurons = 2;
inline void Softmax::clear_num_neurons() {
  num_neurons_ = 0u;
}
inline ::google::protobuf::uint32 Softmax::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_neurons)
  return num_neurons_;
}
inline void Softmax::set_num_neurons(::google::protobuf::uint32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_neurons)
}

// optional .lbann_data.WeightInitialization weight_initialization = 3;
inline void Softmax::clear_weight_initialization() {
  weight_initialization_ = 0;
}
inline ::lbann_data::WeightInitialization Softmax::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.weight_initialization)
  return static_cast< ::lbann_data::WeightInitialization >(weight_initialization_);
}
inline void Softmax::set_weight_initialization(::lbann_data::WeightInitialization value) {
  
  weight_initialization_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.weight_initialization)
}

// -------------------------------------------------------------------

// Target

// -------------------------------------------------------------------

// TargetParallel

// -------------------------------------------------------------------

// TargetDistributedMinibatch

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lbann_data

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::lbann_data::WeightInitialization> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lbann_data::WeightInitialization>() {
  return ::lbann_data::WeightInitialization_descriptor();
}
template <> struct is_proto_enum< ::lbann_data::ActivationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lbann_data::ActivationType>() {
  return ::lbann_data::ActivationType_descriptor();
}
template <> struct is_proto_enum< ::lbann_data::PoolMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lbann_data::PoolMode>() {
  return ::lbann_data::PoolMode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lbann_2eproto__INCLUDED
