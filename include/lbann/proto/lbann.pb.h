// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbann.proto

#ifndef PROTOBUF_lbann_2eproto__INCLUDED
#define PROTOBUF_lbann_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lbann {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_lbann_2eproto();
void protobuf_AssignDesc_lbann_2eproto();
void protobuf_ShutdownFile_lbann_2eproto();

class ConvolutionParameter;
class FullyConnectedParameter;
class InputParameter;
class LayerParameter;
class LbannModel;
class NetParameter;
class PoolingParameter;
class SoftmaxParameter;
class TargetParallelParameter;
class TargetParameter;

// ===================================================================

class LbannModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.LbannModel) */ {
 public:
  LbannModel();
  virtual ~LbannModel();

  LbannModel(const LbannModel& from);

  inline LbannModel& operator=(const LbannModel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LbannModel& default_instance();

  void Swap(LbannModel* other);

  // implements Message ----------------------------------------------

  inline LbannModel* New() const { return New(NULL); }

  LbannModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LbannModel& from);
  void MergeFrom(const LbannModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LbannModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lbann.NetParameter train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::lbann::NetParameter& train_net() const;
  ::lbann::NetParameter* mutable_train_net();
  ::lbann::NetParameter* release_train_net();
  void set_allocated_train_net(::lbann::NetParameter* train_net);

  // @@protoc_insertion_point(class_scope:lbann.LbannModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::lbann::NetParameter* train_net_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static LbannModel* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  inline NetParameter* New() const { return New(NULL); }

  NetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lbann.LayerParameter layer = 1;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  const ::lbann::LayerParameter& layer(int index) const;
  ::lbann::LayerParameter* mutable_layer(int index);
  ::lbann::LayerParameter* add_layer();
  ::google::protobuf::RepeatedPtrField< ::lbann::LayerParameter >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::lbann::LayerParameter >&
      layer() const;

  // @@protoc_insertion_point(class_scope:lbann.NetParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::lbann::LayerParameter > layer_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .lbann.InputParameter input_param = 2;
  bool has_input_param() const;
  void clear_input_param();
  static const int kInputParamFieldNumber = 2;
  const ::lbann::InputParameter& input_param() const;
  ::lbann::InputParameter* mutable_input_param();
  ::lbann::InputParameter* release_input_param();
  void set_allocated_input_param(::lbann::InputParameter* input_param);

  // optional .lbann.FullyConnectedParameter fully_connected_param = 3;
  bool has_fully_connected_param() const;
  void clear_fully_connected_param();
  static const int kFullyConnectedParamFieldNumber = 3;
  const ::lbann::FullyConnectedParameter& fully_connected_param() const;
  ::lbann::FullyConnectedParameter* mutable_fully_connected_param();
  ::lbann::FullyConnectedParameter* release_fully_connected_param();
  void set_allocated_fully_connected_param(::lbann::FullyConnectedParameter* fully_connected_param);

  // optional .lbann.PoolingParameter pooling_param = 4;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 4;
  const ::lbann::PoolingParameter& pooling_param() const;
  ::lbann::PoolingParameter* mutable_pooling_param();
  ::lbann::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::lbann::PoolingParameter* pooling_param);

  // optional .lbann.ConvolutionParameter convolution_param = 5;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 5;
  const ::lbann::ConvolutionParameter& convolution_param() const;
  ::lbann::ConvolutionParameter* mutable_convolution_param();
  ::lbann::ConvolutionParameter* release_convolution_param();
  void set_allocated_convolution_param(::lbann::ConvolutionParameter* convolution_param);

  // optional .lbann.SoftmaxParameter softmax_param = 6;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 6;
  const ::lbann::SoftmaxParameter& softmax_param() const;
  ::lbann::SoftmaxParameter* mutable_softmax_param();
  ::lbann::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::lbann::SoftmaxParameter* softmax_param);

  // optional .lbann.TargetParameter target_param = 7;
  bool has_target_param() const;
  void clear_target_param();
  static const int kTargetParamFieldNumber = 7;
  const ::lbann::TargetParameter& target_param() const;
  ::lbann::TargetParameter* mutable_target_param();
  ::lbann::TargetParameter* release_target_param();
  void set_allocated_target_param(::lbann::TargetParameter* target_param);

  // optional .lbann.TargetParallelParameter target_parallel_param = 8;
  bool has_target_parallel_param() const;
  void clear_target_parallel_param();
  static const int kTargetParallelParamFieldNumber = 8;
  const ::lbann::TargetParallelParameter& target_parallel_param() const;
  ::lbann::TargetParallelParameter* mutable_target_parallel_param();
  ::lbann::TargetParallelParameter* release_target_parallel_param();
  void set_allocated_target_parallel_param(::lbann::TargetParallelParameter* target_parallel_param);

  // @@protoc_insertion_point(class_scope:lbann.LayerParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::lbann::InputParameter* input_param_;
  ::lbann::FullyConnectedParameter* fully_connected_param_;
  ::lbann::PoolingParameter* pooling_param_;
  ::lbann::ConvolutionParameter* convolution_param_;
  ::lbann::SoftmaxParameter* softmax_param_;
  ::lbann::TargetParameter* target_param_;
  ::lbann::TargetParallelParameter* target_parallel_param_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.InputParameter) */ {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  void Swap(InputParameter* other);

  // implements Message ----------------------------------------------

  inline InputParameter* New() const { return New(NULL); }

  InputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann.InputParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static InputParameter* default_instance_;
};
// -------------------------------------------------------------------

class FullyConnectedParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.FullyConnectedParameter) */ {
 public:
  FullyConnectedParameter();
  virtual ~FullyConnectedParameter();

  FullyConnectedParameter(const FullyConnectedParameter& from);

  inline FullyConnectedParameter& operator=(const FullyConnectedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullyConnectedParameter& default_instance();

  void Swap(FullyConnectedParameter* other);

  // implements Message ----------------------------------------------

  inline FullyConnectedParameter* New() const { return New(NULL); }

  FullyConnectedParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FullyConnectedParameter& from);
  void MergeFrom(const FullyConnectedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FullyConnectedParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann.FullyConnectedParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static FullyConnectedParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const { return New(NULL); }

  PoolingParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann.PoolingParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const { return New(NULL); }

  ConvolutionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConvolutionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann.ConvolutionParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.SoftmaxParameter) */ {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const { return New(NULL); }

  SoftmaxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftmaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann.SoftmaxParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TargetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.TargetParameter) */ {
 public:
  TargetParameter();
  virtual ~TargetParameter();

  TargetParameter(const TargetParameter& from);

  inline TargetParameter& operator=(const TargetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetParameter& default_instance();

  void Swap(TargetParameter* other);

  // implements Message ----------------------------------------------

  inline TargetParameter* New() const { return New(NULL); }

  TargetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetParameter& from);
  void MergeFrom(const TargetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann.TargetParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static TargetParameter* default_instance_;
};
// -------------------------------------------------------------------

class TargetParallelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann.TargetParallelParameter) */ {
 public:
  TargetParallelParameter();
  virtual ~TargetParallelParameter();

  TargetParallelParameter(const TargetParallelParameter& from);

  inline TargetParallelParameter& operator=(const TargetParallelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetParallelParameter& default_instance();

  void Swap(TargetParallelParameter* other);

  // implements Message ----------------------------------------------

  inline TargetParallelParameter* New() const { return New(NULL); }

  TargetParallelParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetParallelParameter& from);
  void MergeFrom(const TargetParallelParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetParallelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann.TargetParallelParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_lbann_2eproto();
  friend void protobuf_AssignDesc_lbann_2eproto();
  friend void protobuf_ShutdownFile_lbann_2eproto();

  void InitAsDefaultInstance();
  static TargetParallelParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LbannModel

// optional .lbann.NetParameter train_net = 1;
inline bool LbannModel::has_train_net() const {
  return !_is_default_instance_ && train_net_ != NULL;
}
inline void LbannModel::clear_train_net() {
  if (GetArenaNoVirtual() == NULL && train_net_ != NULL) delete train_net_;
  train_net_ = NULL;
}
inline const ::lbann::NetParameter& LbannModel::train_net() const {
  // @@protoc_insertion_point(field_get:lbann.LbannModel.train_net)
  return train_net_ != NULL ? *train_net_ : *default_instance_->train_net_;
}
inline ::lbann::NetParameter* LbannModel::mutable_train_net() {
  
  if (train_net_ == NULL) {
    train_net_ = new ::lbann::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LbannModel.train_net)
  return train_net_;
}
inline ::lbann::NetParameter* LbannModel::release_train_net() {
  // @@protoc_insertion_point(field_release:lbann.LbannModel.train_net)
  
  ::lbann::NetParameter* temp = train_net_;
  train_net_ = NULL;
  return temp;
}
inline void LbannModel::set_allocated_train_net(::lbann::NetParameter* train_net) {
  delete train_net_;
  train_net_ = train_net;
  if (train_net) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LbannModel.train_net)
}

// -------------------------------------------------------------------

// NetParameter

// repeated .lbann.LayerParameter layer = 1;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::lbann::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:lbann.NetParameter.layer)
  return layer_.Get(index);
}
inline ::lbann::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::lbann::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:lbann.NetParameter.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lbann::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lbann.NetParameter.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lbann::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:lbann.NetParameter.layer)
  return layer_;
}

// -------------------------------------------------------------------

// LayerParameter

// optional string type = 1;
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.type)
}

// optional .lbann.InputParameter input_param = 2;
inline bool LayerParameter::has_input_param() const {
  return !_is_default_instance_ && input_param_ != NULL;
}
inline void LayerParameter::clear_input_param() {
  if (GetArenaNoVirtual() == NULL && input_param_ != NULL) delete input_param_;
  input_param_ = NULL;
}
inline const ::lbann::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
inline ::lbann::InputParameter* LayerParameter::mutable_input_param() {
  
  if (input_param_ == NULL) {
    input_param_ = new ::lbann::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.input_param)
  return input_param_;
}
inline ::lbann::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.input_param)
  
  ::lbann::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::lbann::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.input_param)
}

// optional .lbann.FullyConnectedParameter fully_connected_param = 3;
inline bool LayerParameter::has_fully_connected_param() const {
  return !_is_default_instance_ && fully_connected_param_ != NULL;
}
inline void LayerParameter::clear_fully_connected_param() {
  if (GetArenaNoVirtual() == NULL && fully_connected_param_ != NULL) delete fully_connected_param_;
  fully_connected_param_ = NULL;
}
inline const ::lbann::FullyConnectedParameter& LayerParameter::fully_connected_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.fully_connected_param)
  return fully_connected_param_ != NULL ? *fully_connected_param_ : *default_instance_->fully_connected_param_;
}
inline ::lbann::FullyConnectedParameter* LayerParameter::mutable_fully_connected_param() {
  
  if (fully_connected_param_ == NULL) {
    fully_connected_param_ = new ::lbann::FullyConnectedParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.fully_connected_param)
  return fully_connected_param_;
}
inline ::lbann::FullyConnectedParameter* LayerParameter::release_fully_connected_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.fully_connected_param)
  
  ::lbann::FullyConnectedParameter* temp = fully_connected_param_;
  fully_connected_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_fully_connected_param(::lbann::FullyConnectedParameter* fully_connected_param) {
  delete fully_connected_param_;
  fully_connected_param_ = fully_connected_param;
  if (fully_connected_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.fully_connected_param)
}

// optional .lbann.PoolingParameter pooling_param = 4;
inline bool LayerParameter::has_pooling_param() const {
  return !_is_default_instance_ && pooling_param_ != NULL;
}
inline void LayerParameter::clear_pooling_param() {
  if (GetArenaNoVirtual() == NULL && pooling_param_ != NULL) delete pooling_param_;
  pooling_param_ = NULL;
}
inline const ::lbann::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::lbann::PoolingParameter* LayerParameter::mutable_pooling_param() {
  
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::lbann::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::lbann::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.pooling_param)
  
  ::lbann::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::lbann::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.pooling_param)
}

// optional .lbann.ConvolutionParameter convolution_param = 5;
inline bool LayerParameter::has_convolution_param() const {
  return !_is_default_instance_ && convolution_param_ != NULL;
}
inline void LayerParameter::clear_convolution_param() {
  if (GetArenaNoVirtual() == NULL && convolution_param_ != NULL) delete convolution_param_;
  convolution_param_ = NULL;
}
inline const ::lbann::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::lbann::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::lbann::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::lbann::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.convolution_param)
  
  ::lbann::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::lbann::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.convolution_param)
}

// optional .lbann.SoftmaxParameter softmax_param = 6;
inline bool LayerParameter::has_softmax_param() const {
  return !_is_default_instance_ && softmax_param_ != NULL;
}
inline void LayerParameter::clear_softmax_param() {
  if (GetArenaNoVirtual() == NULL && softmax_param_ != NULL) delete softmax_param_;
  softmax_param_ = NULL;
}
inline const ::lbann::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::lbann::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::lbann::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::lbann::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.softmax_param)
  
  ::lbann::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::lbann::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.softmax_param)
}

// optional .lbann.TargetParameter target_param = 7;
inline bool LayerParameter::has_target_param() const {
  return !_is_default_instance_ && target_param_ != NULL;
}
inline void LayerParameter::clear_target_param() {
  if (GetArenaNoVirtual() == NULL && target_param_ != NULL) delete target_param_;
  target_param_ = NULL;
}
inline const ::lbann::TargetParameter& LayerParameter::target_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.target_param)
  return target_param_ != NULL ? *target_param_ : *default_instance_->target_param_;
}
inline ::lbann::TargetParameter* LayerParameter::mutable_target_param() {
  
  if (target_param_ == NULL) {
    target_param_ = new ::lbann::TargetParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.target_param)
  return target_param_;
}
inline ::lbann::TargetParameter* LayerParameter::release_target_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.target_param)
  
  ::lbann::TargetParameter* temp = target_param_;
  target_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_target_param(::lbann::TargetParameter* target_param) {
  delete target_param_;
  target_param_ = target_param;
  if (target_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.target_param)
}

// optional .lbann.TargetParallelParameter target_parallel_param = 8;
inline bool LayerParameter::has_target_parallel_param() const {
  return !_is_default_instance_ && target_parallel_param_ != NULL;
}
inline void LayerParameter::clear_target_parallel_param() {
  if (GetArenaNoVirtual() == NULL && target_parallel_param_ != NULL) delete target_parallel_param_;
  target_parallel_param_ = NULL;
}
inline const ::lbann::TargetParallelParameter& LayerParameter::target_parallel_param() const {
  // @@protoc_insertion_point(field_get:lbann.LayerParameter.target_parallel_param)
  return target_parallel_param_ != NULL ? *target_parallel_param_ : *default_instance_->target_parallel_param_;
}
inline ::lbann::TargetParallelParameter* LayerParameter::mutable_target_parallel_param() {
  
  if (target_parallel_param_ == NULL) {
    target_parallel_param_ = new ::lbann::TargetParallelParameter;
  }
  // @@protoc_insertion_point(field_mutable:lbann.LayerParameter.target_parallel_param)
  return target_parallel_param_;
}
inline ::lbann::TargetParallelParameter* LayerParameter::release_target_parallel_param() {
  // @@protoc_insertion_point(field_release:lbann.LayerParameter.target_parallel_param)
  
  ::lbann::TargetParallelParameter* temp = target_parallel_param_;
  target_parallel_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_target_parallel_param(::lbann::TargetParallelParameter* target_parallel_param) {
  delete target_parallel_param_;
  target_parallel_param_ = target_parallel_param;
  if (target_parallel_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann.LayerParameter.target_parallel_param)
}

// -------------------------------------------------------------------

// InputParameter

// -------------------------------------------------------------------

// FullyConnectedParameter

// -------------------------------------------------------------------

// PoolingParameter

// -------------------------------------------------------------------

// ConvolutionParameter

// -------------------------------------------------------------------

// SoftmaxParameter

// -------------------------------------------------------------------

// TargetParameter

// -------------------------------------------------------------------

// TargetParallelParameter

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lbann

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lbann_2eproto__INCLUDED
