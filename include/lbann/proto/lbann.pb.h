// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lbann.proto

#ifndef PROTOBUF_lbann_2eproto__INCLUDED
#define PROTOBUF_lbann_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace lbann_data {
class Convolution;
class ConvolutionDefaultTypeInternal;
extern ConvolutionDefaultTypeInternal _Convolution_default_instance_;
class DataReader;
class DataReaderDefaultTypeInternal;
extern DataReaderDefaultTypeInternal _DataReader_default_instance_;
class FullyConnected;
class FullyConnectedDefaultTypeInternal;
extern FullyConnectedDefaultTypeInternal _FullyConnected_default_instance_;
class ImagePreprocessor;
class ImagePreprocessorDefaultTypeInternal;
extern ImagePreprocessorDefaultTypeInternal _ImagePreprocessor_default_instance_;
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class InputDistributedMiniBatch;
class InputDistributedMiniBatchDefaultTypeInternal;
extern InputDistributedMiniBatchDefaultTypeInternal _InputDistributedMiniBatch_default_instance_;
class InputDistributedMiniBatchParallelIO;
class InputDistributedMiniBatchParallelIODefaultTypeInternal;
extern InputDistributedMiniBatchParallelIODefaultTypeInternal _InputDistributedMiniBatchParallelIO_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class LbannPB;
class LbannPBDefaultTypeInternal;
extern LbannPBDefaultTypeInternal _LbannPB_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class NetworkParams;
class NetworkParamsDefaultTypeInternal;
extern NetworkParamsDefaultTypeInternal _NetworkParams_default_instance_;
class Optimizer;
class OptimizerDefaultTypeInternal;
extern OptimizerDefaultTypeInternal _Optimizer_default_instance_;
class PerformanceParams;
class PerformanceParamsDefaultTypeInternal;
extern PerformanceParamsDefaultTypeInternal _PerformanceParams_default_instance_;
class Pooling;
class PoolingDefaultTypeInternal;
extern PoolingDefaultTypeInternal _Pooling_default_instance_;
class Reader;
class ReaderDefaultTypeInternal;
extern ReaderDefaultTypeInternal _Reader_default_instance_;
class Softmax;
class SoftmaxDefaultTypeInternal;
extern SoftmaxDefaultTypeInternal _Softmax_default_instance_;
class SystemParams;
class SystemParamsDefaultTypeInternal;
extern SystemParamsDefaultTypeInternal _SystemParams_default_instance_;
class Target;
class TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
class TargetDistributedMinibatch;
class TargetDistributedMinibatchDefaultTypeInternal;
extern TargetDistributedMinibatchDefaultTypeInternal _TargetDistributedMinibatch_default_instance_;
class TargetDistributedMinibatchParallelIO;
class TargetDistributedMinibatchParallelIODefaultTypeInternal;
extern TargetDistributedMinibatchParallelIODefaultTypeInternal _TargetDistributedMinibatchParallelIO_default_instance_;
class TargetParallel;
class TargetParallelDefaultTypeInternal;
extern TargetParallelDefaultTypeInternal _TargetParallel_default_instance_;
class TrainingParams;
class TrainingParamsDefaultTypeInternal;
extern TrainingParamsDefaultTypeInternal _TrainingParams_default_instance_;
}  // namespace lbann_data

namespace lbann_data {

namespace protobuf_lbann_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_lbann_2eproto

// ===================================================================

class LbannPB : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.LbannPB) */ {
 public:
  LbannPB();
  virtual ~LbannPB();

  LbannPB(const LbannPB& from);

  inline LbannPB& operator=(const LbannPB& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LbannPB& default_instance();

  static inline const LbannPB* internal_default_instance() {
    return reinterpret_cast<const LbannPB*>(
               &_LbannPB_default_instance_);
  }

  void Swap(LbannPB* other);

  // implements Message ----------------------------------------------

  inline LbannPB* New() const PROTOBUF_FINAL { return New(NULL); }

  LbannPB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LbannPB& from);
  void MergeFrom(const LbannPB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LbannPB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string optimizer = 10;
  void clear_optimizer();
  static const int kOptimizerFieldNumber = 10;
  const ::std::string& optimizer() const;
  void set_optimizer(const ::std::string& value);
  #if LANG_CXX11
  void set_optimizer(::std::string&& value);
  #endif
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  ::std::string* mutable_optimizer();
  ::std::string* release_optimizer();
  void set_allocated_optimizer(::std::string* optimizer);

  // string objective_fn = 11;
  void clear_objective_fn();
  static const int kObjectiveFnFieldNumber = 11;
  const ::std::string& objective_fn() const;
  void set_objective_fn(const ::std::string& value);
  #if LANG_CXX11
  void set_objective_fn(::std::string&& value);
  #endif
  void set_objective_fn(const char* value);
  void set_objective_fn(const char* value, size_t size);
  ::std::string* mutable_objective_fn();
  ::std::string* release_objective_fn();
  void set_allocated_objective_fn(::std::string* objective_fn);

  // .lbann_data.DataReader data_reader = 1;
  bool has_data_reader() const;
  void clear_data_reader();
  static const int kDataReaderFieldNumber = 1;
  const ::lbann_data::DataReader& data_reader() const;
  ::lbann_data::DataReader* mutable_data_reader();
  ::lbann_data::DataReader* release_data_reader();
  void set_allocated_data_reader(::lbann_data::DataReader* data_reader);

  // .lbann_data.Model model = 2;
  bool has_model() const;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::lbann_data::Model& model() const;
  ::lbann_data::Model* mutable_model();
  ::lbann_data::Model* release_model();
  void set_allocated_model(::lbann_data::Model* model);

  // .lbann_data.PerformanceParams performance_params = 3;
  bool has_performance_params() const;
  void clear_performance_params();
  static const int kPerformanceParamsFieldNumber = 3;
  const ::lbann_data::PerformanceParams& performance_params() const;
  ::lbann_data::PerformanceParams* mutable_performance_params();
  ::lbann_data::PerformanceParams* release_performance_params();
  void set_allocated_performance_params(::lbann_data::PerformanceParams* performance_params);

  // .lbann_data.SystemParams system_params = 4;
  bool has_system_params() const;
  void clear_system_params();
  static const int kSystemParamsFieldNumber = 4;
  const ::lbann_data::SystemParams& system_params() const;
  ::lbann_data::SystemParams* mutable_system_params();
  ::lbann_data::SystemParams* release_system_params();
  void set_allocated_system_params(::lbann_data::SystemParams* system_params);

  // .lbann_data.NetworkParams network_params = 5;
  bool has_network_params() const;
  void clear_network_params();
  static const int kNetworkParamsFieldNumber = 5;
  const ::lbann_data::NetworkParams& network_params() const;
  ::lbann_data::NetworkParams* mutable_network_params();
  ::lbann_data::NetworkParams* release_network_params();
  void set_allocated_network_params(::lbann_data::NetworkParams* network_params);

  // .lbann_data.TrainingParams training_params = 6;
  bool has_training_params() const;
  void clear_training_params();
  static const int kTrainingParamsFieldNumber = 6;
  const ::lbann_data::TrainingParams& training_params() const;
  ::lbann_data::TrainingParams* mutable_training_params();
  ::lbann_data::TrainingParams* release_training_params();
  void set_allocated_training_params(::lbann_data::TrainingParams* training_params);

  // bool has_cudnn = 8;
  void clear_has_cudnn();
  static const int kHasCudnnFieldNumber = 8;
  bool has_cudnn() const;
  void set_has_cudnn(bool value);

  // int32 mini_batch_size = 12;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 12;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.LbannPB)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr optimizer_;
  ::google::protobuf::internal::ArenaStringPtr objective_fn_;
  ::lbann_data::DataReader* data_reader_;
  ::lbann_data::Model* model_;
  ::lbann_data::PerformanceParams* performance_params_;
  ::lbann_data::SystemParams* system_params_;
  ::lbann_data::NetworkParams* network_params_;
  ::lbann_data::TrainingParams* training_params_;
  bool has_cudnn_;
  ::google::protobuf::int32 mini_batch_size_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataReader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.DataReader) */ {
 public:
  DataReader();
  virtual ~DataReader();

  DataReader(const DataReader& from);

  inline DataReader& operator=(const DataReader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataReader& default_instance();

  static inline const DataReader* internal_default_instance() {
    return reinterpret_cast<const DataReader*>(
               &_DataReader_default_instance_);
  }

  void Swap(DataReader* other);

  // implements Message ----------------------------------------------

  inline DataReader* New() const PROTOBUF_FINAL { return New(NULL); }

  DataReader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataReader& from);
  void MergeFrom(const DataReader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataReader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .lbann_data.Reader reader = 1;
  int reader_size() const;
  void clear_reader();
  static const int kReaderFieldNumber = 1;
  const ::lbann_data::Reader& reader(int index) const;
  ::lbann_data::Reader* mutable_reader(int index);
  ::lbann_data::Reader* add_reader();
  ::google::protobuf::RepeatedPtrField< ::lbann_data::Reader >*
      mutable_reader();
  const ::google::protobuf::RepeatedPtrField< ::lbann_data::Reader >&
      reader() const;

  // @@protoc_insertion_point(class_scope:lbann_data.DataReader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::lbann_data::Reader > reader_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Reader) */ {
 public:
  Reader();
  virtual ~Reader();

  Reader(const Reader& from);

  inline Reader& operator=(const Reader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reader& default_instance();

  static inline const Reader* internal_default_instance() {
    return reinterpret_cast<const Reader*>(
               &_Reader_default_instance_);
  }

  void Swap(Reader* other);

  // implements Message ----------------------------------------------

  inline Reader* New() const PROTOBUF_FINAL { return New(NULL); }

  Reader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Reader& from);
  void MergeFrom(const Reader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Reader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string role = 3;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  const ::std::string& role() const;
  void set_role(const ::std::string& value);
  #if LANG_CXX11
  void set_role(::std::string&& value);
  #endif
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  ::std::string* mutable_role();
  ::std::string* release_role();
  void set_allocated_role(::std::string* role);

  // string data_filename = 6;
  void clear_data_filename();
  static const int kDataFilenameFieldNumber = 6;
  const ::std::string& data_filename() const;
  void set_data_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_data_filename(::std::string&& value);
  #endif
  void set_data_filename(const char* value);
  void set_data_filename(const char* value, size_t size);
  ::std::string* mutable_data_filename();
  ::std::string* release_data_filename();
  void set_allocated_data_filename(::std::string* data_filename);

  // string label_filename = 7;
  void clear_label_filename();
  static const int kLabelFilenameFieldNumber = 7;
  const ::std::string& label_filename() const;
  void set_label_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_label_filename(::std::string&& value);
  #endif
  void set_label_filename(const char* value);
  void set_label_filename(const char* value, size_t size);
  ::std::string* mutable_label_filename();
  ::std::string* release_label_filename();
  void set_allocated_label_filename(::std::string* label_filename);

  // .lbann_data.ImagePreprocessor image_preprocessor = 13;
  bool has_image_preprocessor() const;
  void clear_image_preprocessor();
  static const int kImagePreprocessorFieldNumber = 13;
  const ::lbann_data::ImagePreprocessor& image_preprocessor() const;
  ::lbann_data::ImagePreprocessor* mutable_image_preprocessor();
  ::lbann_data::ImagePreprocessor* release_image_preprocessor();
  void set_allocated_image_preprocessor(::lbann_data::ImagePreprocessor* image_preprocessor);

  // int32 mini_batch_size = 2;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 2;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // bool shuffle = 4;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 4;
  bool shuffle() const;
  void set_shuffle(bool value);

  // bool firstN = 10;
  void clear_firstn();
  static const int kFirstNFieldNumber = 10;
  bool firstn() const;
  void set_firstn(bool value);

  // double train_or_test_percent = 8;
  void clear_train_or_test_percent();
  static const int kTrainOrTestPercentFieldNumber = 8;
  double train_or_test_percent() const;
  void set_train_or_test_percent(double value);

  // double validation_percent = 9;
  void clear_validation_percent();
  static const int kValidationPercentFieldNumber = 9;
  double validation_percent() const;
  void set_validation_percent(double value);

  // double percent_of_data_to_use = 12;
  void clear_percent_of_data_to_use();
  static const int kPercentOfDataToUseFieldNumber = 12;
  double percent_of_data_to_use() const;
  void set_percent_of_data_to_use(double value);

  // int32 max_sample_count = 11;
  void clear_max_sample_count();
  static const int kMaxSampleCountFieldNumber = 11;
  ::google::protobuf::int32 max_sample_count() const;
  void set_max_sample_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Reader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr role_;
  ::google::protobuf::internal::ArenaStringPtr data_filename_;
  ::google::protobuf::internal::ArenaStringPtr label_filename_;
  ::lbann_data::ImagePreprocessor* image_preprocessor_;
  ::google::protobuf::int32 mini_batch_size_;
  bool shuffle_;
  bool firstn_;
  double train_or_test_percent_;
  double validation_percent_;
  double percent_of_data_to_use_;
  ::google::protobuf::int32 max_sample_count_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImagePreprocessor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.ImagePreprocessor) */ {
 public:
  ImagePreprocessor();
  virtual ~ImagePreprocessor();

  ImagePreprocessor(const ImagePreprocessor& from);

  inline ImagePreprocessor& operator=(const ImagePreprocessor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImagePreprocessor& default_instance();

  static inline const ImagePreprocessor* internal_default_instance() {
    return reinterpret_cast<const ImagePreprocessor*>(
               &_ImagePreprocessor_default_instance_);
  }

  void Swap(ImagePreprocessor* other);

  // implements Message ----------------------------------------------

  inline ImagePreprocessor* New() const PROTOBUF_FINAL { return New(NULL); }

  ImagePreprocessor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImagePreprocessor& from);
  void MergeFrom(const ImagePreprocessor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImagePreprocessor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool scale = 12;
  void clear_scale();
  static const int kScaleFieldNumber = 12;
  bool scale() const;
  void set_scale(bool value);

  // bool subtract_mean = 13;
  void clear_subtract_mean();
  static const int kSubtractMeanFieldNumber = 13;
  bool subtract_mean() const;
  void set_subtract_mean(bool value);

  // bool unit_variance = 14;
  void clear_unit_variance();
  static const int kUnitVarianceFieldNumber = 14;
  bool unit_variance() const;
  void set_unit_variance(bool value);

  // bool z_score = 15;
  void clear_z_score();
  static const int kZScoreFieldNumber = 15;
  bool z_score() const;
  void set_z_score(bool value);

  // bool horizontal_flip = 16;
  void clear_horizontal_flip();
  static const int kHorizontalFlipFieldNumber = 16;
  bool horizontal_flip() const;
  void set_horizontal_flip(bool value);

  // bool vertical_flip = 17;
  void clear_vertical_flip();
  static const int kVerticalFlipFieldNumber = 17;
  bool vertical_flip() const;
  void set_vertical_flip(bool value);

  // bool disable_augmentation = 22;
  void clear_disable_augmentation();
  static const int kDisableAugmentationFieldNumber = 22;
  bool disable_augmentation() const;
  void set_disable_augmentation(bool value);

  // double rotation = 18;
  void clear_rotation();
  static const int kRotationFieldNumber = 18;
  double rotation() const;
  void set_rotation(double value);

  // double horizontal_shift = 19;
  void clear_horizontal_shift();
  static const int kHorizontalShiftFieldNumber = 19;
  double horizontal_shift() const;
  void set_horizontal_shift(double value);

  // double vertical_shift = 20;
  void clear_vertical_shift();
  static const int kVerticalShiftFieldNumber = 20;
  double vertical_shift() const;
  void set_vertical_shift(double value);

  // double shear_range = 21;
  void clear_shear_range();
  static const int kShearRangeFieldNumber = 21;
  double shear_range() const;
  void set_shear_range(double value);

  // @@protoc_insertion_point(class_scope:lbann_data.ImagePreprocessor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool scale_;
  bool subtract_mean_;
  bool unit_variance_;
  bool z_score_;
  bool horizontal_flip_;
  bool vertical_flip_;
  bool disable_augmentation_;
  double rotation_;
  double horizontal_shift_;
  double vertical_shift_;
  double shear_range_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }

  void Swap(Model* other);

  // implements Message ----------------------------------------------

  inline Model* New() const PROTOBUF_FINAL { return New(NULL); }

  Model* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string metric = 5;
  int metric_size() const;
  void clear_metric();
  static const int kMetricFieldNumber = 5;
  const ::std::string& metric(int index) const;
  ::std::string* mutable_metric(int index);
  void set_metric(int index, const ::std::string& value);
  void set_metric(int index, const char* value);
  void set_metric(int index, const char* value, size_t size);
  ::std::string* add_metric();
  void add_metric(const ::std::string& value);
  void add_metric(const char* value);
  void add_metric(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& metric() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_metric();

  // repeated .lbann_data.Layer layer = 10;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 10;
  const ::lbann_data::Layer& layer(int index) const;
  ::lbann_data::Layer* mutable_layer(int index);
  ::lbann_data::Layer* add_layer();
  ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >&
      layer() const;

  // repeated string callback = 20;
  int callback_size() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 20;
  const ::std::string& callback(int index) const;
  ::std::string* mutable_callback(int index);
  void set_callback(int index, const ::std::string& value);
  void set_callback(int index, const char* value);
  void set_callback(int index, const char* value, size_t size);
  ::std::string* add_callback();
  void add_callback(const ::std::string& value);
  void add_callback(const char* value);
  void add_callback(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& callback() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_callback();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string objective_function = 2;
  void clear_objective_function();
  static const int kObjectiveFunctionFieldNumber = 2;
  const ::std::string& objective_function() const;
  void set_objective_function(const ::std::string& value);
  #if LANG_CXX11
  void set_objective_function(::std::string&& value);
  #endif
  void set_objective_function(const char* value);
  void set_objective_function(const char* value, size_t size);
  ::std::string* mutable_objective_function();
  ::std::string* release_objective_function();
  void set_allocated_objective_function(::std::string* objective_function);

  // .lbann_data.Optimizer optimizer = 11;
  bool has_optimizer() const;
  void clear_optimizer();
  static const int kOptimizerFieldNumber = 11;
  const ::lbann_data::Optimizer& optimizer() const;
  ::lbann_data::Optimizer* mutable_optimizer();
  ::lbann_data::Optimizer* release_optimizer();
  void set_allocated_optimizer(::lbann_data::Optimizer* optimizer);

  // int32 mini_batch_size = 6;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 6;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // int32 num_epochs = 4;
  void clear_num_epochs();
  static const int kNumEpochsFieldNumber = 4;
  ::google::protobuf::int32 num_epochs() const;
  void set_num_epochs(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Model)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> metric_;
  ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer > layer_;
  ::google::protobuf::RepeatedPtrField< ::std::string> callback_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr objective_function_;
  ::lbann_data::Optimizer* optimizer_;
  ::google::protobuf::int32 mini_batch_size_;
  ::google::protobuf::int32 num_epochs_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Optimizer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Optimizer) */ {
 public:
  Optimizer();
  virtual ~Optimizer();

  Optimizer(const Optimizer& from);

  inline Optimizer& operator=(const Optimizer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Optimizer& default_instance();

  static inline const Optimizer* internal_default_instance() {
    return reinterpret_cast<const Optimizer*>(
               &_Optimizer_default_instance_);
  }

  void Swap(Optimizer* other);

  // implements Message ----------------------------------------------

  inline Optimizer* New() const PROTOBUF_FINAL { return New(NULL); }

  Optimizer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Optimizer& from);
  void MergeFrom(const Optimizer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Optimizer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double learn_rate = 2;
  void clear_learn_rate();
  static const int kLearnRateFieldNumber = 2;
  double learn_rate() const;
  void set_learn_rate(double value);

  // double momentum = 3;
  void clear_momentum();
  static const int kMomentumFieldNumber = 3;
  double momentum() const;
  void set_momentum(double value);

  // double decay = 4;
  void clear_decay();
  static const int kDecayFieldNumber = 4;
  double decay() const;
  void set_decay(double value);

  // bool nesterov = 5;
  void clear_nesterov();
  static const int kNesterovFieldNumber = 5;
  bool nesterov() const;
  void set_nesterov(bool value);

  // @@protoc_insertion_point(class_scope:lbann_data.Optimizer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double learn_rate_;
  double momentum_;
  double decay_;
  bool nesterov_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }

  void Swap(Layer* other);

  // implements Message ----------------------------------------------

  inline Layer* New() const PROTOBUF_FINAL { return New(NULL); }

  Layer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
  bool has_input_distributed_minibatch_parallel_io() const;
  void clear_input_distributed_minibatch_parallel_io();
  static const int kInputDistributedMinibatchParallelIoFieldNumber = 8;
  const ::lbann_data::InputDistributedMiniBatchParallelIO& input_distributed_minibatch_parallel_io() const;
  ::lbann_data::InputDistributedMiniBatchParallelIO* mutable_input_distributed_minibatch_parallel_io();
  ::lbann_data::InputDistributedMiniBatchParallelIO* release_input_distributed_minibatch_parallel_io();
  void set_allocated_input_distributed_minibatch_parallel_io(::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io);

  // .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
  bool has_input_distributed_minibatch() const;
  void clear_input_distributed_minibatch();
  static const int kInputDistributedMinibatchFieldNumber = 9;
  const ::lbann_data::InputDistributedMiniBatch& input_distributed_minibatch() const;
  ::lbann_data::InputDistributedMiniBatch* mutable_input_distributed_minibatch();
  ::lbann_data::InputDistributedMiniBatch* release_input_distributed_minibatch();
  void set_allocated_input_distributed_minibatch(::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch);

  // .lbann_data.Input input = 10;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 10;
  const ::lbann_data::Input& input() const;
  ::lbann_data::Input* mutable_input();
  ::lbann_data::Input* release_input();
  void set_allocated_input(::lbann_data::Input* input);

  // .lbann_data.FullyConnected fully_connected = 11;
  bool has_fully_connected() const;
  void clear_fully_connected();
  static const int kFullyConnectedFieldNumber = 11;
  const ::lbann_data::FullyConnected& fully_connected() const;
  ::lbann_data::FullyConnected* mutable_fully_connected();
  ::lbann_data::FullyConnected* release_fully_connected();
  void set_allocated_fully_connected(::lbann_data::FullyConnected* fully_connected);

  // .lbann_data.Pooling pooling = 12;
  bool has_pooling() const;
  void clear_pooling();
  static const int kPoolingFieldNumber = 12;
  const ::lbann_data::Pooling& pooling() const;
  ::lbann_data::Pooling* mutable_pooling();
  ::lbann_data::Pooling* release_pooling();
  void set_allocated_pooling(::lbann_data::Pooling* pooling);

  // .lbann_data.Convolution convolution = 13;
  bool has_convolution() const;
  void clear_convolution();
  static const int kConvolutionFieldNumber = 13;
  const ::lbann_data::Convolution& convolution() const;
  ::lbann_data::Convolution* mutable_convolution();
  ::lbann_data::Convolution* release_convolution();
  void set_allocated_convolution(::lbann_data::Convolution* convolution);

  // .lbann_data.Softmax softmax = 14;
  bool has_softmax() const;
  void clear_softmax();
  static const int kSoftmaxFieldNumber = 14;
  const ::lbann_data::Softmax& softmax() const;
  ::lbann_data::Softmax* mutable_softmax();
  ::lbann_data::Softmax* release_softmax();
  void set_allocated_softmax(::lbann_data::Softmax* softmax);

  // .lbann_data.Target target = 15;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 15;
  const ::lbann_data::Target& target() const;
  ::lbann_data::Target* mutable_target();
  ::lbann_data::Target* release_target();
  void set_allocated_target(::lbann_data::Target* target);

  // .lbann_data.TargetParallel target_parallel = 16;
  bool has_target_parallel() const;
  void clear_target_parallel();
  static const int kTargetParallelFieldNumber = 16;
  const ::lbann_data::TargetParallel& target_parallel() const;
  ::lbann_data::TargetParallel* mutable_target_parallel();
  ::lbann_data::TargetParallel* release_target_parallel();
  void set_allocated_target_parallel(::lbann_data::TargetParallel* target_parallel);

  // .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
  bool has_target_distributed_minibatch() const;
  void clear_target_distributed_minibatch();
  static const int kTargetDistributedMinibatchFieldNumber = 17;
  const ::lbann_data::TargetDistributedMinibatch& target_distributed_minibatch() const;
  ::lbann_data::TargetDistributedMinibatch* mutable_target_distributed_minibatch();
  ::lbann_data::TargetDistributedMinibatch* release_target_distributed_minibatch();
  void set_allocated_target_distributed_minibatch(::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch);

  // .lbann_data.TargetDistributedMinibatchParallelIO target_distributed_minibatch_parallel_io = 18;
  bool has_target_distributed_minibatch_parallel_io() const;
  void clear_target_distributed_minibatch_parallel_io();
  static const int kTargetDistributedMinibatchParallelIoFieldNumber = 18;
  const ::lbann_data::TargetDistributedMinibatchParallelIO& target_distributed_minibatch_parallel_io() const;
  ::lbann_data::TargetDistributedMinibatchParallelIO* mutable_target_distributed_minibatch_parallel_io();
  ::lbann_data::TargetDistributedMinibatchParallelIO* release_target_distributed_minibatch_parallel_io();
  void set_allocated_target_distributed_minibatch_parallel_io(::lbann_data::TargetDistributedMinibatchParallelIO* target_distributed_minibatch_parallel_io);

  // int32 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io_;
  ::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch_;
  ::lbann_data::Input* input_;
  ::lbann_data::FullyConnected* fully_connected_;
  ::lbann_data::Pooling* pooling_;
  ::lbann_data::Convolution* convolution_;
  ::lbann_data::Softmax* softmax_;
  ::lbann_data::Target* target_;
  ::lbann_data::TargetParallel* target_parallel_;
  ::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch_;
  ::lbann_data::TargetDistributedMinibatchParallelIO* target_distributed_minibatch_parallel_io_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Input& default_instance();

  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }

  void Swap(Input* other);

  // implements Message ----------------------------------------------

  inline Input* New() const PROTOBUF_FINAL { return New(NULL); }

  Input* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 mini_batch_size = 1;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 1;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 mini_batch_size_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InputDistributedMiniBatchParallelIO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.InputDistributedMiniBatchParallelIO) */ {
 public:
  InputDistributedMiniBatchParallelIO();
  virtual ~InputDistributedMiniBatchParallelIO();

  InputDistributedMiniBatchParallelIO(const InputDistributedMiniBatchParallelIO& from);

  inline InputDistributedMiniBatchParallelIO& operator=(const InputDistributedMiniBatchParallelIO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputDistributedMiniBatchParallelIO& default_instance();

  static inline const InputDistributedMiniBatchParallelIO* internal_default_instance() {
    return reinterpret_cast<const InputDistributedMiniBatchParallelIO*>(
               &_InputDistributedMiniBatchParallelIO_default_instance_);
  }

  void Swap(InputDistributedMiniBatchParallelIO* other);

  // implements Message ----------------------------------------------

  inline InputDistributedMiniBatchParallelIO* New() const PROTOBUF_FINAL { return New(NULL); }

  InputDistributedMiniBatchParallelIO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InputDistributedMiniBatchParallelIO& from);
  void MergeFrom(const InputDistributedMiniBatchParallelIO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InputDistributedMiniBatchParallelIO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 num_parallel_readers = 1;
  void clear_num_parallel_readers();
  static const int kNumParallelReadersFieldNumber = 1;
  ::google::protobuf::int32 num_parallel_readers() const;
  void set_num_parallel_readers(::google::protobuf::int32 value);

  // int32 mini_batch_size = 2;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 2;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.InputDistributedMiniBatchParallelIO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 num_parallel_readers_;
  ::google::protobuf::int32 mini_batch_size_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InputDistributedMiniBatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.InputDistributedMiniBatch) */ {
 public:
  InputDistributedMiniBatch();
  virtual ~InputDistributedMiniBatch();

  InputDistributedMiniBatch(const InputDistributedMiniBatch& from);

  inline InputDistributedMiniBatch& operator=(const InputDistributedMiniBatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputDistributedMiniBatch& default_instance();

  static inline const InputDistributedMiniBatch* internal_default_instance() {
    return reinterpret_cast<const InputDistributedMiniBatch*>(
               &_InputDistributedMiniBatch_default_instance_);
  }

  void Swap(InputDistributedMiniBatch* other);

  // implements Message ----------------------------------------------

  inline InputDistributedMiniBatch* New() const PROTOBUF_FINAL { return New(NULL); }

  InputDistributedMiniBatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InputDistributedMiniBatch& from);
  void MergeFrom(const InputDistributedMiniBatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InputDistributedMiniBatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.InputDistributedMiniBatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FullyConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.FullyConnected) */ {
 public:
  FullyConnected();
  virtual ~FullyConnected();

  FullyConnected(const FullyConnected& from);

  inline FullyConnected& operator=(const FullyConnected& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FullyConnected& default_instance();

  static inline const FullyConnected* internal_default_instance() {
    return reinterpret_cast<const FullyConnected*>(
               &_FullyConnected_default_instance_);
  }

  void Swap(FullyConnected* other);

  // implements Message ----------------------------------------------

  inline FullyConnected* New() const PROTOBUF_FINAL { return New(NULL); }

  FullyConnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FullyConnected& from);
  void MergeFrom(const FullyConnected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FullyConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string regularizer = 11;
  int regularizer_size() const;
  void clear_regularizer();
  static const int kRegularizerFieldNumber = 11;
  const ::std::string& regularizer(int index) const;
  ::std::string* mutable_regularizer(int index);
  void set_regularizer(int index, const ::std::string& value);
  void set_regularizer(int index, const char* value);
  void set_regularizer(int index, const char* value, size_t size);
  ::std::string* add_regularizer();
  void add_regularizer(const ::std::string& value);
  void add_regularizer(const char* value);
  void add_regularizer(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& regularizer() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regularizer();

  // string activation_type = 4;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 4;
  const ::std::string& activation_type() const;
  void set_activation_type(const ::std::string& value);
  #if LANG_CXX11
  void set_activation_type(::std::string&& value);
  #endif
  void set_activation_type(const char* value);
  void set_activation_type(const char* value, size_t size);
  ::std::string* mutable_activation_type();
  ::std::string* release_activation_type();
  void set_allocated_activation_type(::std::string* activation_type);

  // string weight_initialization = 5;
  void clear_weight_initialization();
  static const int kWeightInitializationFieldNumber = 5;
  const ::std::string& weight_initialization() const;
  void set_weight_initialization(const ::std::string& value);
  #if LANG_CXX11
  void set_weight_initialization(::std::string&& value);
  #endif
  void set_weight_initialization(const char* value);
  void set_weight_initialization(const char* value, size_t size);
  ::std::string* mutable_weight_initialization();
  ::std::string* release_weight_initialization();
  void set_allocated_weight_initialization(::std::string* weight_initialization);

  // string optimizer = 10;
  void clear_optimizer();
  static const int kOptimizerFieldNumber = 10;
  const ::std::string& optimizer() const;
  void set_optimizer(const ::std::string& value);
  #if LANG_CXX11
  void set_optimizer(::std::string&& value);
  #endif
  void set_optimizer(const char* value);
  void set_optimizer(const char* value, size_t size);
  ::std::string* mutable_optimizer();
  ::std::string* release_optimizer();
  void set_allocated_optimizer(::std::string* optimizer);

  // int32 num_prev_neurons = 1;
  void clear_num_prev_neurons();
  static const int kNumPrevNeuronsFieldNumber = 1;
  ::google::protobuf::int32 num_prev_neurons() const;
  void set_num_prev_neurons(::google::protobuf::int32 value);

  // int32 num_neurons = 2;
  void clear_num_neurons();
  static const int kNumNeuronsFieldNumber = 2;
  ::google::protobuf::int32 num_neurons() const;
  void set_num_neurons(::google::protobuf::int32 value);

  // int32 mini_batch_size = 3;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 3;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.FullyConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regularizer_;
  ::google::protobuf::internal::ArenaStringPtr activation_type_;
  ::google::protobuf::internal::ArenaStringPtr weight_initialization_;
  ::google::protobuf::internal::ArenaStringPtr optimizer_;
  ::google::protobuf::int32 num_prev_neurons_;
  ::google::protobuf::int32 num_neurons_;
  ::google::protobuf::int32 mini_batch_size_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pooling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Pooling) */ {
 public:
  Pooling();
  virtual ~Pooling();

  Pooling(const Pooling& from);

  inline Pooling& operator=(const Pooling& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pooling& default_instance();

  static inline const Pooling* internal_default_instance() {
    return reinterpret_cast<const Pooling*>(
               &_Pooling_default_instance_);
  }

  void Swap(Pooling* other);

  // implements Message ----------------------------------------------

  inline Pooling* New() const PROTOBUF_FINAL { return New(NULL); }

  Pooling* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pooling& from);
  void MergeFrom(const Pooling& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pooling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 input_dims = 3;
  int input_dims_size() const;
  void clear_input_dims();
  static const int kInputDimsFieldNumber = 3;
  ::google::protobuf::int32 input_dims(int index) const;
  void set_input_dims(int index, ::google::protobuf::int32 value);
  void add_input_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dims();

  // repeated int32 pool_dims = 4;
  int pool_dims_size() const;
  void clear_pool_dims();
  static const int kPoolDimsFieldNumber = 4;
  ::google::protobuf::int32 pool_dims(int index) const;
  void set_pool_dims(int index, ::google::protobuf::int32 value);
  void add_pool_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pool_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pool_dims();

  // repeated int32 pool_pads = 5;
  int pool_pads_size() const;
  void clear_pool_pads();
  static const int kPoolPadsFieldNumber = 5;
  ::google::protobuf::int32 pool_pads(int index) const;
  void set_pool_pads(int index, ::google::protobuf::int32 value);
  void add_pool_pads(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pool_pads() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pool_pads();

  // repeated int32 pool_strides = 6;
  int pool_strides_size() const;
  void clear_pool_strides();
  static const int kPoolStridesFieldNumber = 6;
  ::google::protobuf::int32 pool_strides(int index) const;
  void set_pool_strides(int index, ::google::protobuf::int32 value);
  void add_pool_strides(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pool_strides() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pool_strides();

  // string pool_mode = 7;
  void clear_pool_mode();
  static const int kPoolModeFieldNumber = 7;
  const ::std::string& pool_mode() const;
  void set_pool_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_pool_mode(::std::string&& value);
  #endif
  void set_pool_mode(const char* value);
  void set_pool_mode(const char* value, size_t size);
  ::std::string* mutable_pool_mode();
  ::std::string* release_pool_mode();
  void set_allocated_pool_mode(::std::string* pool_mode);

  // string activation_type = 8;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 8;
  const ::std::string& activation_type() const;
  void set_activation_type(const ::std::string& value);
  #if LANG_CXX11
  void set_activation_type(::std::string&& value);
  #endif
  void set_activation_type(const char* value);
  void set_activation_type(const char* value, size_t size);
  ::std::string* mutable_activation_type();
  ::std::string* release_activation_type();
  void set_allocated_activation_type(::std::string* activation_type);

  // int32 num_dims = 1;
  void clear_num_dims();
  static const int kNumDimsFieldNumber = 1;
  ::google::protobuf::int32 num_dims() const;
  void set_num_dims(::google::protobuf::int32 value);

  // int32 num_channels = 2;
  void clear_num_channels();
  static const int kNumChannelsFieldNumber = 2;
  ::google::protobuf::int32 num_channels() const;
  void set_num_channels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Pooling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dims_;
  mutable int _input_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pool_dims_;
  mutable int _pool_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pool_pads_;
  mutable int _pool_pads_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pool_strides_;
  mutable int _pool_strides_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr pool_mode_;
  ::google::protobuf::internal::ArenaStringPtr activation_type_;
  ::google::protobuf::int32 num_dims_;
  ::google::protobuf::int32 num_channels_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Convolution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Convolution) */ {
 public:
  Convolution();
  virtual ~Convolution();

  Convolution(const Convolution& from);

  inline Convolution& operator=(const Convolution& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Convolution& default_instance();

  static inline const Convolution* internal_default_instance() {
    return reinterpret_cast<const Convolution*>(
               &_Convolution_default_instance_);
  }

  void Swap(Convolution* other);

  // implements Message ----------------------------------------------

  inline Convolution* New() const PROTOBUF_FINAL { return New(NULL); }

  Convolution* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Convolution& from);
  void MergeFrom(const Convolution& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Convolution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 input_dims = 3;
  int input_dims_size() const;
  void clear_input_dims();
  static const int kInputDimsFieldNumber = 3;
  ::google::protobuf::int32 input_dims(int index) const;
  void set_input_dims(int index, ::google::protobuf::int32 value);
  void add_input_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dims();

  // repeated int32 filter_dims = 5;
  int filter_dims_size() const;
  void clear_filter_dims();
  static const int kFilterDimsFieldNumber = 5;
  ::google::protobuf::int32 filter_dims(int index) const;
  void set_filter_dims(int index, ::google::protobuf::int32 value);
  void add_filter_dims(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      filter_dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_filter_dims();

  // repeated int32 conv_pads = 6;
  int conv_pads_size() const;
  void clear_conv_pads();
  static const int kConvPadsFieldNumber = 6;
  ::google::protobuf::int32 conv_pads(int index) const;
  void set_conv_pads(int index, ::google::protobuf::int32 value);
  void add_conv_pads(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      conv_pads() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_conv_pads();

  // repeated int32 conv_strides = 7;
  int conv_strides_size() const;
  void clear_conv_strides();
  static const int kConvStridesFieldNumber = 7;
  ::google::protobuf::int32 conv_strides(int index) const;
  void set_conv_strides(int index, ::google::protobuf::int32 value);
  void add_conv_strides(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      conv_strides() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_conv_strides();

  // string weight_initialization = 9;
  void clear_weight_initialization();
  static const int kWeightInitializationFieldNumber = 9;
  const ::std::string& weight_initialization() const;
  void set_weight_initialization(const ::std::string& value);
  #if LANG_CXX11
  void set_weight_initialization(::std::string&& value);
  #endif
  void set_weight_initialization(const char* value);
  void set_weight_initialization(const char* value, size_t size);
  ::std::string* mutable_weight_initialization();
  ::std::string* release_weight_initialization();
  void set_allocated_weight_initialization(::std::string* weight_initialization);

  // string activation_type = 10;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 10;
  const ::std::string& activation_type() const;
  void set_activation_type(const ::std::string& value);
  #if LANG_CXX11
  void set_activation_type(::std::string&& value);
  #endif
  void set_activation_type(const char* value);
  void set_activation_type(const char* value, size_t size);
  ::std::string* mutable_activation_type();
  ::std::string* release_activation_type();
  void set_allocated_activation_type(::std::string* activation_type);

  // int32 num_dims = 1;
  void clear_num_dims();
  static const int kNumDimsFieldNumber = 1;
  ::google::protobuf::int32 num_dims() const;
  void set_num_dims(::google::protobuf::int32 value);

  // int32 num_input_channels = 2;
  void clear_num_input_channels();
  static const int kNumInputChannelsFieldNumber = 2;
  ::google::protobuf::int32 num_input_channels() const;
  void set_num_input_channels(::google::protobuf::int32 value);

  // int32 num_output_channels = 4;
  void clear_num_output_channels();
  static const int kNumOutputChannelsFieldNumber = 4;
  ::google::protobuf::int32 num_output_channels() const;
  void set_num_output_channels(::google::protobuf::int32 value);

  // int32 mini_batch_size = 8;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 8;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Convolution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dims_;
  mutable int _input_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > filter_dims_;
  mutable int _filter_dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > conv_pads_;
  mutable int _conv_pads_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > conv_strides_;
  mutable int _conv_strides_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr weight_initialization_;
  ::google::protobuf::internal::ArenaStringPtr activation_type_;
  ::google::protobuf::int32 num_dims_;
  ::google::protobuf::int32 num_input_channels_;
  ::google::protobuf::int32 num_output_channels_;
  ::google::protobuf::int32 mini_batch_size_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Softmax : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Softmax) */ {
 public:
  Softmax();
  virtual ~Softmax();

  Softmax(const Softmax& from);

  inline Softmax& operator=(const Softmax& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Softmax& default_instance();

  static inline const Softmax* internal_default_instance() {
    return reinterpret_cast<const Softmax*>(
               &_Softmax_default_instance_);
  }

  void Swap(Softmax* other);

  // implements Message ----------------------------------------------

  inline Softmax* New() const PROTOBUF_FINAL { return New(NULL); }

  Softmax* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Softmax& from);
  void MergeFrom(const Softmax& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Softmax* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string weight_initialization = 3;
  void clear_weight_initialization();
  static const int kWeightInitializationFieldNumber = 3;
  const ::std::string& weight_initialization() const;
  void set_weight_initialization(const ::std::string& value);
  #if LANG_CXX11
  void set_weight_initialization(::std::string&& value);
  #endif
  void set_weight_initialization(const char* value);
  void set_weight_initialization(const char* value, size_t size);
  ::std::string* mutable_weight_initialization();
  ::std::string* release_weight_initialization();
  void set_allocated_weight_initialization(::std::string* weight_initialization);

  // string activation_type = 4;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 4;
  const ::std::string& activation_type() const;
  void set_activation_type(const ::std::string& value);
  #if LANG_CXX11
  void set_activation_type(::std::string&& value);
  #endif
  void set_activation_type(const char* value);
  void set_activation_type(const char* value, size_t size);
  ::std::string* mutable_activation_type();
  ::std::string* release_activation_type();
  void set_allocated_activation_type(::std::string* activation_type);

  // int32 num_prev_neurons = 1;
  void clear_num_prev_neurons();
  static const int kNumPrevNeuronsFieldNumber = 1;
  ::google::protobuf::int32 num_prev_neurons() const;
  void set_num_prev_neurons(::google::protobuf::int32 value);

  // int32 num_neurons = 2;
  void clear_num_neurons();
  static const int kNumNeuronsFieldNumber = 2;
  ::google::protobuf::int32 num_neurons() const;
  void set_num_neurons(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.Softmax)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr weight_initialization_;
  ::google::protobuf::internal::ArenaStringPtr activation_type_;
  ::google::protobuf::int32 num_prev_neurons_;
  ::google::protobuf::int32 num_neurons_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Target : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.Target) */ {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Target& default_instance();

  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }

  void Swap(Target* other);

  // implements Message ----------------------------------------------

  inline Target* New() const PROTOBUF_FINAL { return New(NULL); }

  Target* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Target* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.Target)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TargetParallel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.TargetParallel) */ {
 public:
  TargetParallel();
  virtual ~TargetParallel();

  TargetParallel(const TargetParallel& from);

  inline TargetParallel& operator=(const TargetParallel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetParallel& default_instance();

  static inline const TargetParallel* internal_default_instance() {
    return reinterpret_cast<const TargetParallel*>(
               &_TargetParallel_default_instance_);
  }

  void Swap(TargetParallel* other);

  // implements Message ----------------------------------------------

  inline TargetParallel* New() const PROTOBUF_FINAL { return New(NULL); }

  TargetParallel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TargetParallel& from);
  void MergeFrom(const TargetParallel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TargetParallel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.TargetParallel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TargetDistributedMinibatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.TargetDistributedMinibatch) */ {
 public:
  TargetDistributedMinibatch();
  virtual ~TargetDistributedMinibatch();

  TargetDistributedMinibatch(const TargetDistributedMinibatch& from);

  inline TargetDistributedMinibatch& operator=(const TargetDistributedMinibatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetDistributedMinibatch& default_instance();

  static inline const TargetDistributedMinibatch* internal_default_instance() {
    return reinterpret_cast<const TargetDistributedMinibatch*>(
               &_TargetDistributedMinibatch_default_instance_);
  }

  void Swap(TargetDistributedMinibatch* other);

  // implements Message ----------------------------------------------

  inline TargetDistributedMinibatch* New() const PROTOBUF_FINAL { return New(NULL); }

  TargetDistributedMinibatch* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TargetDistributedMinibatch& from);
  void MergeFrom(const TargetDistributedMinibatch& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TargetDistributedMinibatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lbann_data.TargetDistributedMinibatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TargetDistributedMinibatchParallelIO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.TargetDistributedMinibatchParallelIO) */ {
 public:
  TargetDistributedMinibatchParallelIO();
  virtual ~TargetDistributedMinibatchParallelIO();

  TargetDistributedMinibatchParallelIO(const TargetDistributedMinibatchParallelIO& from);

  inline TargetDistributedMinibatchParallelIO& operator=(const TargetDistributedMinibatchParallelIO& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetDistributedMinibatchParallelIO& default_instance();

  static inline const TargetDistributedMinibatchParallelIO* internal_default_instance() {
    return reinterpret_cast<const TargetDistributedMinibatchParallelIO*>(
               &_TargetDistributedMinibatchParallelIO_default_instance_);
  }

  void Swap(TargetDistributedMinibatchParallelIO* other);

  // implements Message ----------------------------------------------

  inline TargetDistributedMinibatchParallelIO* New() const PROTOBUF_FINAL { return New(NULL); }

  TargetDistributedMinibatchParallelIO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TargetDistributedMinibatchParallelIO& from);
  void MergeFrom(const TargetDistributedMinibatchParallelIO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TargetDistributedMinibatchParallelIO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 num_parallel_readers = 1;
  void clear_num_parallel_readers();
  static const int kNumParallelReadersFieldNumber = 1;
  ::google::protobuf::int32 num_parallel_readers() const;
  void set_num_parallel_readers(::google::protobuf::int32 value);

  // int32 mini_batch_size = 2;
  void clear_mini_batch_size();
  static const int kMiniBatchSizeFieldNumber = 2;
  ::google::protobuf::int32 mini_batch_size() const;
  void set_mini_batch_size(::google::protobuf::int32 value);

  // bool shared_data_reader = 3;
  void clear_shared_data_reader();
  static const int kSharedDataReaderFieldNumber = 3;
  bool shared_data_reader() const;
  void set_shared_data_reader(bool value);

  // bool for_regression = 4;
  void clear_for_regression();
  static const int kForRegressionFieldNumber = 4;
  bool for_regression() const;
  void set_for_regression(bool value);

  // @@protoc_insertion_point(class_scope:lbann_data.TargetDistributedMinibatchParallelIO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 num_parallel_readers_;
  ::google::protobuf::int32 mini_batch_size_;
  bool shared_data_reader_;
  bool for_regression_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SystemParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.SystemParams) */ {
 public:
  SystemParams();
  virtual ~SystemParams();

  SystemParams(const SystemParams& from);

  inline SystemParams& operator=(const SystemParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemParams& default_instance();

  static inline const SystemParams* internal_default_instance() {
    return reinterpret_cast<const SystemParams*>(
               &_SystemParams_default_instance_);
  }

  void Swap(SystemParams* other);

  // implements Message ----------------------------------------------

  inline SystemParams* New() const PROTOBUF_FINAL { return New(NULL); }

  SystemParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SystemParams& from);
  void MergeFrom(const SystemParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SystemParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_name = 1;
  void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // int32 num_nodes = 2;
  void clear_num_nodes();
  static const int kNumNodesFieldNumber = 2;
  ::google::protobuf::int32 num_nodes() const;
  void set_num_nodes(::google::protobuf::int32 value);

  // int32 num_cores = 3;
  void clear_num_cores();
  static const int kNumCoresFieldNumber = 3;
  ::google::protobuf::int32 num_cores() const;
  void set_num_cores(::google::protobuf::int32 value);

  // int32 tasks_per_node = 4;
  void clear_tasks_per_node();
  static const int kTasksPerNodeFieldNumber = 4;
  ::google::protobuf::int32 tasks_per_node() const;
  void set_tasks_per_node(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.SystemParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::google::protobuf::int32 num_nodes_;
  ::google::protobuf::int32 num_cores_;
  ::google::protobuf::int32 tasks_per_node_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.NetworkParams) */ {
 public:
  NetworkParams();
  virtual ~NetworkParams();

  NetworkParams(const NetworkParams& from);

  inline NetworkParams& operator=(const NetworkParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkParams& default_instance();

  static inline const NetworkParams* internal_default_instance() {
    return reinterpret_cast<const NetworkParams*>(
               &_NetworkParams_default_instance_);
  }

  void Swap(NetworkParams* other);

  // implements Message ----------------------------------------------

  inline NetworkParams* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkParams& from);
  void MergeFrom(const NetworkParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string network_str = 1;
  void clear_network_str();
  static const int kNetworkStrFieldNumber = 1;
  const ::std::string& network_str() const;
  void set_network_str(const ::std::string& value);
  #if LANG_CXX11
  void set_network_str(::std::string&& value);
  #endif
  void set_network_str(const char* value);
  void set_network_str(const char* value, size_t size);
  ::std::string* mutable_network_str();
  ::std::string* release_network_str();
  void set_allocated_network_str(::std::string* network_str);

  // @@protoc_insertion_point(class_scope:lbann_data.NetworkParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr network_str_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerformanceParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.PerformanceParams) */ {
 public:
  PerformanceParams();
  virtual ~PerformanceParams();

  PerformanceParams(const PerformanceParams& from);

  inline PerformanceParams& operator=(const PerformanceParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerformanceParams& default_instance();

  static inline const PerformanceParams* internal_default_instance() {
    return reinterpret_cast<const PerformanceParams*>(
               &_PerformanceParams_default_instance_);
  }

  void Swap(PerformanceParams* other);

  // implements Message ----------------------------------------------

  inline PerformanceParams* New() const PROTOBUF_FINAL { return New(NULL); }

  PerformanceParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerformanceParams& from);
  void MergeFrom(const PerformanceParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerformanceParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 block_size = 1;
  void clear_block_size();
  static const int kBlockSizeFieldNumber = 1;
  ::google::protobuf::int32 block_size() const;
  void set_block_size(::google::protobuf::int32 value);

  // int32 max_par_io_size = 2;
  void clear_max_par_io_size();
  static const int kMaxParIoSizeFieldNumber = 2;
  ::google::protobuf::int32 max_par_io_size() const;
  void set_max_par_io_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.PerformanceParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 block_size_;
  ::google::protobuf::int32 max_par_io_size_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrainingParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lbann_data.TrainingParams) */ {
 public:
  TrainingParams();
  virtual ~TrainingParams();

  TrainingParams(const TrainingParams& from);

  inline TrainingParams& operator=(const TrainingParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrainingParams& default_instance();

  static inline const TrainingParams* internal_default_instance() {
    return reinterpret_cast<const TrainingParams*>(
               &_TrainingParams_default_instance_);
  }

  void Swap(TrainingParams* other);

  // implements Message ----------------------------------------------

  inline TrainingParams* New() const PROTOBUF_FINAL { return New(NULL); }

  TrainingParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrainingParams& from);
  void MergeFrom(const TrainingParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrainingParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string activation_type = 16;
  void clear_activation_type();
  static const int kActivationTypeFieldNumber = 16;
  const ::std::string& activation_type() const;
  void set_activation_type(const ::std::string& value);
  #if LANG_CXX11
  void set_activation_type(::std::string&& value);
  #endif
  void set_activation_type(const char* value);
  void set_activation_type(const char* value, size_t size);
  ::std::string* mutable_activation_type();
  ::std::string* release_activation_type();
  void set_allocated_activation_type(::std::string* activation_type);

  // string weight_initialization = 19;
  void clear_weight_initialization();
  static const int kWeightInitializationFieldNumber = 19;
  const ::std::string& weight_initialization() const;
  void set_weight_initialization(const ::std::string& value);
  #if LANG_CXX11
  void set_weight_initialization(::std::string&& value);
  #endif
  void set_weight_initialization(const char* value);
  void set_weight_initialization(const char* value, size_t size);
  ::std::string* mutable_weight_initialization();
  ::std::string* release_weight_initialization();
  void set_allocated_weight_initialization(::std::string* weight_initialization);

  // string dataset_root_dir = 20;
  void clear_dataset_root_dir();
  static const int kDatasetRootDirFieldNumber = 20;
  const ::std::string& dataset_root_dir() const;
  void set_dataset_root_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_root_dir(::std::string&& value);
  #endif
  void set_dataset_root_dir(const char* value);
  void set_dataset_root_dir(const char* value, size_t size);
  ::std::string* mutable_dataset_root_dir();
  ::std::string* release_dataset_root_dir();
  void set_allocated_dataset_root_dir(::std::string* dataset_root_dir);

  // string save_image_dir = 21;
  void clear_save_image_dir();
  static const int kSaveImageDirFieldNumber = 21;
  const ::std::string& save_image_dir() const;
  void set_save_image_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_save_image_dir(::std::string&& value);
  #endif
  void set_save_image_dir(const char* value);
  void set_save_image_dir(const char* value, size_t size);
  ::std::string* mutable_save_image_dir();
  ::std::string* release_save_image_dir();
  void set_allocated_save_image_dir(::std::string* save_image_dir);

  // string parameter_dir = 22;
  void clear_parameter_dir();
  static const int kParameterDirFieldNumber = 22;
  const ::std::string& parameter_dir() const;
  void set_parameter_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter_dir(::std::string&& value);
  #endif
  void set_parameter_dir(const char* value);
  void set_parameter_dir(const char* value, size_t size);
  ::std::string* mutable_parameter_dir();
  ::std::string* release_parameter_dir();
  void set_allocated_parameter_dir(::std::string* parameter_dir);

  // string train_file = 28;
  void clear_train_file();
  static const int kTrainFileFieldNumber = 28;
  const ::std::string& train_file() const;
  void set_train_file(const ::std::string& value);
  #if LANG_CXX11
  void set_train_file(::std::string&& value);
  #endif
  void set_train_file(const char* value);
  void set_train_file(const char* value, size_t size);
  ::std::string* mutable_train_file();
  ::std::string* release_train_file();
  void set_allocated_train_file(::std::string* train_file);

  // string test_file = 29;
  void clear_test_file();
  static const int kTestFileFieldNumber = 29;
  const ::std::string& test_file() const;
  void set_test_file(const ::std::string& value);
  #if LANG_CXX11
  void set_test_file(::std::string&& value);
  #endif
  void set_test_file(const char* value);
  void set_test_file(const char* value, size_t size);
  ::std::string* mutable_test_file();
  ::std::string* release_test_file();
  void set_allocated_test_file(::std::string* test_file);

  // string summary_dir = 30;
  void clear_summary_dir();
  static const int kSummaryDirFieldNumber = 30;
  const ::std::string& summary_dir() const;
  void set_summary_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_summary_dir(::std::string&& value);
  #endif
  void set_summary_dir(const char* value);
  void set_summary_dir(const char* value, size_t size);
  ::std::string* mutable_summary_dir();
  ::std::string* release_summary_dir();
  void set_allocated_summary_dir(::std::string* summary_dir);

  // string dump_dir = 34;
  void clear_dump_dir();
  static const int kDumpDirFieldNumber = 34;
  const ::std::string& dump_dir() const;
  void set_dump_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_dump_dir(::std::string&& value);
  #endif
  void set_dump_dir(const char* value);
  void set_dump_dir(const char* value, size_t size);
  ::std::string* mutable_dump_dir();
  ::std::string* release_dump_dir();
  void set_allocated_dump_dir(::std::string* dump_dir);

  // int32 random_seed = 2;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 2;
  ::google::protobuf::int32 random_seed() const;
  void set_random_seed(::google::protobuf::int32 value);

  // int32 shuffle_training_data = 3;
  void clear_shuffle_training_data();
  static const int kShuffleTrainingDataFieldNumber = 3;
  ::google::protobuf::int32 shuffle_training_data() const;
  void set_shuffle_training_data(::google::protobuf::int32 value);

  // double percentage_training_samples = 4;
  void clear_percentage_training_samples();
  static const int kPercentageTrainingSamplesFieldNumber = 4;
  double percentage_training_samples() const;
  void set_percentage_training_samples(double value);

  // double percentage_validation_samples = 5;
  void clear_percentage_validation_samples();
  static const int kPercentageValidationSamplesFieldNumber = 5;
  double percentage_validation_samples() const;
  void set_percentage_validation_samples(double value);

  // double percentage_testing_samples = 6;
  void clear_percentage_testing_samples();
  static const int kPercentageTestingSamplesFieldNumber = 6;
  double percentage_testing_samples() const;
  void set_percentage_testing_samples(double value);

  // int32 test_with_train_data = 7;
  void clear_test_with_train_data();
  static const int kTestWithTrainDataFieldNumber = 7;
  ::google::protobuf::int32 test_with_train_data() const;
  void set_test_with_train_data(::google::protobuf::int32 value);

  // int32 epoch_start = 8;
  void clear_epoch_start();
  static const int kEpochStartFieldNumber = 8;
  ::google::protobuf::int32 epoch_start() const;
  void set_epoch_start(::google::protobuf::int32 value);

  // int32 epoch_count = 9;
  void clear_epoch_count();
  static const int kEpochCountFieldNumber = 9;
  ::google::protobuf::int32 epoch_count() const;
  void set_epoch_count(::google::protobuf::int32 value);

  // int32 mb_size = 10;
  void clear_mb_size();
  static const int kMbSizeFieldNumber = 10;
  ::google::protobuf::int32 mb_size() const;
  void set_mb_size(::google::protobuf::int32 value);

  // double learn_rate = 11;
  void clear_learn_rate();
  static const int kLearnRateFieldNumber = 11;
  double learn_rate() const;
  void set_learn_rate(double value);

  // double lr_decay_rate = 13;
  void clear_lr_decay_rate();
  static const int kLrDecayRateFieldNumber = 13;
  double lr_decay_rate() const;
  void set_lr_decay_rate(double value);

  // int32 learn_rate_method = 12;
  void clear_learn_rate_method();
  static const int kLearnRateMethodFieldNumber = 12;
  ::google::protobuf::int32 learn_rate_method() const;
  void set_learn_rate_method(::google::protobuf::int32 value);

  // int32 lr_decay_cycles = 14;
  void clear_lr_decay_cycles();
  static const int kLrDecayCyclesFieldNumber = 14;
  ::google::protobuf::int32 lr_decay_cycles() const;
  void set_lr_decay_cycles(::google::protobuf::int32 value);

  // double lr_momentum = 15;
  void clear_lr_momentum();
  static const int kLrMomentumFieldNumber = 15;
  double lr_momentum() const;
  void set_lr_momentum(double value);

  // double dropout = 17;
  void clear_dropout();
  static const int kDropoutFieldNumber = 17;
  double dropout() const;
  void set_dropout(double value);

  // double lambda = 18;
  void clear_lambda();
  static const int kLambdaFieldNumber = 18;
  double lambda() const;
  void set_lambda(double value);

  // bool enable_profiling = 1;
  void clear_enable_profiling();
  static const int kEnableProfilingFieldNumber = 1;
  bool enable_profiling() const;
  void set_enable_profiling(bool value);

  // bool save_model = 23;
  void clear_save_model();
  static const int kSaveModelFieldNumber = 23;
  bool save_model() const;
  void set_save_model(bool value);

  // bool load_model = 24;
  void clear_load_model();
  static const int kLoadModelFieldNumber = 24;
  bool load_model() const;
  void set_load_model(bool value);

  // bool dump_weights = 31;
  void clear_dump_weights();
  static const int kDumpWeightsFieldNumber = 31;
  bool dump_weights() const;
  void set_dump_weights(bool value);

  // int32 ckpt_epochs = 25;
  void clear_ckpt_epochs();
  static const int kCkptEpochsFieldNumber = 25;
  ::google::protobuf::int32 ckpt_epochs() const;
  void set_ckpt_epochs(::google::protobuf::int32 value);

  // int32 ckpt_steps = 26;
  void clear_ckpt_steps();
  static const int kCkptStepsFieldNumber = 26;
  ::google::protobuf::int32 ckpt_steps() const;
  void set_ckpt_steps(::google::protobuf::int32 value);

  // int32 ckpt_secs = 27;
  void clear_ckpt_secs();
  static const int kCkptSecsFieldNumber = 27;
  ::google::protobuf::int32 ckpt_secs() const;
  void set_ckpt_secs(::google::protobuf::int32 value);

  // bool dump_activations = 32;
  void clear_dump_activations();
  static const int kDumpActivationsFieldNumber = 32;
  bool dump_activations() const;
  void set_dump_activations(bool value);

  // bool dump_gradients = 33;
  void clear_dump_gradients();
  static const int kDumpGradientsFieldNumber = 33;
  bool dump_gradients() const;
  void set_dump_gradients(bool value);

  // int32 intermodel_comm_method = 35;
  void clear_intermodel_comm_method();
  static const int kIntermodelCommMethodFieldNumber = 35;
  ::google::protobuf::int32 intermodel_comm_method() const;
  void set_intermodel_comm_method(::google::protobuf::int32 value);

  // int32 procs_per_model = 36;
  void clear_procs_per_model();
  static const int kProcsPerModelFieldNumber = 36;
  ::google::protobuf::int32 procs_per_model() const;
  void set_procs_per_model(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:lbann_data.TrainingParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr activation_type_;
  ::google::protobuf::internal::ArenaStringPtr weight_initialization_;
  ::google::protobuf::internal::ArenaStringPtr dataset_root_dir_;
  ::google::protobuf::internal::ArenaStringPtr save_image_dir_;
  ::google::protobuf::internal::ArenaStringPtr parameter_dir_;
  ::google::protobuf::internal::ArenaStringPtr train_file_;
  ::google::protobuf::internal::ArenaStringPtr test_file_;
  ::google::protobuf::internal::ArenaStringPtr summary_dir_;
  ::google::protobuf::internal::ArenaStringPtr dump_dir_;
  ::google::protobuf::int32 random_seed_;
  ::google::protobuf::int32 shuffle_training_data_;
  double percentage_training_samples_;
  double percentage_validation_samples_;
  double percentage_testing_samples_;
  ::google::protobuf::int32 test_with_train_data_;
  ::google::protobuf::int32 epoch_start_;
  ::google::protobuf::int32 epoch_count_;
  ::google::protobuf::int32 mb_size_;
  double learn_rate_;
  double lr_decay_rate_;
  ::google::protobuf::int32 learn_rate_method_;
  ::google::protobuf::int32 lr_decay_cycles_;
  double lr_momentum_;
  double dropout_;
  double lambda_;
  bool enable_profiling_;
  bool save_model_;
  bool load_model_;
  bool dump_weights_;
  ::google::protobuf::int32 ckpt_epochs_;
  ::google::protobuf::int32 ckpt_steps_;
  ::google::protobuf::int32 ckpt_secs_;
  bool dump_activations_;
  bool dump_gradients_;
  ::google::protobuf::int32 intermodel_comm_method_;
  ::google::protobuf::int32 procs_per_model_;
  mutable int _cached_size_;
  friend struct  protobuf_lbann_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LbannPB

// .lbann_data.DataReader data_reader = 1;
inline bool LbannPB::has_data_reader() const {
  return this != internal_default_instance() && data_reader_ != NULL;
}
inline void LbannPB::clear_data_reader() {
  if (GetArenaNoVirtual() == NULL && data_reader_ != NULL) delete data_reader_;
  data_reader_ = NULL;
}
inline const ::lbann_data::DataReader& LbannPB::data_reader() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.data_reader)
  return data_reader_ != NULL ? *data_reader_
                         : *::lbann_data::DataReader::internal_default_instance();
}
inline ::lbann_data::DataReader* LbannPB::mutable_data_reader() {
  
  if (data_reader_ == NULL) {
    data_reader_ = new ::lbann_data::DataReader;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.data_reader)
  return data_reader_;
}
inline ::lbann_data::DataReader* LbannPB::release_data_reader() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.data_reader)
  
  ::lbann_data::DataReader* temp = data_reader_;
  data_reader_ = NULL;
  return temp;
}
inline void LbannPB::set_allocated_data_reader(::lbann_data::DataReader* data_reader) {
  delete data_reader_;
  data_reader_ = data_reader;
  if (data_reader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.data_reader)
}

// .lbann_data.Model model = 2;
inline bool LbannPB::has_model() const {
  return this != internal_default_instance() && model_ != NULL;
}
inline void LbannPB::clear_model() {
  if (GetArenaNoVirtual() == NULL && model_ != NULL) delete model_;
  model_ = NULL;
}
inline const ::lbann_data::Model& LbannPB::model() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.model)
  return model_ != NULL ? *model_
                         : *::lbann_data::Model::internal_default_instance();
}
inline ::lbann_data::Model* LbannPB::mutable_model() {
  
  if (model_ == NULL) {
    model_ = new ::lbann_data::Model;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.model)
  return model_;
}
inline ::lbann_data::Model* LbannPB::release_model() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.model)
  
  ::lbann_data::Model* temp = model_;
  model_ = NULL;
  return temp;
}
inline void LbannPB::set_allocated_model(::lbann_data::Model* model) {
  delete model_;
  model_ = model;
  if (model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.model)
}

// .lbann_data.PerformanceParams performance_params = 3;
inline bool LbannPB::has_performance_params() const {
  return this != internal_default_instance() && performance_params_ != NULL;
}
inline void LbannPB::clear_performance_params() {
  if (GetArenaNoVirtual() == NULL && performance_params_ != NULL) delete performance_params_;
  performance_params_ = NULL;
}
inline const ::lbann_data::PerformanceParams& LbannPB::performance_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.performance_params)
  return performance_params_ != NULL ? *performance_params_
                         : *::lbann_data::PerformanceParams::internal_default_instance();
}
inline ::lbann_data::PerformanceParams* LbannPB::mutable_performance_params() {
  
  if (performance_params_ == NULL) {
    performance_params_ = new ::lbann_data::PerformanceParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.performance_params)
  return performance_params_;
}
inline ::lbann_data::PerformanceParams* LbannPB::release_performance_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.performance_params)
  
  ::lbann_data::PerformanceParams* temp = performance_params_;
  performance_params_ = NULL;
  return temp;
}
inline void LbannPB::set_allocated_performance_params(::lbann_data::PerformanceParams* performance_params) {
  delete performance_params_;
  performance_params_ = performance_params;
  if (performance_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.performance_params)
}

// .lbann_data.SystemParams system_params = 4;
inline bool LbannPB::has_system_params() const {
  return this != internal_default_instance() && system_params_ != NULL;
}
inline void LbannPB::clear_system_params() {
  if (GetArenaNoVirtual() == NULL && system_params_ != NULL) delete system_params_;
  system_params_ = NULL;
}
inline const ::lbann_data::SystemParams& LbannPB::system_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.system_params)
  return system_params_ != NULL ? *system_params_
                         : *::lbann_data::SystemParams::internal_default_instance();
}
inline ::lbann_data::SystemParams* LbannPB::mutable_system_params() {
  
  if (system_params_ == NULL) {
    system_params_ = new ::lbann_data::SystemParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.system_params)
  return system_params_;
}
inline ::lbann_data::SystemParams* LbannPB::release_system_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.system_params)
  
  ::lbann_data::SystemParams* temp = system_params_;
  system_params_ = NULL;
  return temp;
}
inline void LbannPB::set_allocated_system_params(::lbann_data::SystemParams* system_params) {
  delete system_params_;
  system_params_ = system_params;
  if (system_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.system_params)
}

// .lbann_data.NetworkParams network_params = 5;
inline bool LbannPB::has_network_params() const {
  return this != internal_default_instance() && network_params_ != NULL;
}
inline void LbannPB::clear_network_params() {
  if (GetArenaNoVirtual() == NULL && network_params_ != NULL) delete network_params_;
  network_params_ = NULL;
}
inline const ::lbann_data::NetworkParams& LbannPB::network_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.network_params)
  return network_params_ != NULL ? *network_params_
                         : *::lbann_data::NetworkParams::internal_default_instance();
}
inline ::lbann_data::NetworkParams* LbannPB::mutable_network_params() {
  
  if (network_params_ == NULL) {
    network_params_ = new ::lbann_data::NetworkParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.network_params)
  return network_params_;
}
inline ::lbann_data::NetworkParams* LbannPB::release_network_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.network_params)
  
  ::lbann_data::NetworkParams* temp = network_params_;
  network_params_ = NULL;
  return temp;
}
inline void LbannPB::set_allocated_network_params(::lbann_data::NetworkParams* network_params) {
  delete network_params_;
  network_params_ = network_params;
  if (network_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.network_params)
}

// .lbann_data.TrainingParams training_params = 6;
inline bool LbannPB::has_training_params() const {
  return this != internal_default_instance() && training_params_ != NULL;
}
inline void LbannPB::clear_training_params() {
  if (GetArenaNoVirtual() == NULL && training_params_ != NULL) delete training_params_;
  training_params_ = NULL;
}
inline const ::lbann_data::TrainingParams& LbannPB::training_params() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.training_params)
  return training_params_ != NULL ? *training_params_
                         : *::lbann_data::TrainingParams::internal_default_instance();
}
inline ::lbann_data::TrainingParams* LbannPB::mutable_training_params() {
  
  if (training_params_ == NULL) {
    training_params_ = new ::lbann_data::TrainingParams;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.training_params)
  return training_params_;
}
inline ::lbann_data::TrainingParams* LbannPB::release_training_params() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.training_params)
  
  ::lbann_data::TrainingParams* temp = training_params_;
  training_params_ = NULL;
  return temp;
}
inline void LbannPB::set_allocated_training_params(::lbann_data::TrainingParams* training_params) {
  delete training_params_;
  training_params_ = training_params;
  if (training_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.training_params)
}

// bool has_cudnn = 8;
inline void LbannPB::clear_has_cudnn() {
  has_cudnn_ = false;
}
inline bool LbannPB::has_cudnn() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.has_cudnn)
  return has_cudnn_;
}
inline void LbannPB::set_has_cudnn(bool value) {
  
  has_cudnn_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.has_cudnn)
}

// string optimizer = 10;
inline void LbannPB::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LbannPB::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.optimizer)
  return optimizer_.GetNoArena();
}
inline void LbannPB::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.optimizer)
}
#if LANG_CXX11
inline void LbannPB::set_optimizer(::std::string&& value) {
  
  optimizer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.LbannPB.optimizer)
}
#endif
inline void LbannPB::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.optimizer)
}
inline void LbannPB::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.optimizer)
}
inline ::std::string* LbannPB::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LbannPB::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LbannPB::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.optimizer)
}

// string objective_fn = 11;
inline void LbannPB::clear_objective_fn() {
  objective_fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LbannPB::objective_fn() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.objective_fn)
  return objective_fn_.GetNoArena();
}
inline void LbannPB::set_objective_fn(const ::std::string& value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.objective_fn)
}
#if LANG_CXX11
inline void LbannPB::set_objective_fn(::std::string&& value) {
  
  objective_fn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.LbannPB.objective_fn)
}
#endif
inline void LbannPB::set_objective_fn(const char* value) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.LbannPB.objective_fn)
}
inline void LbannPB::set_objective_fn(const char* value, size_t size) {
  
  objective_fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.LbannPB.objective_fn)
}
inline ::std::string* LbannPB::mutable_objective_fn() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.LbannPB.objective_fn)
  return objective_fn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LbannPB::release_objective_fn() {
  // @@protoc_insertion_point(field_release:lbann_data.LbannPB.objective_fn)
  
  return objective_fn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LbannPB::set_allocated_objective_fn(::std::string* objective_fn) {
  if (objective_fn != NULL) {
    
  } else {
    
  }
  objective_fn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objective_fn);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.LbannPB.objective_fn)
}

// int32 mini_batch_size = 12;
inline void LbannPB::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 LbannPB::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.LbannPB.mini_batch_size)
  return mini_batch_size_;
}
inline void LbannPB::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.LbannPB.mini_batch_size)
}

// -------------------------------------------------------------------

// DataReader

// repeated .lbann_data.Reader reader = 1;
inline int DataReader::reader_size() const {
  return reader_.size();
}
inline void DataReader::clear_reader() {
  reader_.Clear();
}
inline const ::lbann_data::Reader& DataReader::reader(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.DataReader.reader)
  return reader_.Get(index);
}
inline ::lbann_data::Reader* DataReader::mutable_reader(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.DataReader.reader)
  return reader_.Mutable(index);
}
inline ::lbann_data::Reader* DataReader::add_reader() {
  // @@protoc_insertion_point(field_add:lbann_data.DataReader.reader)
  return reader_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lbann_data::Reader >*
DataReader::mutable_reader() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.DataReader.reader)
  return &reader_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lbann_data::Reader >&
DataReader::reader() const {
  // @@protoc_insertion_point(field_list:lbann_data.DataReader.reader)
  return reader_;
}

// -------------------------------------------------------------------

// Reader

// string name = 1;
inline void Reader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reader::name() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.name)
  return name_.GetNoArena();
}
inline void Reader::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Reader.name)
}
#if LANG_CXX11
inline void Reader::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Reader.name)
}
#endif
inline void Reader::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Reader.name)
}
inline void Reader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Reader.name)
}
inline ::std::string* Reader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Reader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reader::release_name() {
  // @@protoc_insertion_point(field_release:lbann_data.Reader.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Reader.name)
}

// int32 mini_batch_size = 2;
inline void Reader::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 Reader::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.mini_batch_size)
  return mini_batch_size_;
}
inline void Reader::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Reader.mini_batch_size)
}

// string role = 3;
inline void Reader::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reader::role() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.role)
  return role_.GetNoArena();
}
inline void Reader::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Reader.role)
}
#if LANG_CXX11
inline void Reader::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Reader.role)
}
#endif
inline void Reader::set_role(const char* value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Reader.role)
}
inline void Reader::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Reader.role)
}
inline ::std::string* Reader::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Reader.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reader::release_role() {
  // @@protoc_insertion_point(field_release:lbann_data.Reader.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reader::set_allocated_role(::std::string* role) {
  if (role != NULL) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Reader.role)
}

// bool shuffle = 4;
inline void Reader::clear_shuffle() {
  shuffle_ = false;
}
inline bool Reader::shuffle() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.shuffle)
  return shuffle_;
}
inline void Reader::set_shuffle(bool value) {
  
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Reader.shuffle)
}

// string data_filename = 6;
inline void Reader::clear_data_filename() {
  data_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reader::data_filename() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.data_filename)
  return data_filename_.GetNoArena();
}
inline void Reader::set_data_filename(const ::std::string& value) {
  
  data_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Reader.data_filename)
}
#if LANG_CXX11
inline void Reader::set_data_filename(::std::string&& value) {
  
  data_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Reader.data_filename)
}
#endif
inline void Reader::set_data_filename(const char* value) {
  
  data_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Reader.data_filename)
}
inline void Reader::set_data_filename(const char* value, size_t size) {
  
  data_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Reader.data_filename)
}
inline ::std::string* Reader::mutable_data_filename() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Reader.data_filename)
  return data_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reader::release_data_filename() {
  // @@protoc_insertion_point(field_release:lbann_data.Reader.data_filename)
  
  return data_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reader::set_allocated_data_filename(::std::string* data_filename) {
  if (data_filename != NULL) {
    
  } else {
    
  }
  data_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_filename);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Reader.data_filename)
}

// string label_filename = 7;
inline void Reader::clear_label_filename() {
  label_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reader::label_filename() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.label_filename)
  return label_filename_.GetNoArena();
}
inline void Reader::set_label_filename(const ::std::string& value) {
  
  label_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Reader.label_filename)
}
#if LANG_CXX11
inline void Reader::set_label_filename(::std::string&& value) {
  
  label_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Reader.label_filename)
}
#endif
inline void Reader::set_label_filename(const char* value) {
  
  label_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Reader.label_filename)
}
inline void Reader::set_label_filename(const char* value, size_t size) {
  
  label_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Reader.label_filename)
}
inline ::std::string* Reader::mutable_label_filename() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Reader.label_filename)
  return label_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reader::release_label_filename() {
  // @@protoc_insertion_point(field_release:lbann_data.Reader.label_filename)
  
  return label_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reader::set_allocated_label_filename(::std::string* label_filename) {
  if (label_filename != NULL) {
    
  } else {
    
  }
  label_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_filename);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Reader.label_filename)
}

// double train_or_test_percent = 8;
inline void Reader::clear_train_or_test_percent() {
  train_or_test_percent_ = 0;
}
inline double Reader::train_or_test_percent() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.train_or_test_percent)
  return train_or_test_percent_;
}
inline void Reader::set_train_or_test_percent(double value) {
  
  train_or_test_percent_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Reader.train_or_test_percent)
}

// double validation_percent = 9;
inline void Reader::clear_validation_percent() {
  validation_percent_ = 0;
}
inline double Reader::validation_percent() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.validation_percent)
  return validation_percent_;
}
inline void Reader::set_validation_percent(double value) {
  
  validation_percent_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Reader.validation_percent)
}

// bool firstN = 10;
inline void Reader::clear_firstn() {
  firstn_ = false;
}
inline bool Reader::firstn() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.firstN)
  return firstn_;
}
inline void Reader::set_firstn(bool value) {
  
  firstn_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Reader.firstN)
}

// int32 max_sample_count = 11;
inline void Reader::clear_max_sample_count() {
  max_sample_count_ = 0;
}
inline ::google::protobuf::int32 Reader::max_sample_count() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.max_sample_count)
  return max_sample_count_;
}
inline void Reader::set_max_sample_count(::google::protobuf::int32 value) {
  
  max_sample_count_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Reader.max_sample_count)
}

// double percent_of_data_to_use = 12;
inline void Reader::clear_percent_of_data_to_use() {
  percent_of_data_to_use_ = 0;
}
inline double Reader::percent_of_data_to_use() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.percent_of_data_to_use)
  return percent_of_data_to_use_;
}
inline void Reader::set_percent_of_data_to_use(double value) {
  
  percent_of_data_to_use_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Reader.percent_of_data_to_use)
}

// .lbann_data.ImagePreprocessor image_preprocessor = 13;
inline bool Reader::has_image_preprocessor() const {
  return this != internal_default_instance() && image_preprocessor_ != NULL;
}
inline void Reader::clear_image_preprocessor() {
  if (GetArenaNoVirtual() == NULL && image_preprocessor_ != NULL) delete image_preprocessor_;
  image_preprocessor_ = NULL;
}
inline const ::lbann_data::ImagePreprocessor& Reader::image_preprocessor() const {
  // @@protoc_insertion_point(field_get:lbann_data.Reader.image_preprocessor)
  return image_preprocessor_ != NULL ? *image_preprocessor_
                         : *::lbann_data::ImagePreprocessor::internal_default_instance();
}
inline ::lbann_data::ImagePreprocessor* Reader::mutable_image_preprocessor() {
  
  if (image_preprocessor_ == NULL) {
    image_preprocessor_ = new ::lbann_data::ImagePreprocessor;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Reader.image_preprocessor)
  return image_preprocessor_;
}
inline ::lbann_data::ImagePreprocessor* Reader::release_image_preprocessor() {
  // @@protoc_insertion_point(field_release:lbann_data.Reader.image_preprocessor)
  
  ::lbann_data::ImagePreprocessor* temp = image_preprocessor_;
  image_preprocessor_ = NULL;
  return temp;
}
inline void Reader::set_allocated_image_preprocessor(::lbann_data::ImagePreprocessor* image_preprocessor) {
  delete image_preprocessor_;
  image_preprocessor_ = image_preprocessor;
  if (image_preprocessor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Reader.image_preprocessor)
}

// -------------------------------------------------------------------

// ImagePreprocessor

// bool scale = 12;
inline void ImagePreprocessor::clear_scale() {
  scale_ = false;
}
inline bool ImagePreprocessor::scale() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.scale)
  return scale_;
}
inline void ImagePreprocessor::set_scale(bool value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.scale)
}

// bool subtract_mean = 13;
inline void ImagePreprocessor::clear_subtract_mean() {
  subtract_mean_ = false;
}
inline bool ImagePreprocessor::subtract_mean() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.subtract_mean)
  return subtract_mean_;
}
inline void ImagePreprocessor::set_subtract_mean(bool value) {
  
  subtract_mean_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.subtract_mean)
}

// bool unit_variance = 14;
inline void ImagePreprocessor::clear_unit_variance() {
  unit_variance_ = false;
}
inline bool ImagePreprocessor::unit_variance() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.unit_variance)
  return unit_variance_;
}
inline void ImagePreprocessor::set_unit_variance(bool value) {
  
  unit_variance_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.unit_variance)
}

// bool z_score = 15;
inline void ImagePreprocessor::clear_z_score() {
  z_score_ = false;
}
inline bool ImagePreprocessor::z_score() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.z_score)
  return z_score_;
}
inline void ImagePreprocessor::set_z_score(bool value) {
  
  z_score_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.z_score)
}

// bool horizontal_flip = 16;
inline void ImagePreprocessor::clear_horizontal_flip() {
  horizontal_flip_ = false;
}
inline bool ImagePreprocessor::horizontal_flip() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.horizontal_flip)
  return horizontal_flip_;
}
inline void ImagePreprocessor::set_horizontal_flip(bool value) {
  
  horizontal_flip_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.horizontal_flip)
}

// bool vertical_flip = 17;
inline void ImagePreprocessor::clear_vertical_flip() {
  vertical_flip_ = false;
}
inline bool ImagePreprocessor::vertical_flip() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.vertical_flip)
  return vertical_flip_;
}
inline void ImagePreprocessor::set_vertical_flip(bool value) {
  
  vertical_flip_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.vertical_flip)
}

// double rotation = 18;
inline void ImagePreprocessor::clear_rotation() {
  rotation_ = 0;
}
inline double ImagePreprocessor::rotation() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.rotation)
  return rotation_;
}
inline void ImagePreprocessor::set_rotation(double value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.rotation)
}

// double horizontal_shift = 19;
inline void ImagePreprocessor::clear_horizontal_shift() {
  horizontal_shift_ = 0;
}
inline double ImagePreprocessor::horizontal_shift() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.horizontal_shift)
  return horizontal_shift_;
}
inline void ImagePreprocessor::set_horizontal_shift(double value) {
  
  horizontal_shift_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.horizontal_shift)
}

// double vertical_shift = 20;
inline void ImagePreprocessor::clear_vertical_shift() {
  vertical_shift_ = 0;
}
inline double ImagePreprocessor::vertical_shift() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.vertical_shift)
  return vertical_shift_;
}
inline void ImagePreprocessor::set_vertical_shift(double value) {
  
  vertical_shift_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.vertical_shift)
}

// double shear_range = 21;
inline void ImagePreprocessor::clear_shear_range() {
  shear_range_ = 0;
}
inline double ImagePreprocessor::shear_range() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.shear_range)
  return shear_range_;
}
inline void ImagePreprocessor::set_shear_range(double value) {
  
  shear_range_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.shear_range)
}

// bool disable_augmentation = 22;
inline void ImagePreprocessor::clear_disable_augmentation() {
  disable_augmentation_ = false;
}
inline bool ImagePreprocessor::disable_augmentation() const {
  // @@protoc_insertion_point(field_get:lbann_data.ImagePreprocessor.disable_augmentation)
  return disable_augmentation_;
}
inline void ImagePreprocessor::set_disable_augmentation(bool value) {
  
  disable_augmentation_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.ImagePreprocessor.disable_augmentation)
}

// -------------------------------------------------------------------

// Model

// string name = 1;
inline void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.name)
  return name_.GetNoArena();
}
inline void Model::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.name)
}
#if LANG_CXX11
inline void Model::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Model.name)
}
#endif
inline void Model::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.name)
}
inline void Model::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.name)
}
inline ::std::string* Model::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.name)
}

// string objective_function = 2;
inline void Model::clear_objective_function() {
  objective_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Model::objective_function() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.objective_function)
  return objective_function_.GetNoArena();
}
inline void Model::set_objective_function(const ::std::string& value) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Model.objective_function)
}
#if LANG_CXX11
inline void Model::set_objective_function(::std::string&& value) {
  
  objective_function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Model.objective_function)
}
#endif
inline void Model::set_objective_function(const char* value) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.objective_function)
}
inline void Model::set_objective_function(const char* value, size_t size) {
  
  objective_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.objective_function)
}
inline ::std::string* Model::mutable_objective_function() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.objective_function)
  return objective_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Model::release_objective_function() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.objective_function)
  
  return objective_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_objective_function(::std::string* objective_function) {
  if (objective_function != NULL) {
    
  } else {
    
  }
  objective_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objective_function);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.objective_function)
}

// int32 mini_batch_size = 6;
inline void Model::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 Model::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.mini_batch_size)
  return mini_batch_size_;
}
inline void Model::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Model.mini_batch_size)
}

// int32 num_epochs = 4;
inline void Model::clear_num_epochs() {
  num_epochs_ = 0;
}
inline ::google::protobuf::int32 Model::num_epochs() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.num_epochs)
  return num_epochs_;
}
inline void Model::set_num_epochs(::google::protobuf::int32 value) {
  
  num_epochs_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Model.num_epochs)
}

// repeated string metric = 5;
inline int Model::metric_size() const {
  return metric_.size();
}
inline void Model::clear_metric() {
  metric_.Clear();
}
inline const ::std::string& Model::metric(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.metric)
  return metric_.Get(index);
}
inline ::std::string* Model::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.metric)
  return metric_.Mutable(index);
}
inline void Model::set_metric(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.Model.metric)
  metric_.Mutable(index)->assign(value);
}
inline void Model::set_metric(int index, const char* value) {
  metric_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.metric)
}
inline void Model::set_metric(int index, const char* value, size_t size) {
  metric_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.metric)
}
inline ::std::string* Model::add_metric() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.Model.metric)
  return metric_.Add();
}
inline void Model::add_metric(const ::std::string& value) {
  metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.Model.metric)
}
inline void Model::add_metric(const char* value) {
  metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.Model.metric)
}
inline void Model::add_metric(const char* value, size_t size) {
  metric_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.Model.metric)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::metric() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.metric)
  return metric_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.metric)
  return &metric_;
}

// repeated .lbann_data.Layer layer = 10;
inline int Model::layer_size() const {
  return layer_.size();
}
inline void Model::clear_layer() {
  layer_.Clear();
}
inline const ::lbann_data::Layer& Model::layer(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.layer)
  return layer_.Get(index);
}
inline ::lbann_data::Layer* Model::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.layer)
  return layer_.Mutable(index);
}
inline ::lbann_data::Layer* Model::add_layer() {
  // @@protoc_insertion_point(field_add:lbann_data.Model.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >*
Model::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::lbann_data::Layer >&
Model::layer() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.layer)
  return layer_;
}

// .lbann_data.Optimizer optimizer = 11;
inline bool Model::has_optimizer() const {
  return this != internal_default_instance() && optimizer_ != NULL;
}
inline void Model::clear_optimizer() {
  if (GetArenaNoVirtual() == NULL && optimizer_ != NULL) delete optimizer_;
  optimizer_ = NULL;
}
inline const ::lbann_data::Optimizer& Model::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.optimizer)
  return optimizer_ != NULL ? *optimizer_
                         : *::lbann_data::Optimizer::internal_default_instance();
}
inline ::lbann_data::Optimizer* Model::mutable_optimizer() {
  
  if (optimizer_ == NULL) {
    optimizer_ = new ::lbann_data::Optimizer;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.optimizer)
  return optimizer_;
}
inline ::lbann_data::Optimizer* Model::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.Model.optimizer)
  
  ::lbann_data::Optimizer* temp = optimizer_;
  optimizer_ = NULL;
  return temp;
}
inline void Model::set_allocated_optimizer(::lbann_data::Optimizer* optimizer) {
  delete optimizer_;
  optimizer_ = optimizer;
  if (optimizer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Model.optimizer)
}

// repeated string callback = 20;
inline int Model::callback_size() const {
  return callback_.size();
}
inline void Model::clear_callback() {
  callback_.Clear();
}
inline const ::std::string& Model::callback(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Model.callback)
  return callback_.Get(index);
}
inline ::std::string* Model::mutable_callback(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.Model.callback)
  return callback_.Mutable(index);
}
inline void Model::set_callback(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.Model.callback)
  callback_.Mutable(index)->assign(value);
}
inline void Model::set_callback(int index, const char* value) {
  callback_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.Model.callback)
}
inline void Model::set_callback(int index, const char* value, size_t size) {
  callback_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Model.callback)
}
inline ::std::string* Model::add_callback() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.Model.callback)
  return callback_.Add();
}
inline void Model::add_callback(const ::std::string& value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.Model.callback)
}
inline void Model::add_callback(const char* value) {
  callback_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.Model.callback)
}
inline void Model::add_callback(const char* value, size_t size) {
  callback_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.Model.callback)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::callback() const {
  // @@protoc_insertion_point(field_list:lbann_data.Model.callback)
  return callback_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_callback() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Model.callback)
  return &callback_;
}

// -------------------------------------------------------------------

// Optimizer

// string name = 1;
inline void Optimizer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Optimizer::name() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.name)
  return name_.GetNoArena();
}
inline void Optimizer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.name)
}
#if LANG_CXX11
inline void Optimizer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Optimizer.name)
}
#endif
inline void Optimizer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Optimizer.name)
}
inline void Optimizer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Optimizer.name)
}
inline ::std::string* Optimizer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Optimizer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Optimizer::release_name() {
  // @@protoc_insertion_point(field_release:lbann_data.Optimizer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Optimizer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Optimizer.name)
}

// double learn_rate = 2;
inline void Optimizer::clear_learn_rate() {
  learn_rate_ = 0;
}
inline double Optimizer::learn_rate() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.learn_rate)
  return learn_rate_;
}
inline void Optimizer::set_learn_rate(double value) {
  
  learn_rate_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.learn_rate)
}

// double momentum = 3;
inline void Optimizer::clear_momentum() {
  momentum_ = 0;
}
inline double Optimizer::momentum() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.momentum)
  return momentum_;
}
inline void Optimizer::set_momentum(double value) {
  
  momentum_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.momentum)
}

// double decay = 4;
inline void Optimizer::clear_decay() {
  decay_ = 0;
}
inline double Optimizer::decay() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.decay)
  return decay_;
}
inline void Optimizer::set_decay(double value) {
  
  decay_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.decay)
}

// bool nesterov = 5;
inline void Optimizer::clear_nesterov() {
  nesterov_ = false;
}
inline bool Optimizer::nesterov() const {
  // @@protoc_insertion_point(field_get:lbann_data.Optimizer.nesterov)
  return nesterov_;
}
inline void Optimizer::set_nesterov(bool value) {
  
  nesterov_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Optimizer.nesterov)
}

// -------------------------------------------------------------------

// Layer

// int32 index = 2;
inline void Layer::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Layer::index() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.index)
  return index_;
}
inline void Layer::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Layer.index)
}

// .lbann_data.InputDistributedMiniBatchParallelIO input_distributed_minibatch_parallel_io = 8;
inline bool Layer::has_input_distributed_minibatch_parallel_io() const {
  return this != internal_default_instance() && input_distributed_minibatch_parallel_io_ != NULL;
}
inline void Layer::clear_input_distributed_minibatch_parallel_io() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_parallel_io_ != NULL) delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
}
inline const ::lbann_data::InputDistributedMiniBatchParallelIO& Layer::input_distributed_minibatch_parallel_io() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_ != NULL ? *input_distributed_minibatch_parallel_io_
                         : *::lbann_data::InputDistributedMiniBatchParallelIO::internal_default_instance();
}
inline ::lbann_data::InputDistributedMiniBatchParallelIO* Layer::mutable_input_distributed_minibatch_parallel_io() {
  
  if (input_distributed_minibatch_parallel_io_ == NULL) {
    input_distributed_minibatch_parallel_io_ = new ::lbann_data::InputDistributedMiniBatchParallelIO;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  return input_distributed_minibatch_parallel_io_;
}
inline ::lbann_data::InputDistributedMiniBatchParallelIO* Layer::release_input_distributed_minibatch_parallel_io() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch_parallel_io)
  
  ::lbann_data::InputDistributedMiniBatchParallelIO* temp = input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = NULL;
  return temp;
}
inline void Layer::set_allocated_input_distributed_minibatch_parallel_io(::lbann_data::InputDistributedMiniBatchParallelIO* input_distributed_minibatch_parallel_io) {
  delete input_distributed_minibatch_parallel_io_;
  input_distributed_minibatch_parallel_io_ = input_distributed_minibatch_parallel_io;
  if (input_distributed_minibatch_parallel_io) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch_parallel_io)
}

// .lbann_data.InputDistributedMiniBatch input_distributed_minibatch = 9;
inline bool Layer::has_input_distributed_minibatch() const {
  return this != internal_default_instance() && input_distributed_minibatch_ != NULL;
}
inline void Layer::clear_input_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && input_distributed_minibatch_ != NULL) delete input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
}
inline const ::lbann_data::InputDistributedMiniBatch& Layer::input_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_ != NULL ? *input_distributed_minibatch_
                         : *::lbann_data::InputDistributedMiniBatch::internal_default_instance();
}
inline ::lbann_data::InputDistributedMiniBatch* Layer::mutable_input_distributed_minibatch() {
  
  if (input_distributed_minibatch_ == NULL) {
    input_distributed_minibatch_ = new ::lbann_data::InputDistributedMiniBatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input_distributed_minibatch)
  return input_distributed_minibatch_;
}
inline ::lbann_data::InputDistributedMiniBatch* Layer::release_input_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input_distributed_minibatch)
  
  ::lbann_data::InputDistributedMiniBatch* temp = input_distributed_minibatch_;
  input_distributed_minibatch_ = NULL;
  return temp;
}
inline void Layer::set_allocated_input_distributed_minibatch(::lbann_data::InputDistributedMiniBatch* input_distributed_minibatch) {
  delete input_distributed_minibatch_;
  input_distributed_minibatch_ = input_distributed_minibatch;
  if (input_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input_distributed_minibatch)
}

// .lbann_data.Input input = 10;
inline bool Layer::has_input() const {
  return this != internal_default_instance() && input_ != NULL;
}
inline void Layer::clear_input() {
  if (GetArenaNoVirtual() == NULL && input_ != NULL) delete input_;
  input_ = NULL;
}
inline const ::lbann_data::Input& Layer::input() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.input)
  return input_ != NULL ? *input_
                         : *::lbann_data::Input::internal_default_instance();
}
inline ::lbann_data::Input* Layer::mutable_input() {
  
  if (input_ == NULL) {
    input_ = new ::lbann_data::Input;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.input)
  return input_;
}
inline ::lbann_data::Input* Layer::release_input() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.input)
  
  ::lbann_data::Input* temp = input_;
  input_ = NULL;
  return temp;
}
inline void Layer::set_allocated_input(::lbann_data::Input* input) {
  delete input_;
  input_ = input;
  if (input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.input)
}

// .lbann_data.FullyConnected fully_connected = 11;
inline bool Layer::has_fully_connected() const {
  return this != internal_default_instance() && fully_connected_ != NULL;
}
inline void Layer::clear_fully_connected() {
  if (GetArenaNoVirtual() == NULL && fully_connected_ != NULL) delete fully_connected_;
  fully_connected_ = NULL;
}
inline const ::lbann_data::FullyConnected& Layer::fully_connected() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.fully_connected)
  return fully_connected_ != NULL ? *fully_connected_
                         : *::lbann_data::FullyConnected::internal_default_instance();
}
inline ::lbann_data::FullyConnected* Layer::mutable_fully_connected() {
  
  if (fully_connected_ == NULL) {
    fully_connected_ = new ::lbann_data::FullyConnected;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.fully_connected)
  return fully_connected_;
}
inline ::lbann_data::FullyConnected* Layer::release_fully_connected() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.fully_connected)
  
  ::lbann_data::FullyConnected* temp = fully_connected_;
  fully_connected_ = NULL;
  return temp;
}
inline void Layer::set_allocated_fully_connected(::lbann_data::FullyConnected* fully_connected) {
  delete fully_connected_;
  fully_connected_ = fully_connected;
  if (fully_connected) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.fully_connected)
}

// .lbann_data.Pooling pooling = 12;
inline bool Layer::has_pooling() const {
  return this != internal_default_instance() && pooling_ != NULL;
}
inline void Layer::clear_pooling() {
  if (GetArenaNoVirtual() == NULL && pooling_ != NULL) delete pooling_;
  pooling_ = NULL;
}
inline const ::lbann_data::Pooling& Layer::pooling() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.pooling)
  return pooling_ != NULL ? *pooling_
                         : *::lbann_data::Pooling::internal_default_instance();
}
inline ::lbann_data::Pooling* Layer::mutable_pooling() {
  
  if (pooling_ == NULL) {
    pooling_ = new ::lbann_data::Pooling;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.pooling)
  return pooling_;
}
inline ::lbann_data::Pooling* Layer::release_pooling() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.pooling)
  
  ::lbann_data::Pooling* temp = pooling_;
  pooling_ = NULL;
  return temp;
}
inline void Layer::set_allocated_pooling(::lbann_data::Pooling* pooling) {
  delete pooling_;
  pooling_ = pooling;
  if (pooling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.pooling)
}

// .lbann_data.Convolution convolution = 13;
inline bool Layer::has_convolution() const {
  return this != internal_default_instance() && convolution_ != NULL;
}
inline void Layer::clear_convolution() {
  if (GetArenaNoVirtual() == NULL && convolution_ != NULL) delete convolution_;
  convolution_ = NULL;
}
inline const ::lbann_data::Convolution& Layer::convolution() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.convolution)
  return convolution_ != NULL ? *convolution_
                         : *::lbann_data::Convolution::internal_default_instance();
}
inline ::lbann_data::Convolution* Layer::mutable_convolution() {
  
  if (convolution_ == NULL) {
    convolution_ = new ::lbann_data::Convolution;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.convolution)
  return convolution_;
}
inline ::lbann_data::Convolution* Layer::release_convolution() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.convolution)
  
  ::lbann_data::Convolution* temp = convolution_;
  convolution_ = NULL;
  return temp;
}
inline void Layer::set_allocated_convolution(::lbann_data::Convolution* convolution) {
  delete convolution_;
  convolution_ = convolution;
  if (convolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.convolution)
}

// .lbann_data.Softmax softmax = 14;
inline bool Layer::has_softmax() const {
  return this != internal_default_instance() && softmax_ != NULL;
}
inline void Layer::clear_softmax() {
  if (GetArenaNoVirtual() == NULL && softmax_ != NULL) delete softmax_;
  softmax_ = NULL;
}
inline const ::lbann_data::Softmax& Layer::softmax() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.softmax)
  return softmax_ != NULL ? *softmax_
                         : *::lbann_data::Softmax::internal_default_instance();
}
inline ::lbann_data::Softmax* Layer::mutable_softmax() {
  
  if (softmax_ == NULL) {
    softmax_ = new ::lbann_data::Softmax;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.softmax)
  return softmax_;
}
inline ::lbann_data::Softmax* Layer::release_softmax() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.softmax)
  
  ::lbann_data::Softmax* temp = softmax_;
  softmax_ = NULL;
  return temp;
}
inline void Layer::set_allocated_softmax(::lbann_data::Softmax* softmax) {
  delete softmax_;
  softmax_ = softmax;
  if (softmax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.softmax)
}

// .lbann_data.Target target = 15;
inline bool Layer::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline void Layer::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
inline const ::lbann_data::Target& Layer::target() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target)
  return target_ != NULL ? *target_
                         : *::lbann_data::Target::internal_default_instance();
}
inline ::lbann_data::Target* Layer::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::lbann_data::Target;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target)
  return target_;
}
inline ::lbann_data::Target* Layer::release_target() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target)
  
  ::lbann_data::Target* temp = target_;
  target_ = NULL;
  return temp;
}
inline void Layer::set_allocated_target(::lbann_data::Target* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target)
}

// .lbann_data.TargetParallel target_parallel = 16;
inline bool Layer::has_target_parallel() const {
  return this != internal_default_instance() && target_parallel_ != NULL;
}
inline void Layer::clear_target_parallel() {
  if (GetArenaNoVirtual() == NULL && target_parallel_ != NULL) delete target_parallel_;
  target_parallel_ = NULL;
}
inline const ::lbann_data::TargetParallel& Layer::target_parallel() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_parallel)
  return target_parallel_ != NULL ? *target_parallel_
                         : *::lbann_data::TargetParallel::internal_default_instance();
}
inline ::lbann_data::TargetParallel* Layer::mutable_target_parallel() {
  
  if (target_parallel_ == NULL) {
    target_parallel_ = new ::lbann_data::TargetParallel;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_parallel)
  return target_parallel_;
}
inline ::lbann_data::TargetParallel* Layer::release_target_parallel() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_parallel)
  
  ::lbann_data::TargetParallel* temp = target_parallel_;
  target_parallel_ = NULL;
  return temp;
}
inline void Layer::set_allocated_target_parallel(::lbann_data::TargetParallel* target_parallel) {
  delete target_parallel_;
  target_parallel_ = target_parallel;
  if (target_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_parallel)
}

// .lbann_data.TargetDistributedMinibatch target_distributed_minibatch = 17;
inline bool Layer::has_target_distributed_minibatch() const {
  return this != internal_default_instance() && target_distributed_minibatch_ != NULL;
}
inline void Layer::clear_target_distributed_minibatch() {
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_ != NULL) delete target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
}
inline const ::lbann_data::TargetDistributedMinibatch& Layer::target_distributed_minibatch() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_ != NULL ? *target_distributed_minibatch_
                         : *::lbann_data::TargetDistributedMinibatch::internal_default_instance();
}
inline ::lbann_data::TargetDistributedMinibatch* Layer::mutable_target_distributed_minibatch() {
  
  if (target_distributed_minibatch_ == NULL) {
    target_distributed_minibatch_ = new ::lbann_data::TargetDistributedMinibatch;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_distributed_minibatch)
  return target_distributed_minibatch_;
}
inline ::lbann_data::TargetDistributedMinibatch* Layer::release_target_distributed_minibatch() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_distributed_minibatch)
  
  ::lbann_data::TargetDistributedMinibatch* temp = target_distributed_minibatch_;
  target_distributed_minibatch_ = NULL;
  return temp;
}
inline void Layer::set_allocated_target_distributed_minibatch(::lbann_data::TargetDistributedMinibatch* target_distributed_minibatch) {
  delete target_distributed_minibatch_;
  target_distributed_minibatch_ = target_distributed_minibatch;
  if (target_distributed_minibatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_distributed_minibatch)
}

// .lbann_data.TargetDistributedMinibatchParallelIO target_distributed_minibatch_parallel_io = 18;
inline bool Layer::has_target_distributed_minibatch_parallel_io() const {
  return this != internal_default_instance() && target_distributed_minibatch_parallel_io_ != NULL;
}
inline void Layer::clear_target_distributed_minibatch_parallel_io() {
  if (GetArenaNoVirtual() == NULL && target_distributed_minibatch_parallel_io_ != NULL) delete target_distributed_minibatch_parallel_io_;
  target_distributed_minibatch_parallel_io_ = NULL;
}
inline const ::lbann_data::TargetDistributedMinibatchParallelIO& Layer::target_distributed_minibatch_parallel_io() const {
  // @@protoc_insertion_point(field_get:lbann_data.Layer.target_distributed_minibatch_parallel_io)
  return target_distributed_minibatch_parallel_io_ != NULL ? *target_distributed_minibatch_parallel_io_
                         : *::lbann_data::TargetDistributedMinibatchParallelIO::internal_default_instance();
}
inline ::lbann_data::TargetDistributedMinibatchParallelIO* Layer::mutable_target_distributed_minibatch_parallel_io() {
  
  if (target_distributed_minibatch_parallel_io_ == NULL) {
    target_distributed_minibatch_parallel_io_ = new ::lbann_data::TargetDistributedMinibatchParallelIO;
  }
  // @@protoc_insertion_point(field_mutable:lbann_data.Layer.target_distributed_minibatch_parallel_io)
  return target_distributed_minibatch_parallel_io_;
}
inline ::lbann_data::TargetDistributedMinibatchParallelIO* Layer::release_target_distributed_minibatch_parallel_io() {
  // @@protoc_insertion_point(field_release:lbann_data.Layer.target_distributed_minibatch_parallel_io)
  
  ::lbann_data::TargetDistributedMinibatchParallelIO* temp = target_distributed_minibatch_parallel_io_;
  target_distributed_minibatch_parallel_io_ = NULL;
  return temp;
}
inline void Layer::set_allocated_target_distributed_minibatch_parallel_io(::lbann_data::TargetDistributedMinibatchParallelIO* target_distributed_minibatch_parallel_io) {
  delete target_distributed_minibatch_parallel_io_;
  target_distributed_minibatch_parallel_io_ = target_distributed_minibatch_parallel_io;
  if (target_distributed_minibatch_parallel_io) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Layer.target_distributed_minibatch_parallel_io)
}

// -------------------------------------------------------------------

// Input

// int32 mini_batch_size = 1;
inline void Input::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 Input::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Input.mini_batch_size)
  return mini_batch_size_;
}
inline void Input::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Input.mini_batch_size)
}

// -------------------------------------------------------------------

// InputDistributedMiniBatchParallelIO

// int32 num_parallel_readers = 1;
inline void InputDistributedMiniBatchParallelIO::clear_num_parallel_readers() {
  num_parallel_readers_ = 0;
}
inline ::google::protobuf::int32 InputDistributedMiniBatchParallelIO::num_parallel_readers() const {
  // @@protoc_insertion_point(field_get:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
  return num_parallel_readers_;
}
inline void InputDistributedMiniBatchParallelIO::set_num_parallel_readers(::google::protobuf::int32 value) {
  
  num_parallel_readers_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.InputDistributedMiniBatchParallelIO.num_parallel_readers)
}

// int32 mini_batch_size = 2;
inline void InputDistributedMiniBatchParallelIO::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 InputDistributedMiniBatchParallelIO::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.InputDistributedMiniBatchParallelIO.mini_batch_size)
  return mini_batch_size_;
}
inline void InputDistributedMiniBatchParallelIO::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.InputDistributedMiniBatchParallelIO.mini_batch_size)
}

// -------------------------------------------------------------------

// InputDistributedMiniBatch

// -------------------------------------------------------------------

// FullyConnected

// int32 num_prev_neurons = 1;
inline void FullyConnected::clear_num_prev_neurons() {
  num_prev_neurons_ = 0;
}
inline ::google::protobuf::int32 FullyConnected::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_prev_neurons)
  return num_prev_neurons_;
}
inline void FullyConnected::set_num_prev_neurons(::google::protobuf::int32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_prev_neurons)
}

// int32 num_neurons = 2;
inline void FullyConnected::clear_num_neurons() {
  num_neurons_ = 0;
}
inline ::google::protobuf::int32 FullyConnected::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.num_neurons)
  return num_neurons_;
}
inline void FullyConnected::set_num_neurons(::google::protobuf::int32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.num_neurons)
}

// int32 mini_batch_size = 3;
inline void FullyConnected::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 FullyConnected::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.mini_batch_size)
  return mini_batch_size_;
}
inline void FullyConnected::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.mini_batch_size)
}

// string activation_type = 4;
inline void FullyConnected::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FullyConnected::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.activation_type)
  return activation_type_.GetNoArena();
}
inline void FullyConnected::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.activation_type)
}
#if LANG_CXX11
inline void FullyConnected::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.FullyConnected.activation_type)
}
#endif
inline void FullyConnected::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.activation_type)
}
inline void FullyConnected::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.activation_type)
}
inline ::std::string* FullyConnected::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FullyConnected::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FullyConnected::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.activation_type)
}

// string weight_initialization = 5;
inline void FullyConnected::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FullyConnected::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.weight_initialization)
  return weight_initialization_.GetNoArena();
}
inline void FullyConnected::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.weight_initialization)
}
#if LANG_CXX11
inline void FullyConnected::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.FullyConnected.weight_initialization)
}
#endif
inline void FullyConnected::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.weight_initialization)
}
inline void FullyConnected::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.weight_initialization)
}
inline ::std::string* FullyConnected::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FullyConnected::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FullyConnected::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.weight_initialization)
}

// string optimizer = 10;
inline void FullyConnected::clear_optimizer() {
  optimizer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FullyConnected::optimizer() const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.optimizer)
  return optimizer_.GetNoArena();
}
inline void FullyConnected::set_optimizer(const ::std::string& value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.optimizer)
}
#if LANG_CXX11
inline void FullyConnected::set_optimizer(::std::string&& value) {
  
  optimizer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.FullyConnected.optimizer)
}
#endif
inline void FullyConnected::set_optimizer(const char* value) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.optimizer)
}
inline void FullyConnected::set_optimizer(const char* value, size_t size) {
  
  optimizer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.optimizer)
}
inline ::std::string* FullyConnected::mutable_optimizer() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.optimizer)
  return optimizer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FullyConnected::release_optimizer() {
  // @@protoc_insertion_point(field_release:lbann_data.FullyConnected.optimizer)
  
  return optimizer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FullyConnected::set_allocated_optimizer(::std::string* optimizer) {
  if (optimizer != NULL) {
    
  } else {
    
  }
  optimizer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), optimizer);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.FullyConnected.optimizer)
}

// repeated string regularizer = 11;
inline int FullyConnected::regularizer_size() const {
  return regularizer_.size();
}
inline void FullyConnected::clear_regularizer() {
  regularizer_.Clear();
}
inline const ::std::string& FullyConnected::regularizer(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.FullyConnected.regularizer)
  return regularizer_.Get(index);
}
inline ::std::string* FullyConnected::mutable_regularizer(int index) {
  // @@protoc_insertion_point(field_mutable:lbann_data.FullyConnected.regularizer)
  return regularizer_.Mutable(index);
}
inline void FullyConnected::set_regularizer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lbann_data.FullyConnected.regularizer)
  regularizer_.Mutable(index)->assign(value);
}
inline void FullyConnected::set_regularizer(int index, const char* value) {
  regularizer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lbann_data.FullyConnected.regularizer)
}
inline void FullyConnected::set_regularizer(int index, const char* value, size_t size) {
  regularizer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lbann_data.FullyConnected.regularizer)
}
inline ::std::string* FullyConnected::add_regularizer() {
  // @@protoc_insertion_point(field_add_mutable:lbann_data.FullyConnected.regularizer)
  return regularizer_.Add();
}
inline void FullyConnected::add_regularizer(const ::std::string& value) {
  regularizer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lbann_data.FullyConnected.regularizer)
}
inline void FullyConnected::add_regularizer(const char* value) {
  regularizer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lbann_data.FullyConnected.regularizer)
}
inline void FullyConnected::add_regularizer(const char* value, size_t size) {
  regularizer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lbann_data.FullyConnected.regularizer)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FullyConnected::regularizer() const {
  // @@protoc_insertion_point(field_list:lbann_data.FullyConnected.regularizer)
  return regularizer_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FullyConnected::mutable_regularizer() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.FullyConnected.regularizer)
  return &regularizer_;
}

// -------------------------------------------------------------------

// Pooling

// int32 num_dims = 1;
inline void Pooling::clear_num_dims() {
  num_dims_ = 0;
}
inline ::google::protobuf::int32 Pooling::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_dims)
  return num_dims_;
}
inline void Pooling::set_num_dims(::google::protobuf::int32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_dims)
}

// int32 num_channels = 2;
inline void Pooling::clear_num_channels() {
  num_channels_ = 0;
}
inline ::google::protobuf::int32 Pooling::num_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.num_channels)
  return num_channels_;
}
inline void Pooling::set_num_channels(::google::protobuf::int32 value) {
  
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.num_channels)
}

// repeated int32 input_dims = 3;
inline int Pooling::input_dims_size() const {
  return input_dims_.size();
}
inline void Pooling::clear_input_dims() {
  input_dims_.Clear();
}
inline ::google::protobuf::int32 Pooling::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.input_dims)
  return input_dims_.Get(index);
}
inline void Pooling::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.input_dims)
}
inline void Pooling::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.input_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.input_dims)
  return input_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.input_dims)
  return &input_dims_;
}

// repeated int32 pool_dims = 4;
inline int Pooling::pool_dims_size() const {
  return pool_dims_.size();
}
inline void Pooling::clear_pool_dims() {
  pool_dims_.Clear();
}
inline ::google::protobuf::int32 Pooling::pool_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_dims)
  return pool_dims_.Get(index);
}
inline void Pooling::set_pool_dims(int index, ::google::protobuf::int32 value) {
  pool_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_dims)
}
inline void Pooling::add_pool_dims(::google::protobuf::int32 value) {
  pool_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_dims)
  return pool_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_dims)
  return &pool_dims_;
}

// repeated int32 pool_pads = 5;
inline int Pooling::pool_pads_size() const {
  return pool_pads_.size();
}
inline void Pooling::clear_pool_pads() {
  pool_pads_.Clear();
}
inline ::google::protobuf::int32 Pooling::pool_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_pads)
  return pool_pads_.Get(index);
}
inline void Pooling::set_pool_pads(int index, ::google::protobuf::int32 value) {
  pool_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_pads)
}
inline void Pooling::add_pool_pads(::google::protobuf::int32 value) {
  pool_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_pads)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_pads)
  return pool_pads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_pads)
  return &pool_pads_;
}

// repeated int32 pool_strides = 6;
inline int Pooling::pool_strides_size() const {
  return pool_strides_.size();
}
inline void Pooling::clear_pool_strides() {
  pool_strides_.Clear();
}
inline ::google::protobuf::int32 Pooling::pool_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_strides)
  return pool_strides_.Get(index);
}
inline void Pooling::set_pool_strides(int index, ::google::protobuf::int32 value) {
  pool_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_strides)
}
inline void Pooling::add_pool_strides(::google::protobuf::int32 value) {
  pool_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Pooling.pool_strides)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Pooling::pool_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Pooling.pool_strides)
  return pool_strides_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Pooling::mutable_pool_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Pooling.pool_strides)
  return &pool_strides_;
}

// string pool_mode = 7;
inline void Pooling::clear_pool_mode() {
  pool_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pooling::pool_mode() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.pool_mode)
  return pool_mode_.GetNoArena();
}
inline void Pooling::set_pool_mode(const ::std::string& value) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.pool_mode)
}
#if LANG_CXX11
inline void Pooling::set_pool_mode(::std::string&& value) {
  
  pool_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Pooling.pool_mode)
}
#endif
inline void Pooling::set_pool_mode(const char* value) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Pooling.pool_mode)
}
inline void Pooling::set_pool_mode(const char* value, size_t size) {
  
  pool_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Pooling.pool_mode)
}
inline ::std::string* Pooling::mutable_pool_mode() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Pooling.pool_mode)
  return pool_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pooling::release_pool_mode() {
  // @@protoc_insertion_point(field_release:lbann_data.Pooling.pool_mode)
  
  return pool_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pooling::set_allocated_pool_mode(::std::string* pool_mode) {
  if (pool_mode != NULL) {
    
  } else {
    
  }
  pool_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pool_mode);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Pooling.pool_mode)
}

// string activation_type = 8;
inline void Pooling::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pooling::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Pooling.activation_type)
  return activation_type_.GetNoArena();
}
inline void Pooling::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Pooling.activation_type)
}
#if LANG_CXX11
inline void Pooling::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Pooling.activation_type)
}
#endif
inline void Pooling::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Pooling.activation_type)
}
inline void Pooling::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Pooling.activation_type)
}
inline ::std::string* Pooling::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Pooling.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pooling::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Pooling.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pooling::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Pooling.activation_type)
}

// -------------------------------------------------------------------

// Convolution

// int32 num_dims = 1;
inline void Convolution::clear_num_dims() {
  num_dims_ = 0;
}
inline ::google::protobuf::int32 Convolution::num_dims() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_dims)
  return num_dims_;
}
inline void Convolution::set_num_dims(::google::protobuf::int32 value) {
  
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_dims)
}

// int32 num_input_channels = 2;
inline void Convolution::clear_num_input_channels() {
  num_input_channels_ = 0;
}
inline ::google::protobuf::int32 Convolution::num_input_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_input_channels)
  return num_input_channels_;
}
inline void Convolution::set_num_input_channels(::google::protobuf::int32 value) {
  
  num_input_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_input_channels)
}

// repeated int32 input_dims = 3;
inline int Convolution::input_dims_size() const {
  return input_dims_.size();
}
inline void Convolution::clear_input_dims() {
  input_dims_.Clear();
}
inline ::google::protobuf::int32 Convolution::input_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.input_dims)
  return input_dims_.Get(index);
}
inline void Convolution::set_input_dims(int index, ::google::protobuf::int32 value) {
  input_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.input_dims)
}
inline void Convolution::add_input_dims(::google::protobuf::int32 value) {
  input_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.input_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::input_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.input_dims)
  return input_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_input_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.input_dims)
  return &input_dims_;
}

// int32 num_output_channels = 4;
inline void Convolution::clear_num_output_channels() {
  num_output_channels_ = 0;
}
inline ::google::protobuf::int32 Convolution::num_output_channels() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.num_output_channels)
  return num_output_channels_;
}
inline void Convolution::set_num_output_channels(::google::protobuf::int32 value) {
  
  num_output_channels_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.num_output_channels)
}

// repeated int32 filter_dims = 5;
inline int Convolution::filter_dims_size() const {
  return filter_dims_.size();
}
inline void Convolution::clear_filter_dims() {
  filter_dims_.Clear();
}
inline ::google::protobuf::int32 Convolution::filter_dims(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.filter_dims)
  return filter_dims_.Get(index);
}
inline void Convolution::set_filter_dims(int index, ::google::protobuf::int32 value) {
  filter_dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.filter_dims)
}
inline void Convolution::add_filter_dims(::google::protobuf::int32 value) {
  filter_dims_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.filter_dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::filter_dims() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.filter_dims)
  return filter_dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_filter_dims() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.filter_dims)
  return &filter_dims_;
}

// repeated int32 conv_pads = 6;
inline int Convolution::conv_pads_size() const {
  return conv_pads_.size();
}
inline void Convolution::clear_conv_pads() {
  conv_pads_.Clear();
}
inline ::google::protobuf::int32 Convolution::conv_pads(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_pads)
  return conv_pads_.Get(index);
}
inline void Convolution::set_conv_pads(int index, ::google::protobuf::int32 value) {
  conv_pads_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_pads)
}
inline void Convolution::add_conv_pads(::google::protobuf::int32 value) {
  conv_pads_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_pads)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::conv_pads() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_pads)
  return conv_pads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_conv_pads() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_pads)
  return &conv_pads_;
}

// repeated int32 conv_strides = 7;
inline int Convolution::conv_strides_size() const {
  return conv_strides_.size();
}
inline void Convolution::clear_conv_strides() {
  conv_strides_.Clear();
}
inline ::google::protobuf::int32 Convolution::conv_strides(int index) const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.conv_strides)
  return conv_strides_.Get(index);
}
inline void Convolution::set_conv_strides(int index, ::google::protobuf::int32 value) {
  conv_strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.conv_strides)
}
inline void Convolution::add_conv_strides(::google::protobuf::int32 value) {
  conv_strides_.Add(value);
  // @@protoc_insertion_point(field_add:lbann_data.Convolution.conv_strides)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Convolution::conv_strides() const {
  // @@protoc_insertion_point(field_list:lbann_data.Convolution.conv_strides)
  return conv_strides_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Convolution::mutable_conv_strides() {
  // @@protoc_insertion_point(field_mutable_list:lbann_data.Convolution.conv_strides)
  return &conv_strides_;
}

// int32 mini_batch_size = 8;
inline void Convolution::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 Convolution::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.mini_batch_size)
  return mini_batch_size_;
}
inline void Convolution::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.mini_batch_size)
}

// string weight_initialization = 9;
inline void Convolution::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Convolution::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.weight_initialization)
  return weight_initialization_.GetNoArena();
}
inline void Convolution::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.weight_initialization)
}
#if LANG_CXX11
inline void Convolution::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Convolution.weight_initialization)
}
#endif
inline void Convolution::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Convolution.weight_initialization)
}
inline void Convolution::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Convolution.weight_initialization)
}
inline ::std::string* Convolution::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Convolution.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Convolution::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.Convolution.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Convolution::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Convolution.weight_initialization)
}

// string activation_type = 10;
inline void Convolution::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Convolution::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Convolution.activation_type)
  return activation_type_.GetNoArena();
}
inline void Convolution::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Convolution.activation_type)
}
#if LANG_CXX11
inline void Convolution::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Convolution.activation_type)
}
#endif
inline void Convolution::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Convolution.activation_type)
}
inline void Convolution::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Convolution.activation_type)
}
inline ::std::string* Convolution::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Convolution.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Convolution::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Convolution.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Convolution::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Convolution.activation_type)
}

// -------------------------------------------------------------------

// Softmax

// int32 num_prev_neurons = 1;
inline void Softmax::clear_num_prev_neurons() {
  num_prev_neurons_ = 0;
}
inline ::google::protobuf::int32 Softmax::num_prev_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_prev_neurons)
  return num_prev_neurons_;
}
inline void Softmax::set_num_prev_neurons(::google::protobuf::int32 value) {
  
  num_prev_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_prev_neurons)
}

// int32 num_neurons = 2;
inline void Softmax::clear_num_neurons() {
  num_neurons_ = 0;
}
inline ::google::protobuf::int32 Softmax::num_neurons() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.num_neurons)
  return num_neurons_;
}
inline void Softmax::set_num_neurons(::google::protobuf::int32 value) {
  
  num_neurons_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.num_neurons)
}

// string weight_initialization = 3;
inline void Softmax::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Softmax::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.weight_initialization)
  return weight_initialization_.GetNoArena();
}
inline void Softmax::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.weight_initialization)
}
#if LANG_CXX11
inline void Softmax::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Softmax.weight_initialization)
}
#endif
inline void Softmax::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Softmax.weight_initialization)
}
inline void Softmax::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Softmax.weight_initialization)
}
inline ::std::string* Softmax::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Softmax.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Softmax::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.Softmax.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Softmax::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Softmax.weight_initialization)
}

// string activation_type = 4;
inline void Softmax::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Softmax::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.Softmax.activation_type)
  return activation_type_.GetNoArena();
}
inline void Softmax::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.Softmax.activation_type)
}
#if LANG_CXX11
inline void Softmax::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.Softmax.activation_type)
}
#endif
inline void Softmax::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.Softmax.activation_type)
}
inline void Softmax::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.Softmax.activation_type)
}
inline ::std::string* Softmax::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.Softmax.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Softmax::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.Softmax.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Softmax::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.Softmax.activation_type)
}

// -------------------------------------------------------------------

// Target

// -------------------------------------------------------------------

// TargetParallel

// -------------------------------------------------------------------

// TargetDistributedMinibatch

// -------------------------------------------------------------------

// TargetDistributedMinibatchParallelIO

// int32 num_parallel_readers = 1;
inline void TargetDistributedMinibatchParallelIO::clear_num_parallel_readers() {
  num_parallel_readers_ = 0;
}
inline ::google::protobuf::int32 TargetDistributedMinibatchParallelIO::num_parallel_readers() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.num_parallel_readers)
  return num_parallel_readers_;
}
inline void TargetDistributedMinibatchParallelIO::set_num_parallel_readers(::google::protobuf::int32 value) {
  
  num_parallel_readers_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.num_parallel_readers)
}

// int32 mini_batch_size = 2;
inline void TargetDistributedMinibatchParallelIO::clear_mini_batch_size() {
  mini_batch_size_ = 0;
}
inline ::google::protobuf::int32 TargetDistributedMinibatchParallelIO::mini_batch_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.mini_batch_size)
  return mini_batch_size_;
}
inline void TargetDistributedMinibatchParallelIO::set_mini_batch_size(::google::protobuf::int32 value) {
  
  mini_batch_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.mini_batch_size)
}

// bool shared_data_reader = 3;
inline void TargetDistributedMinibatchParallelIO::clear_shared_data_reader() {
  shared_data_reader_ = false;
}
inline bool TargetDistributedMinibatchParallelIO::shared_data_reader() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.shared_data_reader)
  return shared_data_reader_;
}
inline void TargetDistributedMinibatchParallelIO::set_shared_data_reader(bool value) {
  
  shared_data_reader_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.shared_data_reader)
}

// bool for_regression = 4;
inline void TargetDistributedMinibatchParallelIO::clear_for_regression() {
  for_regression_ = false;
}
inline bool TargetDistributedMinibatchParallelIO::for_regression() const {
  // @@protoc_insertion_point(field_get:lbann_data.TargetDistributedMinibatchParallelIO.for_regression)
  return for_regression_;
}
inline void TargetDistributedMinibatchParallelIO::set_for_regression(bool value) {
  
  for_regression_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TargetDistributedMinibatchParallelIO.for_regression)
}

// -------------------------------------------------------------------

// SystemParams

// string host_name = 1;
inline void SystemParams::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemParams::host_name() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.host_name)
  return host_name_.GetNoArena();
}
inline void SystemParams::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.host_name)
}
#if LANG_CXX11
inline void SystemParams::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.SystemParams.host_name)
}
#endif
inline void SystemParams::set_host_name(const char* value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.SystemParams.host_name)
}
inline void SystemParams::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.SystemParams.host_name)
}
inline ::std::string* SystemParams::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.SystemParams.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemParams::release_host_name() {
  // @@protoc_insertion_point(field_release:lbann_data.SystemParams.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemParams::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.SystemParams.host_name)
}

// int32 num_nodes = 2;
inline void SystemParams::clear_num_nodes() {
  num_nodes_ = 0;
}
inline ::google::protobuf::int32 SystemParams::num_nodes() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.num_nodes)
  return num_nodes_;
}
inline void SystemParams::set_num_nodes(::google::protobuf::int32 value) {
  
  num_nodes_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.num_nodes)
}

// int32 num_cores = 3;
inline void SystemParams::clear_num_cores() {
  num_cores_ = 0;
}
inline ::google::protobuf::int32 SystemParams::num_cores() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.num_cores)
  return num_cores_;
}
inline void SystemParams::set_num_cores(::google::protobuf::int32 value) {
  
  num_cores_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.num_cores)
}

// int32 tasks_per_node = 4;
inline void SystemParams::clear_tasks_per_node() {
  tasks_per_node_ = 0;
}
inline ::google::protobuf::int32 SystemParams::tasks_per_node() const {
  // @@protoc_insertion_point(field_get:lbann_data.SystemParams.tasks_per_node)
  return tasks_per_node_;
}
inline void SystemParams::set_tasks_per_node(::google::protobuf::int32 value) {
  
  tasks_per_node_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.SystemParams.tasks_per_node)
}

// -------------------------------------------------------------------

// NetworkParams

// string network_str = 1;
inline void NetworkParams::clear_network_str() {
  network_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkParams::network_str() const {
  // @@protoc_insertion_point(field_get:lbann_data.NetworkParams.network_str)
  return network_str_.GetNoArena();
}
inline void NetworkParams::set_network_str(const ::std::string& value) {
  
  network_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.NetworkParams.network_str)
}
#if LANG_CXX11
inline void NetworkParams::set_network_str(::std::string&& value) {
  
  network_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.NetworkParams.network_str)
}
#endif
inline void NetworkParams::set_network_str(const char* value) {
  
  network_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.NetworkParams.network_str)
}
inline void NetworkParams::set_network_str(const char* value, size_t size) {
  
  network_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.NetworkParams.network_str)
}
inline ::std::string* NetworkParams::mutable_network_str() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.NetworkParams.network_str)
  return network_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkParams::release_network_str() {
  // @@protoc_insertion_point(field_release:lbann_data.NetworkParams.network_str)
  
  return network_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkParams::set_allocated_network_str(::std::string* network_str) {
  if (network_str != NULL) {
    
  } else {
    
  }
  network_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_str);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.NetworkParams.network_str)
}

// -------------------------------------------------------------------

// PerformanceParams

// int32 block_size = 1;
inline void PerformanceParams::clear_block_size() {
  block_size_ = 0;
}
inline ::google::protobuf::int32 PerformanceParams::block_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.PerformanceParams.block_size)
  return block_size_;
}
inline void PerformanceParams::set_block_size(::google::protobuf::int32 value) {
  
  block_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.PerformanceParams.block_size)
}

// int32 max_par_io_size = 2;
inline void PerformanceParams::clear_max_par_io_size() {
  max_par_io_size_ = 0;
}
inline ::google::protobuf::int32 PerformanceParams::max_par_io_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.PerformanceParams.max_par_io_size)
  return max_par_io_size_;
}
inline void PerformanceParams::set_max_par_io_size(::google::protobuf::int32 value) {
  
  max_par_io_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.PerformanceParams.max_par_io_size)
}

// -------------------------------------------------------------------

// TrainingParams

// bool enable_profiling = 1;
inline void TrainingParams::clear_enable_profiling() {
  enable_profiling_ = false;
}
inline bool TrainingParams::enable_profiling() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.enable_profiling)
  return enable_profiling_;
}
inline void TrainingParams::set_enable_profiling(bool value) {
  
  enable_profiling_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.enable_profiling)
}

// int32 random_seed = 2;
inline void TrainingParams::clear_random_seed() {
  random_seed_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::random_seed() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.random_seed)
  return random_seed_;
}
inline void TrainingParams::set_random_seed(::google::protobuf::int32 value) {
  
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.random_seed)
}

// int32 shuffle_training_data = 3;
inline void TrainingParams::clear_shuffle_training_data() {
  shuffle_training_data_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::shuffle_training_data() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.shuffle_training_data)
  return shuffle_training_data_;
}
inline void TrainingParams::set_shuffle_training_data(::google::protobuf::int32 value) {
  
  shuffle_training_data_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.shuffle_training_data)
}

// double percentage_training_samples = 4;
inline void TrainingParams::clear_percentage_training_samples() {
  percentage_training_samples_ = 0;
}
inline double TrainingParams::percentage_training_samples() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.percentage_training_samples)
  return percentage_training_samples_;
}
inline void TrainingParams::set_percentage_training_samples(double value) {
  
  percentage_training_samples_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.percentage_training_samples)
}

// double percentage_validation_samples = 5;
inline void TrainingParams::clear_percentage_validation_samples() {
  percentage_validation_samples_ = 0;
}
inline double TrainingParams::percentage_validation_samples() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.percentage_validation_samples)
  return percentage_validation_samples_;
}
inline void TrainingParams::set_percentage_validation_samples(double value) {
  
  percentage_validation_samples_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.percentage_validation_samples)
}

// double percentage_testing_samples = 6;
inline void TrainingParams::clear_percentage_testing_samples() {
  percentage_testing_samples_ = 0;
}
inline double TrainingParams::percentage_testing_samples() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.percentage_testing_samples)
  return percentage_testing_samples_;
}
inline void TrainingParams::set_percentage_testing_samples(double value) {
  
  percentage_testing_samples_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.percentage_testing_samples)
}

// int32 test_with_train_data = 7;
inline void TrainingParams::clear_test_with_train_data() {
  test_with_train_data_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::test_with_train_data() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.test_with_train_data)
  return test_with_train_data_;
}
inline void TrainingParams::set_test_with_train_data(::google::protobuf::int32 value) {
  
  test_with_train_data_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.test_with_train_data)
}

// int32 epoch_start = 8;
inline void TrainingParams::clear_epoch_start() {
  epoch_start_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::epoch_start() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.epoch_start)
  return epoch_start_;
}
inline void TrainingParams::set_epoch_start(::google::protobuf::int32 value) {
  
  epoch_start_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.epoch_start)
}

// int32 epoch_count = 9;
inline void TrainingParams::clear_epoch_count() {
  epoch_count_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::epoch_count() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.epoch_count)
  return epoch_count_;
}
inline void TrainingParams::set_epoch_count(::google::protobuf::int32 value) {
  
  epoch_count_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.epoch_count)
}

// int32 mb_size = 10;
inline void TrainingParams::clear_mb_size() {
  mb_size_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::mb_size() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.mb_size)
  return mb_size_;
}
inline void TrainingParams::set_mb_size(::google::protobuf::int32 value) {
  
  mb_size_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.mb_size)
}

// double learn_rate = 11;
inline void TrainingParams::clear_learn_rate() {
  learn_rate_ = 0;
}
inline double TrainingParams::learn_rate() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.learn_rate)
  return learn_rate_;
}
inline void TrainingParams::set_learn_rate(double value) {
  
  learn_rate_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.learn_rate)
}

// int32 learn_rate_method = 12;
inline void TrainingParams::clear_learn_rate_method() {
  learn_rate_method_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::learn_rate_method() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.learn_rate_method)
  return learn_rate_method_;
}
inline void TrainingParams::set_learn_rate_method(::google::protobuf::int32 value) {
  
  learn_rate_method_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.learn_rate_method)
}

// double lr_decay_rate = 13;
inline void TrainingParams::clear_lr_decay_rate() {
  lr_decay_rate_ = 0;
}
inline double TrainingParams::lr_decay_rate() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lr_decay_rate)
  return lr_decay_rate_;
}
inline void TrainingParams::set_lr_decay_rate(double value) {
  
  lr_decay_rate_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lr_decay_rate)
}

// int32 lr_decay_cycles = 14;
inline void TrainingParams::clear_lr_decay_cycles() {
  lr_decay_cycles_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::lr_decay_cycles() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lr_decay_cycles)
  return lr_decay_cycles_;
}
inline void TrainingParams::set_lr_decay_cycles(::google::protobuf::int32 value) {
  
  lr_decay_cycles_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lr_decay_cycles)
}

// double lr_momentum = 15;
inline void TrainingParams::clear_lr_momentum() {
  lr_momentum_ = 0;
}
inline double TrainingParams::lr_momentum() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lr_momentum)
  return lr_momentum_;
}
inline void TrainingParams::set_lr_momentum(double value) {
  
  lr_momentum_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lr_momentum)
}

// string activation_type = 16;
inline void TrainingParams::clear_activation_type() {
  activation_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::activation_type() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.activation_type)
  return activation_type_.GetNoArena();
}
inline void TrainingParams::set_activation_type(const ::std::string& value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.activation_type)
}
#if LANG_CXX11
inline void TrainingParams::set_activation_type(::std::string&& value) {
  
  activation_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.activation_type)
}
#endif
inline void TrainingParams::set_activation_type(const char* value) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.activation_type)
}
inline void TrainingParams::set_activation_type(const char* value, size_t size) {
  
  activation_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.activation_type)
}
inline ::std::string* TrainingParams::mutable_activation_type() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.activation_type)
  return activation_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_activation_type() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.activation_type)
  
  return activation_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_activation_type(::std::string* activation_type) {
  if (activation_type != NULL) {
    
  } else {
    
  }
  activation_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), activation_type);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.activation_type)
}

// double dropout = 17;
inline void TrainingParams::clear_dropout() {
  dropout_ = 0;
}
inline double TrainingParams::dropout() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dropout)
  return dropout_;
}
inline void TrainingParams::set_dropout(double value) {
  
  dropout_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dropout)
}

// double lambda = 18;
inline void TrainingParams::clear_lambda() {
  lambda_ = 0;
}
inline double TrainingParams::lambda() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.lambda)
  return lambda_;
}
inline void TrainingParams::set_lambda(double value) {
  
  lambda_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.lambda)
}

// string weight_initialization = 19;
inline void TrainingParams::clear_weight_initialization() {
  weight_initialization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::weight_initialization() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.weight_initialization)
  return weight_initialization_.GetNoArena();
}
inline void TrainingParams::set_weight_initialization(const ::std::string& value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.weight_initialization)
}
#if LANG_CXX11
inline void TrainingParams::set_weight_initialization(::std::string&& value) {
  
  weight_initialization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.weight_initialization)
}
#endif
inline void TrainingParams::set_weight_initialization(const char* value) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.weight_initialization)
}
inline void TrainingParams::set_weight_initialization(const char* value, size_t size) {
  
  weight_initialization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.weight_initialization)
}
inline ::std::string* TrainingParams::mutable_weight_initialization() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.weight_initialization)
  return weight_initialization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_weight_initialization() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.weight_initialization)
  
  return weight_initialization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_weight_initialization(::std::string* weight_initialization) {
  if (weight_initialization != NULL) {
    
  } else {
    
  }
  weight_initialization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_initialization);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.weight_initialization)
}

// string dataset_root_dir = 20;
inline void TrainingParams::clear_dataset_root_dir() {
  dataset_root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::dataset_root_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dataset_root_dir)
  return dataset_root_dir_.GetNoArena();
}
inline void TrainingParams::set_dataset_root_dir(const ::std::string& value) {
  
  dataset_root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dataset_root_dir)
}
#if LANG_CXX11
inline void TrainingParams::set_dataset_root_dir(::std::string&& value) {
  
  dataset_root_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.dataset_root_dir)
}
#endif
inline void TrainingParams::set_dataset_root_dir(const char* value) {
  
  dataset_root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.dataset_root_dir)
}
inline void TrainingParams::set_dataset_root_dir(const char* value, size_t size) {
  
  dataset_root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.dataset_root_dir)
}
inline ::std::string* TrainingParams::mutable_dataset_root_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.dataset_root_dir)
  return dataset_root_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_dataset_root_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.dataset_root_dir)
  
  return dataset_root_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_dataset_root_dir(::std::string* dataset_root_dir) {
  if (dataset_root_dir != NULL) {
    
  } else {
    
  }
  dataset_root_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_root_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.dataset_root_dir)
}

// string save_image_dir = 21;
inline void TrainingParams::clear_save_image_dir() {
  save_image_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::save_image_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.save_image_dir)
  return save_image_dir_.GetNoArena();
}
inline void TrainingParams::set_save_image_dir(const ::std::string& value) {
  
  save_image_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.save_image_dir)
}
#if LANG_CXX11
inline void TrainingParams::set_save_image_dir(::std::string&& value) {
  
  save_image_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.save_image_dir)
}
#endif
inline void TrainingParams::set_save_image_dir(const char* value) {
  
  save_image_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.save_image_dir)
}
inline void TrainingParams::set_save_image_dir(const char* value, size_t size) {
  
  save_image_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.save_image_dir)
}
inline ::std::string* TrainingParams::mutable_save_image_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.save_image_dir)
  return save_image_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_save_image_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.save_image_dir)
  
  return save_image_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_save_image_dir(::std::string* save_image_dir) {
  if (save_image_dir != NULL) {
    
  } else {
    
  }
  save_image_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_image_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.save_image_dir)
}

// string parameter_dir = 22;
inline void TrainingParams::clear_parameter_dir() {
  parameter_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::parameter_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.parameter_dir)
  return parameter_dir_.GetNoArena();
}
inline void TrainingParams::set_parameter_dir(const ::std::string& value) {
  
  parameter_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.parameter_dir)
}
#if LANG_CXX11
inline void TrainingParams::set_parameter_dir(::std::string&& value) {
  
  parameter_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.parameter_dir)
}
#endif
inline void TrainingParams::set_parameter_dir(const char* value) {
  
  parameter_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.parameter_dir)
}
inline void TrainingParams::set_parameter_dir(const char* value, size_t size) {
  
  parameter_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.parameter_dir)
}
inline ::std::string* TrainingParams::mutable_parameter_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.parameter_dir)
  return parameter_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_parameter_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.parameter_dir)
  
  return parameter_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_parameter_dir(::std::string* parameter_dir) {
  if (parameter_dir != NULL) {
    
  } else {
    
  }
  parameter_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.parameter_dir)
}

// bool save_model = 23;
inline void TrainingParams::clear_save_model() {
  save_model_ = false;
}
inline bool TrainingParams::save_model() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.save_model)
  return save_model_;
}
inline void TrainingParams::set_save_model(bool value) {
  
  save_model_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.save_model)
}

// bool load_model = 24;
inline void TrainingParams::clear_load_model() {
  load_model_ = false;
}
inline bool TrainingParams::load_model() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.load_model)
  return load_model_;
}
inline void TrainingParams::set_load_model(bool value) {
  
  load_model_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.load_model)
}

// int32 ckpt_epochs = 25;
inline void TrainingParams::clear_ckpt_epochs() {
  ckpt_epochs_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::ckpt_epochs() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.ckpt_epochs)
  return ckpt_epochs_;
}
inline void TrainingParams::set_ckpt_epochs(::google::protobuf::int32 value) {
  
  ckpt_epochs_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.ckpt_epochs)
}

// int32 ckpt_steps = 26;
inline void TrainingParams::clear_ckpt_steps() {
  ckpt_steps_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::ckpt_steps() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.ckpt_steps)
  return ckpt_steps_;
}
inline void TrainingParams::set_ckpt_steps(::google::protobuf::int32 value) {
  
  ckpt_steps_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.ckpt_steps)
}

// int32 ckpt_secs = 27;
inline void TrainingParams::clear_ckpt_secs() {
  ckpt_secs_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::ckpt_secs() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.ckpt_secs)
  return ckpt_secs_;
}
inline void TrainingParams::set_ckpt_secs(::google::protobuf::int32 value) {
  
  ckpt_secs_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.ckpt_secs)
}

// string train_file = 28;
inline void TrainingParams::clear_train_file() {
  train_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::train_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.train_file)
  return train_file_.GetNoArena();
}
inline void TrainingParams::set_train_file(const ::std::string& value) {
  
  train_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.train_file)
}
#if LANG_CXX11
inline void TrainingParams::set_train_file(::std::string&& value) {
  
  train_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.train_file)
}
#endif
inline void TrainingParams::set_train_file(const char* value) {
  
  train_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.train_file)
}
inline void TrainingParams::set_train_file(const char* value, size_t size) {
  
  train_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.train_file)
}
inline ::std::string* TrainingParams::mutable_train_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.train_file)
  return train_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_train_file() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.train_file)
  
  return train_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_train_file(::std::string* train_file) {
  if (train_file != NULL) {
    
  } else {
    
  }
  train_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.train_file)
}

// string test_file = 29;
inline void TrainingParams::clear_test_file() {
  test_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::test_file() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.test_file)
  return test_file_.GetNoArena();
}
inline void TrainingParams::set_test_file(const ::std::string& value) {
  
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.test_file)
}
#if LANG_CXX11
inline void TrainingParams::set_test_file(::std::string&& value) {
  
  test_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.test_file)
}
#endif
inline void TrainingParams::set_test_file(const char* value) {
  
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.test_file)
}
inline void TrainingParams::set_test_file(const char* value, size_t size) {
  
  test_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.test_file)
}
inline ::std::string* TrainingParams::mutable_test_file() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.test_file)
  return test_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_test_file() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.test_file)
  
  return test_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_test_file(::std::string* test_file) {
  if (test_file != NULL) {
    
  } else {
    
  }
  test_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_file);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.test_file)
}

// string summary_dir = 30;
inline void TrainingParams::clear_summary_dir() {
  summary_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::summary_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.summary_dir)
  return summary_dir_.GetNoArena();
}
inline void TrainingParams::set_summary_dir(const ::std::string& value) {
  
  summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.summary_dir)
}
#if LANG_CXX11
inline void TrainingParams::set_summary_dir(::std::string&& value) {
  
  summary_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.summary_dir)
}
#endif
inline void TrainingParams::set_summary_dir(const char* value) {
  
  summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.summary_dir)
}
inline void TrainingParams::set_summary_dir(const char* value, size_t size) {
  
  summary_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.summary_dir)
}
inline ::std::string* TrainingParams::mutable_summary_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.summary_dir)
  return summary_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_summary_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.summary_dir)
  
  return summary_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_summary_dir(::std::string* summary_dir) {
  if (summary_dir != NULL) {
    
  } else {
    
  }
  summary_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), summary_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.summary_dir)
}

// bool dump_weights = 31;
inline void TrainingParams::clear_dump_weights() {
  dump_weights_ = false;
}
inline bool TrainingParams::dump_weights() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_weights)
  return dump_weights_;
}
inline void TrainingParams::set_dump_weights(bool value) {
  
  dump_weights_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_weights)
}

// bool dump_activations = 32;
inline void TrainingParams::clear_dump_activations() {
  dump_activations_ = false;
}
inline bool TrainingParams::dump_activations() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_activations)
  return dump_activations_;
}
inline void TrainingParams::set_dump_activations(bool value) {
  
  dump_activations_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_activations)
}

// bool dump_gradients = 33;
inline void TrainingParams::clear_dump_gradients() {
  dump_gradients_ = false;
}
inline bool TrainingParams::dump_gradients() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_gradients)
  return dump_gradients_;
}
inline void TrainingParams::set_dump_gradients(bool value) {
  
  dump_gradients_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_gradients)
}

// string dump_dir = 34;
inline void TrainingParams::clear_dump_dir() {
  dump_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrainingParams::dump_dir() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.dump_dir)
  return dump_dir_.GetNoArena();
}
inline void TrainingParams::set_dump_dir(const ::std::string& value) {
  
  dump_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.dump_dir)
}
#if LANG_CXX11
inline void TrainingParams::set_dump_dir(::std::string&& value) {
  
  dump_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lbann_data.TrainingParams.dump_dir)
}
#endif
inline void TrainingParams::set_dump_dir(const char* value) {
  
  dump_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lbann_data.TrainingParams.dump_dir)
}
inline void TrainingParams::set_dump_dir(const char* value, size_t size) {
  
  dump_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lbann_data.TrainingParams.dump_dir)
}
inline ::std::string* TrainingParams::mutable_dump_dir() {
  
  // @@protoc_insertion_point(field_mutable:lbann_data.TrainingParams.dump_dir)
  return dump_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrainingParams::release_dump_dir() {
  // @@protoc_insertion_point(field_release:lbann_data.TrainingParams.dump_dir)
  
  return dump_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrainingParams::set_allocated_dump_dir(::std::string* dump_dir) {
  if (dump_dir != NULL) {
    
  } else {
    
  }
  dump_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_dir);
  // @@protoc_insertion_point(field_set_allocated:lbann_data.TrainingParams.dump_dir)
}

// int32 intermodel_comm_method = 35;
inline void TrainingParams::clear_intermodel_comm_method() {
  intermodel_comm_method_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::intermodel_comm_method() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.intermodel_comm_method)
  return intermodel_comm_method_;
}
inline void TrainingParams::set_intermodel_comm_method(::google::protobuf::int32 value) {
  
  intermodel_comm_method_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.intermodel_comm_method)
}

// int32 procs_per_model = 36;
inline void TrainingParams::clear_procs_per_model() {
  procs_per_model_ = 0;
}
inline ::google::protobuf::int32 TrainingParams::procs_per_model() const {
  // @@protoc_insertion_point(field_get:lbann_data.TrainingParams.procs_per_model)
  return procs_per_model_;
}
inline void TrainingParams::set_procs_per_model(::google::protobuf::int32 value) {
  
  procs_per_model_ = value;
  // @@protoc_insertion_point(field_set:lbann_data.TrainingParams.procs_per_model)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace lbann_data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lbann_2eproto__INCLUDED
